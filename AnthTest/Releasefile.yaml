# Exported from:        http://MacBook-Pro.local:5516/
# Release version:      24.1.3
# Date created:         Thu Jan 16 11:18:00 EST 2025

---
apiVersion: xl-release/v1
kind: Templates
metadata:
  home: anthem-test
spec:
- template: "221175"
  scheduledStartDate: 2025-01-09T09:00:00-05:00
  phases:
  - phase: New Phase
    tasks:
    - name: CreateReleaseTask
      type: xlrelease.CreateReleaseTask
      owner: admin
      newReleaseTitle: Rel-from-221175
      template: markdown-test/1
  scriptUsername: admin
  scriptUserPassword: !value "xlrelease_Release_221175_scriptUserPassword"
  riskProfile: Default risk profile
  author: admin
- template: 221175-Third
  scheduledStartDate: 2025-01-09T09:00:00-05:00
  phases:
  - phase: New Phase
    tasks:
    - name: CreateReleaseTask
      type: xlrelease.CreateReleaseTask
      owner: admin
      newReleaseTitle: Rel-from-221175-3
      template: ./221175
  scriptUsername: admin
  scriptUserPassword: !value "xlrelease_Release_221175_Third_scriptUserPassword"
  riskProfile: Default risk profile
  author: admin
- template: Anth-221175-second
  scheduledStartDate: 2025-01-09T09:00:00-05:00
  phases:
  - phase: New Phase
    tasks:
    - name: cr
      type: xlrelease.CreateReleaseTask
      owner: admin
      newReleaseTitle: secondtemplate
      templateVariables:
      - type: xlrelease.StringVariable
        key: user
        label: Owner
        description: The owner of the item.
        value: admin
      template: Samples & Tutorials/Welcome to Release!
  scriptUsername: admin
  scriptUserPassword: !value "xlrelease_Release_Anth_221175_second_scriptUserPassword"
  riskProfile: Default risk profile
  author: admin
- template: DUmmy-Ant
  scheduledStartDate: 2025-01-16T09:00:00-05:00
  phases:
  - phase: New Phase
    tasks:
    - name: cr1
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: dummy0aa
      templateVariables:
      - type: xlrelease.StringVariable
        key: ACC environment
        label: Title
        description: The title of the item.
        value: sai-1
      - type: xlrelease.StringVariable
        key: QA environment
        label: Title
        description: The title of the item.
        value: sai-1.1
      - type: xlrelease.StringVariable
        key: package
        label: Subject
        description: Subject of the message.
        value: abc
      template: Samples & Tutorials/Sample Release Template
  riskProfile: Default risk profile
  author: admin
- template: ERM
  scheduledStartDate: 2018-05-18T05:00:00-04:00
  phases:
  - phase: Release Setup
    tasks:
    - name: Auto generated Release set up data
      type: xlrelease.SequentialGroup
      description: Data being pulled from various sources including ServiceNow and
        Digital.ai Release
      tasks:
      - name: "Set user email, add APM Number"
        type: xlrelease.ScriptTask
        owner: "${release.owner}"
        precondition: "releaseVariables[\"PlanningRestarted\"] == \"No\""
        script: |-
          from datetime import datetime
          import datetime
          from com.xebialabs.xlrelease.domain.folder import Folder
          from com.xebialabs.xlrelease.api.v1.forms import Variable

          # For all applications, add a tag noting that the release is based on the ERM template and is not release ready
          if releaseVariables['PlanningRestarted'] == 'No':
              'Added 2/17 by CS Get the release title so we can set the tag. Confirm that the variable Release Ready is true before setting the tag to Not Release Ready
              release.tags.add('not release ready')
              release.tags.add('erm')
              releaseApi.updateRelease(release)

          rt_now = datetime.datetime.now()
          print ("__erm tags added__", rt_now)

          # For GBD applications, add the APM Number and gbd-releases as tags
          if releaseVariables['PlanningRestarted'] == 'No':
              releaseVariables['APM'] = folderVariables['folder.APM_Number']
              if folderVariables['folder.Division'] == "GBD":
                  release.tags.add(releaseVariables['APM'])
                  release.tags.add('gbd-releases')
                  releaseApi.updateRelease(release)

          rt_now = datetime.datetime.now()
          print ("__gbd tags added__", rt_now)

          # Function Definitions
          def get_variable_value(list_of_variables, key):
              for v in list_of_variables:
                  if v.key == key:
                      return v.value
              else:
                  return None

          # Get 00 ERM Folder Reference to check for EHDS enablement
          releaseVariables['UseEHDS'] = False
          erm_00_folder = folderApi.find("00 ERM", 1)
          # Check to see if the APM number is in the EHDSMapping variable
          kvmap = get_variable_value(folderApi.listVariables(erm_00_folder.id, True), "folder.%s" % "EHDSMapping")
          print ("__KVMP__", kvmap)

          if kvmap:
            for key in kvmap.keys():
              print ("__For Key__", key)
              if key == releaseVariables['APM']:
                print ("__key__", key)
                releaseVariables['UseEHDS'] = True
                print (str(releaseVariables['UseEHDS']))
                release.tags.add('ehds')
                releaseApi.updateRelease(release)

          rt_now = datetime.datetime.now()
          print ("__get EHDS mapping and flag__", rt_now)

          # For Microservices
          if 'folder.selectable_deployments' in folderVariables.keys():
            releaseVariables['microservice_list'] = folderVariables['folder.selectable_deployments']
            releaseVariables['Microservice_Flag'] = 'True'
          else:
            releaseVariables['Microservice_Flag'] = 'False'

          rt_now = datetime.datetime.now()
          print ("__set Microservice Flag__", rt_now)

          #*****************************************************#
          #----Get the Digital.ai Release AppPath in GBD Folder----#
          #---Purpose to provide sharepoint path link in change request---#
          def getFolderName(Id):
              folderId = '/'.join(Id.split('/')[0:-1])
              folder = folderApi.getFolder(folderId)
              #print "FolderId : " + folderId
              #print "FolderTitle : " + folder.title
              return folderId, folder.title

          def getFolderPath():
              FldrId,AppFldrName=getFolderName(release.id)
              FuncTwrFldrId,FuncTwrFldrName=getFolderName(FldrId)
              FldrNameLst=[FuncTwrFldrName,AppFldrName]
              appPath = '/'.join(FldrNameLst)
              appPath = appPath.replace(' ','_')
              print "DAIR_AppPath : " + appPath
              return appPath

          releaseVariables['DAIR_AppPath'] = getFolderPath()
          #*****************************************************#

           #Release Defaults
          # Check to see if Release Default values / variables should be updated
          if 'folder.RelDefaults' not in folderVariables.keys():
            RelDefaults = {}
            # Get folder id
            print "__Release ID:__ " + release.id
            folderId = '/'.join(release.id.split('/')[0:-1])
            fldr,fldrname = getFolderName(release.id)
            # Save localRelDefaults as Folder variables
            varID = Variable()
            varID.type = "xlrelease.MapStringStringVariable"
            varID.key = "folder.RelDefaults"
            varID.value = RelDefaults
            varID.requiresValue = False
            varID.showOnReleaseStart = False
            folderApi.createVariable(fldr, varID)
            releaseVariables['refreshRelDef'] = True
          else:
            if releaseVariables['updateRelDefaults'] == "Yes":
              releaseVariables['refreshRelDef'] = True
            else:
              releaseVariables['refreshRelDef'] = False

          rt_now = datetime.datetime.now()
          print ("__Refresh Release Defaults__", rt_now)

          # Check to see if Change Default values / variables should be updated
          if 'folder.chgDefaults' not in folderVariables.keys():
            chgDefaults = {}
            # Get folder id
            print "__Release ID:__ " + release.id
            folderId = '/'.join(release.id.split('/')[0:-1])
            fldr,fldrname = getFolderName(release.id)
            # Save localchgDefaults as Folder variables
            varID = Variable()
            varID.type = "xlrelease.MapStringStringVariable"
            varID.key = "folder.chgDefaults"
            varID.value = chgDefaults
            varID.requiresValue = False
            varID.showOnReleaseStart = False
            folderApi.createVariable(fldr, varID)
            releaseVariables['refreshChgDef'] = True
          else:
            if releaseVariables['updateChgDefaults'] == "Yes":
              releaseVariables['refreshChgDef'] = True
            else:
              releaseVariables['refreshChgDef'] = False

          rt_now = datetime.datetime.now()
          print ("__Set Change Defaults__", rt_now)

          'Set user email account for automated emails
          releaseVariables['UserEmail'] = """${release.owner}""" + "@anthem.com"

          # Get Fix Version and extract first 10 digits
          singleQuote = "'"
          doubleQuote = '"'
          sFix = releaseVariables['FixVersion']
          releaseVariables['Release_Date'] = sFix.strip(singleQuote).strip(doubleQuote)[:10]

          # Check to ensure FixVersion is in the right format yyyy-mm-dd
          format_yyyymmdd = "%Y-%m-%d"
          try:
              date = datetime.strptime(releaseVariables['Release_Date'], format_yyyymmdd)
          except Exception as e:
              print str(e)
              print("__ERM001 - First 10 characters of the FixVersion is not in the correct format: yyyy-mm-dd__")
          #    raise Exception

          rt_now = datetime.datetime.now()
          print ("__get JIRA Fix version and release date__", rt_now)

          #'Get APM Number from folder variable and add to title
          if releaseVariables['PlanningRestarted'] == 'No':
              new_title = """${release.title}""" + " " + folderVariables['folder.APM_Number'] + " "
              print "__Updated Release Title:__ " + new_title
              release = getCurrentRelease()
              release.title = new_title
              releaseApi.updateRelease(release)

          rt_now = datetime.datetime.now()
          print ("__Set title__", rt_now)

          # Automatically assign correct Email Tempalte to right task
          import re
          pattern = re.compile('.*Email.*')

          def GetParentFolderID(Id):
              return '/'.join(Id.split('/')[:-1])

          def GetChildFolderID(parentID, title):
              for folder in folderApi.list(parentID,0,50,1,False):
                  if folder.title == title:
                      print "__Folder ID:__ " + folder.id
                      return folder.id
              return None

          def GetEmailPrefixValue(folderID, key):
              for v in folderApi.listVariables(emailTemplateFolderID, True):
                  print v.key
                  if v.key == key:
                      return str(v.value)
              return None

          rt_now = datetime.datetime.now()
          print ("__Set Email Templates__", rt_now)

          #Get reference to release, current folder and folder holding email templates
          releaseId = release.id
          print "__Release ID:__ " + release.id
          folderId = GetParentFolderID(release.id)
          print "__Folder ID:__ " + folderId
          emailTemplateFolderID = GetChildFolderID(folderId, "Email Templates")
          print "__Email Folder ID:__ " + emailTemplateFolderID

          #Get folder variable folder.Template_Prefix from /Email Templates folder
          if emailTemplateFolderID:
              emailPrefix = GetEmailPrefixValue(emailTemplateFolderID, 'folder.Template_Prefix')
              "__Email Prefix:__ " + emailPrefix
          if not emailPrefix:
              print "__ERM002 - Email Folder Prefix variable not found__"
              raise Exception

          #Get task to modify
          if releaseVariables['PlanningRestarted'] == 'No':
              taskList = release.getAllTasks()
              for t in taskList:
                  if str(t.type) == 'xlrelease.CreateReleaseTask' and str(t.status) == 'PLANNED':
                      # Update folder name
                      t.folderId = folderId
                      taskApi.updateTask(t)
                      # Search for all tasks with Email in the title
                      print t.title
                      if t.title == 'Emergency Template':
                        templateNameList = releaseVariables['emer_template_name']
                        emailTemplateName = templateNameList[0]
                        print emailTemplateName
                        t.templateId = templateApi.getTemplates(emailTemplateName)[0].id
                        taskApi.updateTask(t)
                      elif t.title == 'Rollback Template':
                        templateNameList = releaseVariables['rb_template_name']
                        emailTemplateName = templateNameList[0]
                        print emailTemplateName
                        t.templateId = templateApi.getTemplates(emailTemplateName)[0].id
                        taskApi.updateTask(t)
                      elif pattern.match(t.title):
                          # Get name of template from first line of the task description
                          templateNameList = t.description.splitlines()
                          emailTemplateName = templateNameList[0]
                          # Add email prefix to template name, except if the parent folder is DevOps/ERM
                          if emailPrefix != "":
                              emailTemplateName = emailPrefix + " " + emailTemplateName
                          else:
                              print "__ERM003 - Missing Email Template:__ " + emailTemplateName
                              raise Exception
                          print emailTemplateName
                          # Update email template with prefix on the email CreateReleaseTask
                          t.templateId = templateApi.getTemplates(emailTemplateName)[0].id
                          taskApi.updateTask(t)

          rt_now = datetime.datetime.now()
          print ("__Last Command__", rt_now)



          # Reset restarted flag, so that emails template do not get reassgined
          #releaseVariables['PlanningRestarted'] = 'Yes'
      - name: Update Folder Variable
        type: xlrelease.ScriptTask
        script: |-
          # Adding Values to the RelDefaults Folder variable
          if len(folderVariables['folder.RelDefaults']) == 0:
            folderVariables['folder.RelDefaults'].update({'ExecuteSIT': ''})
            folderVariables['folder.RelDefaults'].update({'BlueGreen': ''})
            folderVariables['folder.RelDefaults'].update({'DR_Deploy': ''})
            folderVariables['folder.RelDefaults'].update({'PerfTestReq': ''})
            folderVariables['folder.RelDefaults'].update({'UseChecksum': ''})
      - name: Retrieve Default Release Variables
        type: xlrelease.ScriptTask
        precondition: |-
          localval = {}
          localval = folderVariables['folder.RelDefaults']
          print str(len(localval))
          #print str(len(folderVariables['folder.RelDefaults']))
          for key, value in localval.items():
            print(str(key), str(value))


          for key, value in localval.items():
            if key == "ExecuteSIT" and value != "" or releaseVariables['refreshRelDef'] == False:
              result = True
            elif key == "BlueGreen" and value != "" or releaseVariables['refreshRelDef'] == False:
              result = True
            elif key == "DR_Deploy" and value != "" or releaseVariables['refreshRelDef'] == False:
              result = True
            elif key == "PerfTestReq" and value != "" or releaseVariables['refreshRelDef'] == False:
              result = True
            elif key == "UseChecksum" and value != "" or releaseVariables['refreshRelDef'] == False:
              result = True
            else:
              result = False
        ignoreScriptVariableInterpolation: true
        script: |-
          localval = {}
          localval = folderVariables['folder.RelDefaults']
          print str(len(localval))
          print str(len(folderVariables['folder.RelDefaults']))
          for key, value in localval.items():
            print(str(key), str(value))

          # Set release variables to default variables

          for key, value in localval.items():
            if key == "ExecuteSIT" and value != None:
              releaseVariables["ExecuteSIT"] = value
            elif key == "BlueGreen" and value != None:
              releaseVariables["BlueGreen"] = value
            elif key == "DR_Deploy" and value != None:
              releaseVariables["DR_Deploy"] = value
            elif key == "PerfTestReq" and value != None:
              releaseVariables["PerfTestReq"] = value
            elif key == "UseChecksum" and value != None:
              releaseVariables["UseChecksum"] = value
      - name: Set Release Default Values
        type: xlrelease.UserInputTask
        description: Please enter the required information below.
        owner: "${release.owner}"
        precondition: |-
          # only execute script if you want to update the release defaults or if the folder variable is empty
          localval = {}
          localval = folderVariables['folder.RelDefaults']
          print str(len(localval))
          #print str(len(folderVariables['folder.RelDefaults']))
          for key, value in localval.items():
            print(str(key), str(value))


          for key, value in localval.items():
            if key == "ExecuteSIT" and value == "" or releaseVariables['refreshRelDef'] == True:
              result = True
            elif key == "BlueGreen" and value == "" or releaseVariables['refreshRelDef'] == True:
              result = True
            elif key == "DR_Deploy" and value == "" or releaseVariables['refreshRelDef'] == True:
              result = True
            elif key == "PerfTestReq" and value == "" or releaseVariables['refreshRelDef'] == True:
              result = True
            elif key == "UseChecksum" and value == "" or releaseVariables['refreshRelDef'] == True:
              result = True
            else:
              result = False
        variables:
        - UseChecksum
        - ExecuteSIT
        - PerfTestReq
        - BlueGreen
        - DR_Deploy
      - name: Update Release Default Values
        type: xlrelease.ScriptTask
        precondition: |-
          # only execute whenever you update the values or if the release is created for the first time in this folder

          localval = {}
          localval = folderVariables['folder.RelDefaults']
          print str(len(localval))
          #print str(len(folderVariables['folder.RelDefaults']))
          for key, value in localval.items():
            print(str(key), str(value))


          for key, value in localval.items():
            if key == "ExecuteSIT" and value == "" or releaseVariables['refreshRelDef'] == True:
              result = True
            elif key == "BlueGreen" and value == "" or releaseVariables['refreshRelDef'] == True:
              result = True
            elif key == "DR_Deploy" and value == "" or releaseVariables['refreshRelDef'] == True:
              result = True
            elif key == "PerfTestReq" and value == "" or releaseVariables['refreshRelDef'] == True:
              result = True
            elif key == "UseChecksum" and value == "" or releaseVariables['refreshRelDef'] == True:
              result = True
            else:
              result = False
        script: |-
          # load values into key value map to upload to folder variable


          localRelDefaults = {}
          localRelDefaults.update({'ExecuteSIT':releaseVariables['ExecuteSIT']})
          localRelDefaults.update({'PerfTestReq':releaseVariables['PerfTestReq']})
          localRelDefaults.update({'BlueGreen':releaseVariables['BlueGreen']})
          localRelDefaults.update({'UseChecksum':releaseVariables['UseChecksum']})
          localRelDefaults.update({'DR_Deploy':releaseVariables['DR_Deploy']})

          folderVariables['folder.RelDefaults'] = localRelDefaults

          print str(len(folderVariables['folder.RelDefaults']))
          for key, value in folderVariables['folder.RelDefaults'].items():
            print(str(key), str(value))
      - name: Find APM - CI
        type: xlrelease.Task
        owner: "${release.owner}"
        flagStatus: ATTENTION_NEEDED
        flagComment: Task 'Find APM - CI' in Phase 'Release Setup' has been replaced
          by a manual task. The task of type 'servicenow.FindRecordByQuery' could
          not be found because of a missing plugin.
        failureHandler: |-
          if (releaseVariables['attempt'] < 3):
            releaseVariables['attempt'] = releaseVariables['attempt'] + 1
            taskApi.retryTask(getCurrentTask().getId(), 'Retrying task from failure handler.')
          else:
            taskApi.skipTask(getCurrentTask().getId(), 'Skipped task from failure handler.')
            releaseVariables['attempt'] = 1
        taskRecoverOp: RUN_SCRIPT
        variableMapping:
          pythonScript.data: "${APM_Data}"
          pythonScript.password: "${global.snow.password}"
          pythonScript.sysId: "${APM Sys ID}"
        locked: true
      - name: Get CI Name
        type: xlrelease.ScriptTask
        owner: "${release.owner}"
        script: |-
          # Retrieve confiuration item from SN for opening change requests
          releaseVariables['Configuration_Item_SN'] = releaseVariables['APM_Data'] ['name']
          print "__Configuration Item:__ %s" % releaseVariables['Configuration_Item_SN']

          if releaseVariables["BlueGreen"] == "Yes":
            releaseVariables['Configuration_Item_SN_Off'] = releaseVariables["Configuration_Item_SN"]
            print "__Offline Configuration Item:__ %s" % releaseVariables['Configuration_Item_SN_Off']

          releaseVariables['DevOps_Maturity'] = releaseVariables['APM_Data'] ['u_devops_maturity_level']
          print "__DevOps Maturity:__ %s" % releaseVariables['DevOps_Maturity']
          if releaseVariables['DevOps_Maturity'] in ("Walk","Run","Fly"):
            releaseVariables['Model'] = "DevOps"
          else:
            releaseVariables['Model'] = "Normal"


          # Get BIT Number
          releaseVariables["BITNumber"] = releaseVariables["APM_Data"] ["u_bit_correlation_id"]
          print "__BIT Number:__ %s" % releaseVariables['BITNumber']
          print "__APM Number:__ %s" % releaseVariables['APM']

          # Set CM admin email
          if folderVariables['folder.Division'] == "GBD":
            releaseVariables['CM_Admin_Email'] = " GB-CM@elevancehealth.com"
          else:
            releaseVariables['CM_Admin_Email'] = " CM-admin@elevancehealth.com"

          # If ehdsendabled = True then change created from api in title to name of CI
          if releaseVariables['UseEHDS'] == True and releaseVariables['PlanningRestarted'] == 'No':
            rel = getCurrentRelease()
            new_title = rel.title
            print "__Release Title:__ " + new_title
            new_title = new_title.replace("None", releaseVariables['FixVersion'])
            new_title = new_title.replace("EHDS Release Created from API", releaseVariables['APM_Data'] ['name'])
            rel.title = new_title
            print "__Updated Release Title:__ " + new_title
            releaseApi.updateRelease(rel)
      - name: Retrieve Default Change Request Values
        type: xlrelease.ScriptTask
        owner: "${release.owner}"
        script: |-
          localval = {}
          localval = folderVariables['folder.chgDefaults']
          print str(len(localval))
          print str(len(folderVariables['folder.chgDefaults']))
          for key, value in localval.items():
            print(str(key), str(value))

          # Set folder variables to default variables

          for key, value in localval.items():
            if key == "Category_SN" and value != None:
              releaseVariables["DEF_Category"] = value
            elif key == "Initiating_Business_Division_SN" and value != None:
              releaseVariables["DEF_Inititating_Business_Division"] = value
            elif key == "Reason_SN" and value != None:
              releaseVariables["DEF_Reason"] = value
            elif key == "CHG_backout_plan_required" and value != None:
              releaseVariables["DEF_backout_plan_required"] = value
            elif key == "testPlan" and value != None:
              releaseVariables["DEF_testPlan"] = value
            elif key == "CHG_impacts_gbd_apps" and value != None:
              releaseVariables["DEF_Inititating_Business_Division"] = value
            elif key == "PeerReviewed_SN" and value != None:
              releaseVariables["DEF_PeerReviewed"] = value
            elif key == "testResults" and value != None:
              releaseVariables["DEF_testResults"] = value
            elif key == "impPlan" and value != None:
              releaseVariables["DEF_impPlan"] = value
            elif key == "CHG_u_can_backout_plan_be_executed" and value != None:
              releaseVariables["DEF_CHG_u_can_backout_plan_be_executed"] = value
            elif key == "CHG_impacts_network" and value != None:
              releaseVariables["DEF_impacts_network"] = value
            elif key == "ImpactSharedServices_SN" and value != None:
              releaseVariables["DEF_ImpactSharedServices"] = value
            elif key == "CallCenterImpact_SN" and value != None:
              releaseVariables["DEF_CallCenterImpact"] = value
            elif key == "CHG_impacts_for_bcbsa_mandates" and value != None:
              releaseVariables["DEF_impacts_for_bcbsa_mandates"] = value
            elif key == "CHG_impacts_internet_facing_application" and value != None:
              releaseVariables["DEF_impacts_internet_facing_application"] = value
            elif key == "CHG_prior_to_prod_impl" and value != None:
              releaseVariables["DEF_prior_to_prod_impl"] = value
            elif key == "CHG_Impacted_BU_SN_Multi" and value != None:
              if value != "[]":
                val = str(value).split(", ")
                print str(val)
                releaseVariables["DEF_Impacted_BU_SN_Multi"] = val
                print(releaseVariables["DEF_Impacted_BU_SN_Multi"])
            elif key == "CHG_impact_roles" and value != None:
              releaseVariables["DEF_impact_roles"] = value
            elif key == "CHG_verify_ac" and value != None:
              releaseVariables["DEF_verify_ac"] = value
            elif key == "CHG_impacts_daily_int" and value != None:
              releaseVariables["DEF_impacts_daily_int"] = value
            elif key == "CHG_high_severity_defects" and value != None:
              releaseVariables["DEF_high_severity_defects"] = value
            elif key == "Deployment_Tool_SN_Multi" and value != None:
              if value != "[]":
                val = str(value).split(", ")
                print str(val)
                releaseVariables["DEF_Deployment_Tool_SN_Multi"] = val
                print(releaseVariables["DEF_Deployment_Tool_SN_Multi"])
            elif key == "Release_Manager_SN" and value != None:
              releaseVariables["DEF_Release_Manager"] = value
            elif key == "CHG_assigned_to" and value != None:
              releaseVariables["DEF_CHG_assigned_to"] = value
            elif key == "CHG_assignment_group" and value != None:
              releaseVariables["DEF_CHG_assignment_group"] = value
            elif key == "CHG_will_this_change_introduces_new" and value != None:
              releaseVariables["DEF_CHG_will_this_change_introduces_new"] = value


          # For GBD applications, add the APM Number and gbd-releases as tags, and add default values for Change Request
          if folderVariables['folder.Division'] == "GBD":
              releaseVariables['CM_Admin_Email'] = " GB-CM@elevancehealth.com"
          else:
              releaseVariables['CM_Admin_Email'] = " CM-admin@elevancehealth.com"
      - name: Set Enterprise Change Request Default Values
        type: xlrelease.UserInputTask
        description: Please enter the required information below.
        owner: "${release.owner}"
        precondition: |-
          # Only execute script if folder variable needs to be udpated
          releaseVariables['refreshChgDef'] == True and folderVariables['folder.Division'] != "GBD"
        variables:
        - DEF_Inititating_Business_Division
        - DEF_Category
        - DEF_Reason
        - DEF_backout_plan_required
        - DEF_testPlan
        - DEF_PeerReviewed
        - DEF_testResults
        - DEF_impPlan
        - DEF_backoutPlan
        - DEF_CHG_u_can_backout_plan_be_executed
        - DEF_impacts_network
        - DEF_prior_to_prod_impl
        - DEF_CallCenterImpact
        - DEF_CHG_impacts_gbd_apps
        - DEF_impacts_for_bcbsa_mandates
        - DEF_impacts_internet_facing_application
        - DEF_ImpactSharedServices
        - DEF_Impacted_BU_SN_Multi
        - DEF_impact_roles
        - DEF_verify_ac
        - DEF_impacts_daily_int
        - DEF_high_severity_defects
        - DEF_Deployment_Tool_SN_Multi
        - DEF_Release_Manager
        - DEF_CHG_assignment_group
        - DEF_CHG_assigned_to
      - name: Set GB Change Request Default Values
        type: xlrelease.UserInputTask
        description: Please enter the required information below.
        owner: "${release.owner}"
        precondition: |-
          # Only execute script if folder variable needs to be udpated
          releaseVariables['refreshChgDef'] == True and folderVariables['folder.Division'] == "GBD"
        variables:
        - DEF_Inititating_Business_Division
        - DEF_Category
        - DEF_Reason
        - DEF_backout_plan_required
        - DEF_PeerReviewed
        - DEF_CHG_u_can_backout_plan_be_executed
        - DEF_impacts_network
        - DEF_prior_to_prod_impl
        - DEF_CallCenterImpact
        - DEF_CHG_impacts_gbd_apps
        - DEF_impacts_for_bcbsa_mandates
        - DEF_impacts_internet_facing_application
        - DEF_ImpactSharedServices
        - DEF_Impacted_BU_SN_Multi
        - DEF_impact_roles
        - DEF_verify_ac
        - DEF_impacts_daily_int
        - DEF_high_severity_defects
        - DEF_Deployment_Tool_SN_Multi
        - DEF_Release_Manager
        - DEF_CHG_will_this_change_introduces_new
        - DEF_CHG_assignment_group
        - DEF_CHG_assigned_to
      - name: Update Change Request Values
        type: xlrelease.ScriptTask
        script: |-
          # Read default values into release variables for change creation

          if releaseVariables['DEF_Category'] != None or releaseVariables['DEF_Category'] != "":
            releaseVariables['Category_SN'] = releaseVariables['DEF_Category']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['Category_SN_Off'] = releaseVariables['DEF_Category']
          if releaseVariables['DEF_Inititating_Business_Division'] != None or releaseVariables['DEF_Inititating_Business_Division'] != "":
            releaseVariables['Initiating_Business_Division_SN'] = releaseVariables['DEF_Inititating_Business_Division']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['Initiating_Business_Division_SN_Off'] = releaseVariables['DEF_Inititating_Business_Division']
          if releaseVariables['DEF_Reason'] != None or releaseVariables['DEF_Reason'] != "":
            releaseVariables['Reason_SN'] = releaseVariables['DEF_Reason']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['Reason_SN_Off'] = releaseVariables['DEF_Reason']
          if releaseVariables['DEF_backout_plan_required'] != None or releaseVariables['DEF_backout_plan_required'] != "":
            releaseVariables['CHG_backout_plan_required'] = releaseVariables['DEF_backout_plan_required']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['CHG_backout_plan_required_Off'] = releaseVariables['DEF_backout_plan_required']
          if releaseVariables['DEF_testPlan'] != None or releaseVariables['DEF_testPlan'] != "":
            releaseVariables['testPlan'] = releaseVariables['DEF_testPlan']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['testPlan_Off'] = releaseVariables['DEF_testPlan']
          if releaseVariables['DEF_PeerReviewed'] != None or releaseVariables[''] != "DEF_PeerReviewed":
            releaseVariables['PeerReviewed_SN'] = releaseVariables['DEF_PeerReviewed']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['PeerReviewed_SN_Off'] = releaseVariables['DEF_PeerReviewed']
          if releaseVariables['DEF_testResults'] != None or releaseVariables['DEF_testResults'] != "":
            releaseVariables['testResults'] = releaseVariables['DEF_testResults']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['testResults_Off'] = releaseVariables['DEF_testResults']
          if releaseVariables['DEF_impPlan'] != None or releaseVariables['DEF_impPlan'] != "":
            releaseVariables['impPlan'] = releaseVariables['DEF_impPlan']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['impPlan_Off'] = releaseVariables['DEF_impPlan']
          if releaseVariables['DEF_CHG_u_can_backout_plan_be_executed'] != None or releaseVariables['DEF_CHG_u_can_backout_plan_be_executed'] != "":
            releaseVariables['CHG_u_can_backout_plan_be_executed'] = releaseVariables['DEF_CHG_u_can_backout_plan_be_executed']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['CHG_u_can_backout_plan_be_executed_Off'] = releaseVariables['DEF_CHG_u_can_backout_plan_be_executed']
          if releaseVariables['DEF_impacts_network'] != None or releaseVariables[''] != "DEF_impacts_network":
            releaseVariables['CHG_impacts_network'] = releaseVariables['DEF_impacts_network']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['CHG_impacts_network_Off'] = releaseVariables['DEF_impacts_network']
          if releaseVariables['DEF_CHG_impacts_gbd_apps'] != None or releaseVariables['DEF_CHG_impacts_gbd_apps'] != "":
            releaseVariables['CHG_impacts_gbd_apps'] = releaseVariables['DEF_CHG_impacts_gbd_apps']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['CHG_impacts_gbd_apps_Off'] = releaseVariables['DEF_CHG_impacts_gbd_apps']
          if releaseVariables['DEF_ImpactSharedServices'] != None or releaseVariables['DEF_ImpactSharedServices'] != "":
            releaseVariables['ImpactSharedServices_SN'] = releaseVariables['DEF_ImpactSharedServices']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['ImpactSharedServices_SN_Off'] = releaseVariables['DEF_ImpactSharedServices']
          if releaseVariables['DEF_CallCenterImpact'] != None or releaseVariables['DEF_CallCenterImpact'] != "":
            releaseVariables['CallCenterImpact_SN'] = releaseVariables['DEF_CallCenterImpact']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['CallCenterImpact_SN_Off'] = releaseVariables['DEF_CallCenterImpact']
          if releaseVariables['DEF_impacts_for_bcbsa_mandates'] != None or releaseVariables['DEF_impacts_for_bcbsa_mandates'] != "":
            releaseVariables['CHG_impacts_for_bcbsa_mandates'] = releaseVariables['DEF_impacts_for_bcbsa_mandates']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['CHG_impacts_for_bcbsa_mandates_Off'] = releaseVariables['DEF_impacts_for_bcbsa_mandates']
          if releaseVariables['DEF_impacts_internet_facing_application'] != None or releaseVariables['DEF_impacts_internet_facing_application'] != "":
            releaseVariables['CHG_impacts_internet_facing_application'] = releaseVariables['DEF_impacts_internet_facing_application']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['CHG_impacts_internet_facing_application_Off'] = releaseVariables['DEF_impacts_internet_facing_application']
          if releaseVariables['DEF_prior_to_prod_impl'] != None or releaseVariables[''] != "DEF_prior_to_prod_impl":
            releaseVariables['CHG_prior_to_prod_impl'] = releaseVariables['DEF_prior_to_prod_impl']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['CHG_prior_to_prod_impl_Off'] = releaseVariables['DEF_prior_to_prod_impl']
          if releaseVariables['DEF_Impacted_BU_SN_Multi'] != None or releaseVariables['DEF_Impacted_BU_SN_Multi'] != "":
            releaseVariables['CHG_Impacted_BU_SN_Multi'] = releaseVariables['DEF_Impacted_BU_SN_Multi']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['CHG_Impacted_BU_SN_Off_Multi'] = releaseVariables['DEF_Impacted_BU_SN_Multi']
          if releaseVariables['DEF_impact_roles'] != None or releaseVariables['DEF_impact_roles'] != "":
            releaseVariables['CHG_impact_roles'] = releaseVariables['DEF_impact_roles']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['CHG_impact_roles_Off'] = releaseVariables['DEF_impact_roles']
          if releaseVariables['DEF_verify_ac'] != None or releaseVariables['DEF_verify_ac'] != "":
            releaseVariables['CHG_verify_ac'] = releaseVariables['DEF_verify_ac']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['CHG_verify_ac_Off'] = releaseVariables['DEF_verify_ac']
          if releaseVariables['DEF_impacts_daily_int'] != None or releaseVariables['DEF_impacts_daily_int'] != "":
            releaseVariables['CHG_impacts_daily_int'] = releaseVariables['DEF_impacts_daily_int']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['CHG_impacts_daily_int_Off'] = releaseVariables['DEF_impacts_daily_int']
          if releaseVariables['DEF_high_severity_defects'] != None or releaseVariables['DEF_high_severity_defects'] != "":
            releaseVariables['CHG_high_severity_defects'] = releaseVariables['DEF_high_severity_defects']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['CHG_high_severity_defects_Off'] = releaseVariables['DEF_high_severity_defects']
          if releaseVariables['DEF_Deployment_Tool_SN_Multi'] != None or releaseVariables['DEF_Deployment_Tool_SN_Multi'] != "":
            releaseVariables['Deployment_Tool_SN_Multi'] = releaseVariables['DEF_Deployment_Tool_SN_Multi']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['Deployment_Tool_SN_Off_Multi'] = releaseVariables['DEF_Deployment_Tool_SN_Multi']
          if releaseVariables['DEF_Release_Manager'] != None or releaseVariables['DEF_Release_Manager'] != "":
            releaseVariables['Release_Manager_SN'] = releaseVariables['DEF_Release_Manager']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['Release_Manager_SN_Off'] = releaseVariables['DEF_Release_Manager']
          if releaseVariables['DEF_CHG_assigned_to'] != None or releaseVariables['DEF_CHG_assigned_to'] != "":
            releaseVariables['CHG_assigned_to'] = releaseVariables['DEF_CHG_assigned_to']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['CHG_assigned_to_Off'] = releaseVariables['DEF_CHG_assigned_to']
          if releaseVariables['DEF_CHG_assignment_group'] != None or releaseVariables['DEF_CHG_assignment_group'] != "":
            releaseVariables['CHG_assignment_group'] = releaseVariables['DEF_CHG_assignment_group']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['CHG_assignment_group_Off'] = releaseVariables['DEF_CHG_assignment_group']
          if releaseVariables['DEF_CHG_will_this_change_introduces_new'] != None or releaseVariables['DEF_CHG_will_this_change_introduces_new'] != "":
            releaseVariables['CHG_will_this_change_introduces_new'] = releaseVariables['DEF_CHG_will_this_change_introduces_new']
            if releaseVariables['BlueGreen'] == 'Yes':
              releaseVariables['CHG_will_this_change_introduces_new_Off'] = releaseVariables['DEF_CHG_will_this_change_introduces_new']

          # load values into key value map to upload to folder variable
          if releaseVariables['refreshChgDef'] == True:
            localchgDefaults = {}
            localchgDefaults.update({'Category_SN':releaseVariables['Category_SN']})
            localchgDefaults.update({'Initiating_Business_Division_SN':releaseVariables['Initiating_Business_Division_SN']})
            localchgDefaults.update({'Reason_SN':releaseVariables['Reason_SN']})
            localchgDefaults.update({'CHG_backout_plan_required':releaseVariables['CHG_backout_plan_required']})
            localchgDefaults.update({'testPlan':releaseVariables['testPlan']})
            localchgDefaults.update({'PeerReviewed_SN':releaseVariables['PeerReviewed_SN']})
            localchgDefaults.update({'testResults':releaseVariables['testResults']})
            localchgDefaults.update({'impPlan':releaseVariables['impPlan']})
            localchgDefaults.update({'testPlan':releaseVariables['testPlan']})
            localchgDefaults.update({'backoutPlan':releaseVariables['backoutPlan']})
            localchgDefaults.update({'CHG_u_can_backout_plan_be_executed':releaseVariables['CHG_u_can_backout_plan_be_executed']})
            localchgDefaults.update({'CHG_impacts_network':releaseVariables['CHG_impacts_network']})
            localchgDefaults.update({'ImpactSharedServices_SN':releaseVariables['ImpactSharedServices_SN']})
            localchgDefaults.update({'CallCenterImpact_SN':releaseVariables['CallCenterImpact_SN']})
            localchgDefaults.update({'CHG_impacts_gbd_apps':releaseVariables['CHG_impacts_gbd_apps']})
            localchgDefaults.update({'CHG_impacts_for_bcbsa_mandates':releaseVariables['CHG_impacts_for_bcbsa_mandates']})
            localchgDefaults.update({'CHG_impacts_internet_facing_application':releaseVariables['CHG_impacts_internet_facing_application']})
            localchgDefaults.update({'CHG_prior_to_prod_impl':releaseVariables['CHG_prior_to_prod_impl']})
            if releaseVariables['DEF_Impacted_BU_SN_Multi'] != None or releaseVariables['DEF_Impacted_BU_SN_Multi'] != "":
              ibd = releaseVariables['DEF_Impacted_BU_SN_Multi']
              Impacting_Division_Final = ""
              for i in ibd:
                Impacting_Division_Final = Impacting_Division_Final + str(i) + ", "
              Impacting_Division_Final = Impacting_Division_Final[:-2]
            localchgDefaults.update({'CHG_Impacted_BU_SN_Multi':Impacting_Division_Final})
            localchgDefaults.update({'CHG_impact_roles':releaseVariables['CHG_impact_roles']})
            localchgDefaults.update({'CHG_verify_ac':releaseVariables['CHG_verify_ac']})
            localchgDefaults.update({'CHG_impacts_daily_int':releaseVariables['CHG_impacts_daily_int']})
            localchgDefaults.update({'CHG_high_severity_defects':releaseVariables['CHG_high_severity_defects']})
            if releaseVariables['DEF_Deployment_Tool_SN_Multi'] != None or releaseVariables['DEF_Deployment_Tool_SN_Multi'] != "":
              dtf = releaseVariables['DEF_Deployment_Tool_SN_Multi']
              Deploy_Tool_Final = ""
              for i in dtf:
                Deploy_Tool_Final = Deploy_Tool_Final + str(i) + ", "
              Deploy_Tool_Final = Deploy_Tool_Final[:-2]
            localchgDefaults.update({'Deployment_Tool_SN_Multi':Deploy_Tool_Final})
            localchgDefaults.update({'Release_Manager_SN':releaseVariables['Release_Manager_SN']})
            localchgDefaults.update({'CHG_assigned_to':releaseVariables['CHG_assigned_to']})
            localchgDefaults.update({'CHG_assignment_group':releaseVariables['CHG_assignment_group']})
            localchgDefaults.update({'CHG_will_this_change_introduces_new':releaseVariables['CHG_will_this_change_introduces_new']})

            folderVariables['folder.chgDefaults'] = localchgDefaults

            print str(len(folderVariables['folder.chgDefaults']))
            for key, value in folderVariables['folder.chgDefaults'].items():
              print(str(key), str(value))

          if releaseVariables['testPlan'] == "" or releaseVariables['testPlan'] == None:
            releaseVariables['testPlan'] = "Please attach supporting documentation or provide appropriate details."
    - name: Release Tagging
      type: xlrelease.SequentialGroup
      precondition: "releaseVariables[\"PlanningRestarted\"] == \"No\""
      tasks:
      - name: Add Release Week Tag
        type: anthem.GetReleaseWeekTag
        releaseDate: "${Release_Date}"
        owner: "${release.owner}"
        variableMapping:
          pythonScript.releaseWeekTag: "${releaseWeekTag}"
        locked: true
      - name: Update Release Tag
        type: xlr.AddTag
        newTag: "${releaseWeekTag}"
        owner: "${release.owner}"
        locked: true
      - name: Set Restarted Var
        type: xlrelease.ScriptTask
        owner: "${release.owner}"
        script: |-
          # Reset restarted flag, so that emails template do not get reassgined
          releaseVariables['PlanningRestarted'] = 'Yes'
    - name: Auto pulled JIRA data
      type: xlrelease.SequentialGroup
      description: Data being pulled from JIRA on the project and fixed version to
        establish release content.
      tasks:
      - name: Get JIRA Content
        type: jira.Query
        username: srcERMJIRA
        query: "${JIRAContentQuery}"
        owner: "${release.owner}"
        failureHandler: |-
          releaseVariables['JiraError'] = True
          taskApi.skipTask(getCurrentTask().getId(), 'Skipped task from failure handler.')
        taskFailureHandlerEnabled: true
        taskRecoverOp: RUN_SCRIPT
        variableMapping:
          pythonScript.password: "${global.ermjira.password}"
          pythonScript.issues: "${Get-JIRA-Content}"
      - name: Report JIRA Error
        type: xlrelease.Task
        description: |-
          The JIRA Content query has retrieve no records in scope for this release or has received an error in execution.  The variables for this query are:

          * APM: ${APM}
          * Fix Version: ${FixVersion}
          * Release Date: ${Release_Date}

          Please correct any errors in JIRA, and then complete this task so that the query will restart.  Check the following in JIRA:

          * Missing or malformed Fix Version
          * APM Number is added to all stories /defects
          * Release Date is malformed

          The query generated in the previous step is:

          ${JIRAContentQuery}
        owner: "${release.owner}"
        precondition: |-
          if folderVariables['folder.Division'] == "GBD" and releaseVariables['JiraError'] == True and releaseVariables["UseChecksum"] in ("Checksum Based Solution", "Hashtag Based Solution"):
              result = True
          elif folderVariables['folder.Division'] == "GBD" and releaseVariables['Get-JIRA-Content'] == {} and releaseVariables["UseChecksum"] in ("Checksum Based Solution", "Hashtag Based Solution"):
              result = True
          else:
              result = False
        locked: true
      - name: Restart JIRA Task
        type: xlrelease.ScriptTask
        owner: "${release.owner}"
        precondition: |-
          if folderVariables['folder.Division'] == "GBD" and releaseVariables['JiraError'] == True and releaseVariables["UseChecksum"] == "Checksum Based Solution":
              result = True
          elif folderVariables['folder.Division'] == "GBD" and releaseVariables['Get-JIRA-Content'] == {} and releaseVariables["UseChecksum"] == "Checksum Based Solution":
              result = True
          else:
              result = False
        script: |-
          # Reset error flag
          releaseVariables['JiraError'] = False

          # restart sequential group
          from com.xebialabs.xlrelease.repository import PhaseVersion
          release = getCurrentRelease()
          PlanPhaseTitle = getCurrentPhase().title  # Change as needed
          firstPlanPhaseTaskTitle = "Auto pulled JIRA data" # Change as needed
          PlanPhase = phaseApi.searchPhasesByTitle(PlanPhaseTitle, release.id)[-1]
          firstPlanTask = taskApi.searchTasksByTitle(firstPlanPhaseTaskTitle, PlanPhase.title, release.id)[-1]
          releaseApi.restartPhase(release, PlanPhase, firstPlanTask, PhaseVersion.LATEST, True)
    - name: Prepare JIRA Content for Email Reporting
      type: xlrelease.ScriptTask
      owner: "${release.owner}"
      script: |-
        head1 = "Key"
        head2 = "Summary"
        head3 = "-"

        releaseVariables['EmailText'] = "## JIRA Content ## \n \n"
        jiraContent = releaseVariables['Get-JIRA-Content']
        sMessage = "| " + head1.ljust(80," ") + "| " + head2.ljust(120, " ") + "\n | " + head3.ljust(80,head3) + "| " + head3.ljust(120,head3) + "|\n"
        for key in jiraContent:
            keyLink = '[' + key + '](' + releaseVariables["JIRAURL"] + key + ')'
            sMessage = sMessage + " | " + keyLink + "| " + jiraContent[key].ljust(120," ") + " | \n"

        releaseVariables['EmailText'] = releaseVariables['EmailText'] + sMessage
    - name: "Email: Report JIRA Content"
      type: xlrelease.NotificationTask
      owner: "${release.owner}"
      addresses:
      - "${UserEmail}"
      subject: "${release.title}: JIRA Issues"
      body: |-
        **${release.title}**
        ********************
        ${EmailText}
    - name: Prepare JIRA Content for Change Description
      type: xlrelease.ScriptTask
      owner: "${release.owner}"
      script: |-
        from com.xebialabs.xlrelease.api.v1.forms import Variable
        from com.xebialabs.xlrelease.domain.variables import MapStringStringVariable
        import re,sys

        #*****************************************************#
        #----CHG Ticket Description with JIRA Details----#
        chg_desc = """
        JIRA Stories/Issues Details.
        *****************************
         JIRA | JIRA_LINK | SUMMARY ||
        ---------------------------------------------------"""

        jiraContent = releaseVariables['Get-JIRA-Content']
        for key in jiraContent:
            chg_desc += '\n || ' + key + ' | ' + releaseVariables["JIRAURL"]+key  + ' | ' + jiraContent[key] + ' ||'
        chg_desc += """\n*****************************"""
        releaseVariables['CHG_description'] = chg_desc
        releaseVariables['CHG_description_Off'] = chg_desc

        #*****************************************************#

        #----SIT Deployments are not supported from XLR for GBD Teams----#
        if folderVariables['folder.Division'] == "GBD" and releaseVariables["UseChecksum"] in ("Checksum Based Solution", "Hashtag Based Solution"):
            releaseVariables['ExecuteSIT'] = 'No'

        #*****************************************************#
    color: '#999999'
  - phase: Offline Change Request Creation
    tasks:
    - name: Enter Offline Production Change Data
      type: xlrelease.SequentialGroup
      precondition: "releaseVariables[\"Change_Number_SN_Off\"] == \"\" and releaseVariables[\"\
        BlueGreen\"] == \"Yes\""
      tasks:
      - name: Data entry for Enterprise Offline
        type: xlrelease.UserInputTask
        description: |-
          NOTE:
          You will find the link to the newly created change request by viewing the comment section in the "Pulling Change Request Data" task; after it has completed.

          [Enterprise Release Calendar 2024](https://collaborate.wellpoint.com/sites/Ent_Rel_Mgmt/_layouts/15/download.aspx?UniqueId=919ab112-c443-4dbd-87af-d2da2bebe706)
          [Enterprise Release Calendar 2025  (Tableau Access Required)](https://tableauprod.elevancehealth.com/#/site/EntNonGBD/views/2025_EnterpriseReleaseCalendar/Calendar?:iid=1)

          To create the change request fill in the information below:
          Fill in the required fields.
          If there is down time the start and end times will be required.
          Release owner must be in the Release manager role in ServiceNow.
          Release owner must be in the assignment group that is picked.
        owner: "${release.owner}"
        precondition: |-
          from com.xebialabs.xlrelease.domain.status import FlagStatus
          if folderVariables['folder.Division'] != "GBD":
            result = True
            if releaseVariables['Date_Flag'] == True:
              tskNext = getCurrentTask()
              tskNext.setFlagComment("Planned Start Date is entered incorrectly in the Change Form")
              tskNext.setFlagStatus(FlagStatus.AT_RISK)
              taskApi.updateTask(tskNext)
          else:
              result = False
        variables:
        - nbrImpTasks_Off
        - Environment_SN_Off
        - Category_SN_Off
        - Initiating_Business_Division_SN_Off
        - Reason_SN_Off
        - ChangeInitiator-Off
        - CHG_technical_change_only_Off
        - Configuration_Item_SN_Off
        - CHG_description_Off
        - Planned_Start_Date_SN_Off
        - Planned_End_Date_SN_Off
        - Change_Requires_Outage_SN_Off
        - Planned_Outage_Start_SN_Off
        - Planned_Outage_End_SN_Off
        - CHG_backout_plan_required_Off
        - testPlan_Off
        - PeerReviewed_SN_Off
        - testResults_Off
        - impPlan_Off
        - backoutPlan_Off
        - CHG_u_can_backout_plan_be_executed_Off
        - CHG_impacts_network_Off
        - ImpactSharedServices_SN_Off
        - CallCenterImpact_SN_Off
        - CHG_impacts_gbd_apps_Off
        - CHG_impacts_for_bcbsa_mandates_Off
        - CHG_impacts_internet_facing_application_Off
        - CHG_prior_to_prod_impl_Off
        - CHG_Impacted_BU_SN_Off_Multi
        - CHG_impact_roles_Off
        - CHG_verify_ac_Off
        - CHG_impacts_daily_int_Off
        - CHG_high_severity_defects_Off
        - Deployment_Tool_SN_Off_Multi
        - Release_Manager_SN_Off
        - CHG_assignment_group_Off
        - CHG_assigned_to_Off
      - name: Data entry for GB Offline
        type: xlrelease.UserInputTask
        description: |-
          NOTE:
          You will find the link to the newly created change request by viewing the comment section in the "Pulling Change Request Data" task; after it has completed.

          [Enterprise Release Calendar 2024](https://collaborate.wellpoint.com/sites/Ent_Rel_Mgmt/_layouts/15/download.aspx?UniqueId=919ab112-c443-4dbd-87af-d2da2bebe706)
          [Enterprise Release Calendar 2025  (Tableau Access Required)](https://tableauprod.elevancehealth.com/#/site/EntNonGBD/views/2025_EnterpriseReleaseCalendar/Calendar?:iid=1)

          To create the change request fill in the information below:
          Fill in the required fields.
          If there is down time the start and end times will be required.
          Release owner must be in the Release manager role in ServiceNow.
          Release owner must be in the assignment group that is picked.
        owner: "${release.owner}"
        precondition: |-
          from com.xebialabs.xlrelease.domain.status import FlagStatus
          if folderVariables['folder.Division'] == "GBD":
            result = True
            if releaseVariables['Date_Flag'] == True:
              tskNext = getCurrentTask()
              tskNext.setFlagComment("Planned Start Date is entered incorrectly in the Change Form")
              tskNext.setFlagStatus(FlagStatus.AT_RISK)
              taskApi.updateTask(tskNext)
          else:
              result = False
        variables:
        - nbrImpTasks_Off
        - Environment_SN_Off
        - Category_SN_Off
        - Initiating_Business_Division_SN_Off
        - Reason_SN_Off
        - ChangeInitiator-Off
        - CHG_technical_change_only_Off
        - Configuration_Item_SN_Off
        - CHG_description_Off
        - PeerReviewed_SN_Off
        - Planned_Start_Date_SN_Off
        - Planned_End_Date_SN_Off
        - Change_Requires_Outage_SN_Off
        - Planned_Outage_Start_SN_Off
        - Planned_Outage_End_SN_Off
        - CHG_backout_plan_required_Off
        - CHG_u_can_backout_plan_be_executed_Off
        - CHG_impacts_network_Off
        - ImpactSharedServices_SN_Off
        - CallCenterImpact_SN_Off
        - CHG_impacts_gbd_apps_Off
        - CHG_impacts_for_bcbsa_mandates_Off
        - CHG_impacts_internet_facing_application_Off
        - CHG_prior_to_prod_impl_Off
        - CHG_Impacted_BU_SN_Off_Multi
        - CHG_impact_roles_Off
        - CHG_verify_ac_Off
        - CHG_impacts_daily_int_Off
        - CHG_high_severity_defects_Off
        - Deployment_Tool_SN_Off_Multi
        - Release_Manager_SN_Off
        - CHG_will_this_change_introduces_new_Off
        - CHG_assignment_group_Off
        - CHG_assigned_to_Off
      - name: Format Multi-Select Values for Service Now
        type: xlrelease.ScriptTask
        owner: "${release.owner}"
        script: |-
          from datetime import datetime
          # Convert multi-select to string

          Deploy_Tool_Final = ""
          Impacting_Division_Final = ""

          dtf = releaseVariables['Deployment_Tool_SN_Off_Multi']

          for i in dtf:
              Deploy_Tool_Final = Deploy_Tool_Final + str(i) + ", "

          Deploy_Tool_Final = Deploy_Tool_Final[:-2]
          print Deploy_Tool_Final

          releaseVariables["Deploy_Tool_Final_Off"] = Deploy_Tool_Final

          ibd = releaseVariables['CHG_Impacted_BU_SN_Off_Multi']

          for i in ibd:
              Impacting_Division_Final = Impacting_Division_Final + str(i) + ", "

          Impacting_Division_Final = Impacting_Division_Final[:-2]
          print Impacting_Division_Final

          releaseVariables["Impacting_Division_Final_Off"] = Impacting_Division_Final

          #Error Handling on Planned Start and End Date in Change Creation

          dt = datetime.now()
          print(dt)
          today = str(dt).split('.')[0]
          print(today)

          start_date = releaseVariables['Planned_Start_Date_SN_Off']
          end_date = releaseVariables['Planned_End_Date_SN_Off']

          if start_date < today or end_date < today or start_date > end_date:
            releaseVariables['Date_Flag'] = 'True'
          else:
            releaseVariables['Date_Flag'] = 'False'
    - name: Restart Phase if Planned Implementation Start Date is Greater than End
        Date
      type: xlrelease.ScriptTask
      precondition: "releaseVariables['Date_Flag'] == True"
      script: |-
        from com.xebialabs.xlrelease.repository import PhaseVersion
        release = getCurrentRelease()
        ChangeCreationPhaseTitle = getCurrentPhase().title  # Change as needed
        firstChangeCreationPhaseTaskTitle = 'Enter Offline Production Change Data' # Change as needed
        ChangePhase = phaseApi.searchPhasesByTitle(ChangeCreationPhaseTitle, release.id)[-1]
        firstChangeTask = taskApi.searchTasksByTitle(firstChangeCreationPhaseTaskTitle, ChangePhase.title, release.id)[-1]
        releaseApi.restartPhase(release, ChangePhase, firstChangeTask, PhaseVersion.LATEST, True)
    - name: Auto creation of Offline Change Request in ServiceNow
      type: xlrelease.SequentialGroup
      description: These tasks will execute after the input of the data for the change
        request.
      precondition: "releaseVariables[\"Change_Number_SN_Off\"] == \"\" and releaseVariables[\"\
        BlueGreen\"] == \"Yes\""
      tasks:
      - name: Update Offline Change Request
        type: webhook.JsonWebhook
        URL: https://elevancehealth.service-now.com/api/now/import/u_xl_deploy_release_change_creation
        method: POST
        body: |-
          {
          "u_change_initiator":"${ChangeInitiator-Off}",
          "u_configuration_item":"${Configuration_Item_SN_Off}",
          "u_release_manager":"${Release_Manager_SN_Off}",
          "u_short_description":"${release.title}",
          "u_xlr_url_tied_to_your_release":"${release.url}",
          "u_source_reference_id":"${release.id}",
          "u_initiating_business_division":"${Initiating_Business_Division_SN_Off}",
          "u_reason":"u_application",
          "u_category":"Applications Software",
          "u_environment":"u_offlineproduction",
          "u_deployment_tool":"Other",
          "u_planned_start_date":"${Planned_Start_Date_SN_Off}",
          "u_change_requires_outage":"${Change_Requires_Outage_SN_Off}",
          "u_planned_end_date":"${Planned_End_Date_SN_Off}",
          "u_planned_outage_start":"${Planned_Outage_Start_SN_Off}",
          "u_planned_outage_end":"${Planned_Outage_End_SN_Off}",
          "u_technical_change_only":"${CHG_technical_change_only_Off}",
          "u_chg_model":"${Model}"
          }
        username: srcXLRelease
        failureHandler: |-
          if (releaseVariables['attempt'] < 3):
            releaseVariables['attempt'] = releaseVariables['attempt'] + 1
            taskApi.retryTask(getCurrentTask().getId(), 'Retrying task from failure handler.')
          else:
            taskApi.skipTask(getCurrentTask().getId(), 'Skipped task from failure handler.')
            releaseVariables['attempt'] = 1
        taskRecoverOp: RUN_SCRIPT
        variableMapping:
          pythonScript.result2: "${Change-Request-Sys-ID-Off}"
          pythonScript.password: "${global.snow.password}"
          pythonScript.result: "${Change_Number_SN_Off}"
        locked: true
      - name: Pulling Offline Change Request Data
        type: xlrelease.Task
        description: |-
          If this task fails it can be a few reasons:
          * Did not fill out the form correctly - restart the phase and fill out the fields correctly in the first task.   ie. If you picked a group the release owner is not a member of.
          * Restarted this phase or the phase prior and the Change Request was already created
        owner: "${release.owner}"
        flagStatus: ATTENTION_NEEDED
        flagComment: Task 'Pulling Offline Change Request Data' in Phase 'Offline
          Change Request Creation' has been replaced by a manual task. The task of
          type 'servicenow.FindRecordByQuery' could not be found because of a missing
          plugin.
        failureHandler: |-
          if (releaseVariables['attempt'] < 3):
            releaseVariables['attempt'] = releaseVariables['attempt'] + 1
            taskApi.retryTask(getCurrentTask().getId(), 'Retrying task from failure handler.')
          else:
            taskApi.skipTask(getCurrentTask().getId(), 'Skipped task from failure handler.')
            releaseVariables['attempt'] = 1
        taskRecoverOp: RUN_SCRIPT
        variableMapping:
          pythonScript.sysId: "${Change-Request-Sys-ID-Off}"
          pythonScript.password: "${global.snow.password}"
          pythonScript.data: "${Change_Request_Data_SN_Off}"
        locked: true
      - name: Retrieve Offline Change Request Number
        type: xlrelease.ScriptTask
        owner: "${release.owner}"
        script: |-
          # Retrieve the change number from the key value map
          package = ${Change_Request_Data_SN_Off}
          releaseVariables["Change_Number_SN_Off"] = package.get("number")
          print "__Offline Production Change Number:__ %s" % releaseVariables["Change_Number_SN_Off"]
          releaseVariables["Change-Request-Sys-ID_Off"] = package.get("sys_id")
          print "__Production SysID:__ %s" % releaseVariables["Change-Request-Sys-ID_Off"]

          # Retrieve the change state
          releaseVariables["State_Off"] = package.get("state")
      - name: Update Offline Change Request (Enterprise)
        type: xlrelease.Task
        owner: "${release.owner}"
        flagStatus: ATTENTION_NEEDED
        flagComment: Task 'Update Offline Change Request (Enterprise)' in Phase 'Offline
          Change Request Creation' has been replaced by a manual task. The task of
          type 'servicenow.UpdateChangeRequest' could not be found because of a missing
          plugin.
        precondition: "releaseVariables[\"BlueGreen\"] == \"Yes\" and folderVariables['folder.Division']\
          \ != \"GBD\""
        variableMapping:
          pythonScript.additionalFields: "${Change_Request_UpdateVariables_Off_Ent}"
          pythonScript.data: "${Change_Request_Data_SN}"
          pythonScript.password: "${global.snow.password}"
        locked: true
      - name: Update Offline Change Request GB
        type: xlrelease.Task
        owner: "${release.owner}"
        flagStatus: ATTENTION_NEEDED
        flagComment: Task 'Update Offline Change Request GB' in Phase 'Offline Change
          Request Creation' has been replaced by a manual task. The task of type 'servicenow.UpdateChangeRequest'
          could not be found because of a missing plugin.
        precondition: "releaseVariables[\"BlueGreen\"] == \"Yes\" and folderVariables['folder.Division']\
          \ == \"GBD\""
        variableMapping:
          pythonScript.password: "${global.snow.password}"
          pythonScript.data: "${Change_Request_Data_SN_Off}"
          pythonScript.additionalFields: "${Change_Request_UpdateVariables_Off}"
        locked: true
    - name: Change Implementation Tasks
      type: xlrelease.SequentialGroup
      precondition: "releaseVariables[\"BlueGreen\"] == \"Yes\" and releaseVariables[\"\
        off_tasksCreated\"] == False and releaseVariables[\"Change_Number_SN_Off\"\
        ] != \"\""
      tasks:
      - name: Generate Offline Production Change Tasks
        type: xlrelease.ScriptTask
        owner: "${release.owner}"
        precondition: "releaseVariables[\"nbrImpTasks_Off\"] > 1"
        script: |-
          from com.xebialabs.xlrelease.domain import SequentialGroup

          # Get references to phase, sequential group, and current Service Now task
          CurPhase = getCurrentPhase()
          CurContainer = getCurrentTask().container.id
          snChgTask = getTasksByTitle("Create Offline Production Task", phaseTitle = getCurrentPhase().title, releaseId = None)
          pos = 3

          # Create the implementation tasks requested by the user
          ct = 0
          while ct < releaseVariables['nbrImpTasks_Off']:
              if ct > 0:
                  #Duplicate SN Change task
                  newSNTask = taskApi.copyTask(snChgTask[0].id, CurContainer,pos)
                  newSNTask.title = "Create Offline Production Task"
                  taskApi.updateTask(newSNTask)
                  pos = pos + 1
              ct = ct + 1
      - name: Retrieve Offline Change Task Automatically Created
        type: xlrelease.Task
        flagStatus: ATTENTION_NEEDED
        flagComment: Task 'Retrieve Offline Change Task Automatically Created' in
          Phase 'Offline Change Request Creation' has been replaced by a manual task.
          The task of type 'servicenow.FindChangeTaskByParent' could not be found
          because of a missing plugin.
        variableMapping:
          pythonScript.password: "${global.snow.password}"
        locked: true
      - name: Create Offline Production Task
        type: xlrelease.Task
        owner: "${release.owner}"
        flagStatus: ATTENTION_NEEDED
        flagComment: Task 'Create Offline Production Task' in Phase 'Offline Change
          Request Creation' has been replaced by a manual task. The task of type 'servicenow.CreateChangeTask'
          could not be found because of a missing plugin.
        precondition: "releaseVariables[\"nbrImpTasks_Off\"] > 0"
        variableMapping:
          pythonScript.password: "${global.snow.password}"
      - name: Update Flag
        type: xlrelease.ScriptTask
        owner: "${release.owner}"
        script: |-
          import json
          from datetime import datetime

          # Update flag for task created variable
          releaseVariables['off_tasksCreated'] = True
    - name: Duplicate Fields to Production Change
      type: xlrelease.ScriptTask
      owner: "${release.owner}"
      precondition: "releaseVariables[\"BlueGreen\"] == \"Yes\" and releaseVariables[\"\
        Change_Number_SN_Off\"] != \"\""
      script: |-
        # Duplicate the answers for the production ticket from the offline ticket

        releaseVariables["nbrImpTasks"] = releaseVariables["nbrImpTasks_Off"]
        releaseVariables["Category_SN"] = releaseVariables["Category_SN_Off"]
        releaseVariables["Initiating_Business_Division_SN"] = releaseVariables["Initiating_Business_Division_SN_Off"]
        releaseVariables["Reason_SN"] = releaseVariables["Reason_SN_Off"]
        releaseVariables["Change_Requires_Outage_SN"] = releaseVariables["Change_Requires_Outage_SN_Off"]
        releaseVariables["ChangeInitiator"] = releaseVariables["ChangeInitiator-Off"]
        releaseVariables["Release_Manager_SN"] = releaseVariables["Release_Manager_SN_Off"]
        releaseVariables["Deployment_Tool_SN_Multi"] = releaseVariables["Deployment_Tool_SN_Off_Multi"]
        releaseVariables["CHG_impacts_gbd_apps"] = releaseVariables["CHG_impacts_gbd_apps_Off"]
        releaseVariables["CHG_prior_to_prod_impl"] = releaseVariables["CHG_prior_to_prod_impl_Off"]
        releaseVariables["CHG_impacts_internet_facing_application"] = releaseVariables["CHG_impacts_internet_facing_application_Off"]
        if releaseVariables["CHG_impacts_internet_facing_application"] == "Yes":
          releaseVariables["PendSecurityScan"] = "Have not Reached Release Ready"
        releaseVariables["CHG_impact_roles"] = releaseVariables["CHG_impact_roles_Off"]
        releaseVariables["CHG_impacts_network"] = releaseVariables["CHG_impacts_network_Off"]
        releaseVariables["CHG_description"] = releaseVariables["CHG_description_Off"]
        releaseVariables["CHG_technical_change_only"] = releaseVariables["CHG_technical_change_only_Off"]
        releaseVariables["CHG_high_severity_defects"] = releaseVariables["CHG_high_severity_defects_Off"]
        releaseVariables["CHG_verify_ac"] = releaseVariables["CHG_verify_ac_Off"]
        if folderVariables['folder.Division'] == "GBD":
            releaseVariables["CHG_will_this_change_introduces_new"] = releaseVariables["CHG_will_this_change_introduces_new_Off"]
            releaseVariables["CHG_assignment_group"] = releaseVariables["CHG_assignment_group_Off"]
            releaseVariables["CHG_assigned_to"] = releaseVariables["CHG_assigned_to_Off"]
        else:
            releaseVariables["testPlan"] = releaseVariables["testPlan_Off"]
            releaseVariables["testResults"] = releaseVariables["testResults_Off"]
            releaseVariables["impPlan"] = releaseVariables["impPlan_Off"]
            releaseVariables["backoutPlan"] = releaseVariables["backoutPlan_Off"]
        releaseVariables["CHG_backout_plan_required"] = releaseVariables["CHG_backout_plan_required_Off"]
        releaseVariables["CHG_impacts_daily_int"] = releaseVariables["CHG_impacts_daily_int_Off"]
        releaseVariables["CHG_post_validation_plan"] = releaseVariables["CHG_post_validation_plan_Off"]
        releaseVariables["CHG_impacts_for_bcbsa_mandates"] = releaseVariables["CHG_impacts_for_bcbsa_mandates_Off"]
        releaseVariables["CHG_u_can_backout_plan_be_executed"] = releaseVariables["CHG_u_can_backout_plan_be_executed_Off"]
        releaseVariables["CHG_Impacted_BU_SN_Multi"] = releaseVariables["CHG_Impacted_BU_SN_Off_Multi"]
        if releaseVariables["BlueGreen"] == "Yes":
            releaseVariables["CHG_cabReq"] = "true"
            #releaseVariables["CABReq_Reason"] = "CM/RM Requested"
            releaseVariables["CHG_Parent"] = releaseVariables["Change-Request-Sys-ID-Off"]
        else:
            releaseVariables["CHG_cabReq"] = "false"
        releaseVariables["PeerReviewed_SN"] = releaseVariables["PeerReviewed_SN_Off"]
        releaseVariables["ImpactSharedServices_SN"] = releaseVariables["ImpactSharedServices_SN_Off"]
        releaseVariables["CallCenterImpact_SN"] = releaseVariables["CallCenterImpact_SN_Off"]
    color: '#991C71'
  - phase: Production Change Request Creation
    tasks:
    - name: Enter Production Change Data
      type: xlrelease.SequentialGroup
      precondition: "releaseVariables[\"Change_Number_SN\"] == \"\""
      tasks:
      - name: Data entry for Enterprise Production
        type: xlrelease.UserInputTask
        description: |-
          NOTE:
          SIT/UAT phase will start as soon as the change request is created.
          You will find the link to the newly created change request by viewing the comment section in the "Pulling Change Request Data" task; after it has completed.

          [Enterprise Release Calendar 2024](https://collaborate.wellpoint.com/sites/Ent_Rel_Mgmt/_layouts/15/download.aspx?UniqueId=919ab112-c443-4dbd-87af-d2da2bebe706)
          [Enterprise Release Calendar 2025  (Tableau Access Required)](https://tableauprod.elevancehealth.com/#/site/EntNonGBD/views/2025_EnterpriseReleaseCalendar/Calendar?:iid=1)

          To create the change request fill in the information below:
          Fill in the required fields.
          If there is down time the start and end times will be required.
          Release owner must be in the Release manager role in ServiceNow.
          Release owner must be in the assignment group that is picked.
        owner: "${release.owner}"
        precondition: |-
          from com.xebialabs.xlrelease.domain.status import FlagStatus
          if folderVariables['folder.Division'] != "GBD":
            result = True
            if releaseVariables['Date_Flag'] == True:
              tskNext = getCurrentTask()
              tskNext.setFlagComment("Planned Start Date is entered incorrectly in the Change Form")
              tskNext.setFlagStatus(FlagStatus.AT_RISK)
              taskApi.updateTask(tskNext)
          else:
              result = False
        variables:
        - nbrImpTasks
        - Environment_SN
        - Category_SN
        - Initiating_Business_Division_SN
        - Reason_SN
        - ChangeInitiator
        - CHG_technical_change_only
        - Configuration_Item_SN
        - CHG_description
        - Planned_Start_Date_SN
        - Planned_End_Date_SN
        - Change_Requires_Outage_SN
        - Planned_Outage_Start_SN
        - Planned_Outage_End_SN
        - CHG_backout_plan_required
        - testPlan
        - PeerReviewed_SN
        - testResults
        - impPlan
        - backoutPlan
        - CHG_u_can_backout_plan_be_executed
        - CHG_impacts_network
        - ImpactSharedServices_SN
        - CallCenterImpact_SN
        - CHG_impacts_gbd_apps
        - CHG_impacts_for_bcbsa_mandates
        - CHG_impacts_internet_facing_application
        - CHG_prior_to_prod_impl
        - CHG_Impacted_BU_SN_Multi
        - CHG_impact_roles
        - CHG_verify_ac
        - CHG_impacts_daily_int
        - CHG_high_severity_defects
        - Deployment_Tool_SN_Multi
        - Release_Manager_SN
        - CHG_assignment_group
        - CHG_assigned_to
      - name: Data entry for GB Production
        type: xlrelease.UserInputTask
        description: |-
          NOTE:
          SIT/UAT phase will start as soon as the change request is created.
          You will find the link to the newly created change request by viewing the comment section in the "Pulling Change Request Data" task; after it has completed.

          [Enterprise Release Calendar 2024](https://collaborate.wellpoint.com/sites/Ent_Rel_Mgmt/_layouts/15/download.aspx?UniqueId=919ab112-c443-4dbd-87af-d2da2bebe706)
          [Enterprise Release Calendar 2025  (Tableau Access Required)](https://tableauprod.elevancehealth.com/#/site/EntNonGBD/views/2025_EnterpriseReleaseCalendar/Calendar?:iid=1)

          To create the change request fill in the information below:
          Fill in the required fields.
          If there is down time the start and end times will be required.
          Release owner must be in the Release manager role in ServiceNow.
          Release owner must be in the assignment group that is picked.
        owner: "${release.owner}"
        precondition: |-
          from com.xebialabs.xlrelease.domain.status import FlagStatus
          if folderVariables['folder.Division'] == "GBD":
            result = True
            if releaseVariables['Date_Flag'] == True:
              tskNext = getCurrentTask()
              tskNext.setFlagComment("Planned Start Date is entered incorrectly in the Change Form")
              tskNext.setFlagStatus(FlagStatus.AT_RISK)
              taskApi.updateTask(tskNext)
          else:
              result = False
        variables:
        - nbrImpTasks
        - Environment_SN
        - Category_SN
        - Initiating_Business_Division_SN
        - Reason_SN
        - ChangeInitiator
        - CHG_technical_change_only
        - Configuration_Item_SN
        - CHG_description
        - PeerReviewed_SN
        - CHG_backout_plan_required
        - CHG_u_can_backout_plan_be_executed
        - Planned_Start_Date_SN
        - Planned_End_Date_SN
        - Change_Requires_Outage_SN
        - Planned_Outage_Start_SN
        - Planned_Outage_End_SN
        - CHG_impacts_network
        - ImpactSharedServices_SN
        - CallCenterImpact_SN
        - CHG_impacts_gbd_apps
        - CHG_impacts_for_bcbsa_mandates
        - CHG_impacts_internet_facing_application
        - CHG_prior_to_prod_impl
        - CHG_Impacted_BU_SN_Multi
        - CHG_impact_roles
        - CHG_verify_ac
        - CHG_impacts_daily_int
        - CHG_high_severity_defects
        - Deployment_Tool_SN_Multi
        - Release_Manager_SN
        - CHG_will_this_change_introduces_new
        - CHG_assignment_group
        - CHG_assigned_to
      - name: Format Multi-Select Values for Service Now
        type: xlrelease.ScriptTask
        owner: "${release.owner}"
        script: |-
          from datetime import datetime
          # Convert multi-select to string

          Deploy_Tool_Final = ""
          Impacting_Division_Final = ""

          dtf = releaseVariables['Deployment_Tool_SN_Multi']

          for i in dtf:
              Deploy_Tool_Final = Deploy_Tool_Final + str(i) + ", "

          Deploy_Tool_Final = Deploy_Tool_Final[:-2]
          print Deploy_Tool_Final

          releaseVariables["Deploy_Tool_Final"] = Deploy_Tool_Final

          ibd = releaseVariables['CHG_Impacted_BU_SN_Multi']

          for i in ibd:
              Impacting_Division_Final = Impacting_Division_Final + str(i) + ", "

          Impacting_Division_Final = Impacting_Division_Final[:-2]
          print Impacting_Division_Final

          releaseVariables["Impacting_Division_Final"] = Impacting_Division_Final

          #Error Handling on Planned Start and End Date in Change Creation

          dt = datetime.now()
          print(dt)
          today = str(dt).split('.')[0]
          print(today)

          start_date = releaseVariables['Planned_Start_Date_SN']
          end_date = releaseVariables['Planned_End_Date_SN']

          print(start_date)
          print(end_date)

          #if start_date < today or start_date > end_date:
          if start_date < today or end_date < today or start_date > end_date:
            releaseVariables['Date_Flag'] = 'True'
          else:
            releaseVariables['Date_Flag'] = 'False'
    - name: Restart Phase if Planned Implementation Start Date is Greater than End
        Date
      type: xlrelease.ScriptTask
      precondition: "releaseVariables['Date_Flag'] == True"
      script: |-
        from com.xebialabs.xlrelease.repository import PhaseVersion
        release = getCurrentRelease()
        ChangeCreationPhaseTitle = getCurrentPhase().title  # Change as needed
        firstChangeCreationPhaseTaskTitle = 'Enter Production Change Data' # Change as needed
        ChangePhase = phaseApi.searchPhasesByTitle(ChangeCreationPhaseTitle, release.id)[-1]
        firstChangeTask = taskApi.searchTasksByTitle(firstChangeCreationPhaseTaskTitle, ChangePhase.title, release.id)[-1]
        releaseApi.restartPhase(release, ChangePhase, firstChangeTask, PhaseVersion.LATEST, True)
    - name: Auto creation of Change Request in ServiceNow
      type: xlrelease.SequentialGroup
      description: These tasks will execute after the input of the data for the change
        request.
      precondition: "releaseVariables[\"Change_Number_SN\"] == \"\""
      tasks:
      - name: Update Change Request
        type: webhook.JsonWebhook
        URL: https://elevancehealth.service-now.com/api/now/import/u_xl_deploy_release_change_creation
        method: POST
        body: |-
          {
          "u_change_initiator":"${ChangeInitiator}",
          "u_configuration_item":"${Configuration_Item_SN}",
          "u_release_manager":"${Release_Manager_SN}",
          "u_short_description":"${release.title}",
          "u_xlr_url_tied_to_your_release":"${release.url}",
          "u_source_reference_id":"${release.id}",
          "u_initiating_business_division":"${Initiating_Business_Division_SN}",
          "u_reason":"u_application",
          "u_category":"Applications Software",
          "u_environment":"u_production",
          "u_deployment_tool":"Other",
          "u_planned_start_date":"${Planned_Start_Date_SN}",
          "u_change_requires_outage":"${Change_Requires_Outage_SN}",
          "u_planned_end_date":"${Planned_End_Date_SN}",
          "u_planned_outage_start":"${Planned_Outage_Start_SN}",
          "u_planned_outage_end":"${Planned_Outage_End_SN}",
          "u_technical_change_only":"${CHG_technical_change_only}",
          "u_chg_model":"${Model}"
          }
        username: srcXLRelease
        failureHandler: |-
          if (releaseVariables['attempt'] < 3):
            releaseVariables['attempt'] = releaseVariables['attempt'] + 1
            taskApi.retryTask(getCurrentTask().getId(), 'Retrying task from failure handler.')
          else:
            taskApi.skipTask(getCurrentTask().getId(), 'Skipped task from failure handler.')
            releaseVariables['attempt'] = 1
        taskRecoverOp: RUN_SCRIPT
        variableMapping:
          pythonScript.result2: "${Change-Request-Sys-ID}"
          pythonScript.result: "${Change_Number_SN}"
          pythonScript.password: "${global.snow.password}"
        locked: true
      - name: Pulling Change Request Data
        type: xlrelease.Task
        description: |-
          If this task fails it can be a few reasons:
          * Did not fill out the form correctly - restart the phase and fill out the fields correctly in the first task.   ie. If you picked a group the release owner is not a member of.
          * Restarted this phase or the phase prior and the Change Request was already created
        owner: "${release.owner}"
        flagStatus: ATTENTION_NEEDED
        flagComment: Task 'Pulling Change Request Data' in Phase 'Production Change
          Request Creation' has been replaced by a manual task. The task of type 'servicenow.FindRecordByQuery'
          could not be found because of a missing plugin.
        failureHandler: |-
          if (releaseVariables['attempt'] < 3):
            releaseVariables['attempt'] = releaseVariables['attempt'] + 1
            taskApi.retryTask(getCurrentTask().getId(), 'Retrying task from failure handler.')
          else:
            taskApi.skipTask(getCurrentTask().getId(), 'Skipped task from failure handler.')
            releaseVariables['attempt'] = 1
        taskRecoverOp: RUN_SCRIPT
        variableMapping:
          pythonScript.data: "${Change_Request_Data_SN}"
          pythonScript.sysId: "${Change-Request-Sys-ID}"
          pythonScript.password: "${global.snow.password}"
        locked: true
      - name: Retrieve Change Request Number
        type: xlrelease.ScriptTask
        owner: "${release.owner}"
        script: |-
          # Retrieve the change number from the key value map
          package = ${Change_Request_Data_SN}
          releaseVariables["Change_Number_SN"] = package.get("number")
          print "__Production Change Number:__ %s" % releaseVariables["Change_Number_SN"]
          releaseVariables["Change-Request-Sys-ID"] = package.get("sys_id")
          print "__Production SysID:__ %s" % releaseVariables["Change-Request-Sys-ID"]

          if releaseVariables["CHG_impacts_internet_facing_application"] == "Yes":
            releaseVariables["PendSecurityScan"] = "Have not Reached Release Ready"

          # Retrieve the change state
          releaseVariables["State"] = package.get("state")
      - name: Update Production Change Request
        type: xlrelease.Task
        owner: "${release.owner}"
        flagStatus: ATTENTION_NEEDED
        flagComment: Task 'Update Production Change Request' in Phase 'Production
          Change Request Creation' has been replaced by a manual task. The task of
          type 'servicenow.UpdateChangeRequest' could not be found because of a missing
          plugin.
        precondition: "folderVariables['folder.Division'] != \"GBD\""
        variableMapping:
          pythonScript.additionalFields: "${Change_Request_UpdateVariables_Ent}"
          pythonScript.data: "${Change_Request_Data_SN}"
          pythonScript.password: "${global.snow.password}"
        locked: true
      - name: Update Production Change Request
        type: xlrelease.Task
        owner: "${release.owner}"
        flagStatus: ATTENTION_NEEDED
        flagComment: Task 'Update Production Change Request' in Phase 'Production
          Change Request Creation' has been replaced by a manual task. The task of
          type 'servicenow.UpdateChangeRequest' could not be found because of a missing
          plugin.
        precondition: "folderVariables['folder.Division'] == \"GBD\""
        variableMapping:
          pythonScript.additionalFields: "${Change_Request_UpdateVariables}"
          pythonScript.data: "${Change_Request_Data_SN}"
          pythonScript.password: "${global.snow.password}"
        locked: true
    - name: Change Implementation Tasks
      type: xlrelease.SequentialGroup
      precondition: "releaseVariables[\"tasksCreated\"] == False and releaseVariables[\"\
        Change_Number_SN\"] != \"\""
      tasks:
      - name: Generate Production Change Tasks
        type: xlrelease.ScriptTask
        owner: "${release.owner}"
        precondition: "releaseVariables[\"nbrImpTasks\"] > 1"
        script: |-
          from com.xebialabs.xlrelease.domain import SequentialGroup

          # Get references to phase, sequential group, and current Service Now task
          CurPhase = getCurrentPhase()
          CurContainer = getCurrentTask().container.id
          snChgTask = getTasksByTitle("Create Production Task", phaseTitle = getCurrentPhase().title, releaseId = None)
          pos = 2
          # Create a deploy task for each package and a script task to reset the variable
          ct = 0
          while ct < releaseVariables['nbrImpTasks']:
              if ct > 0:
                  #Duplicate SN Change task
                  newSNTask = taskApi.copyTask(snChgTask[0].id, CurContainer,pos)
                  newSNTask.title = "Create Production Task"
                  taskApi.updateTask(newSNTask)
                  pos = pos + 1
              ct = ct + 1
          tasksCreated = True
      - name: Retrieve Automatically Created Change Task
        type: xlrelease.Task
        flagStatus: ATTENTION_NEEDED
        flagComment: Task 'Retrieve Automatically Created Change Task' in Phase 'Production
          Change Request Creation' has been replaced by a manual task. The task of
          type 'servicenow.FindChangeTaskByParent' could not be found because of a
          missing plugin.
        variableMapping:
          pythonScript.password: "${global.snow.password}"
        locked: true
      - name: Create Production Task
        type: xlrelease.Task
        owner: "${release.owner}"
        flagStatus: ATTENTION_NEEDED
        flagComment: Task 'Create Production Task' in Phase 'Production Change Request
          Creation' has been replaced by a manual task. The task of type 'servicenow.CreateChangeTask'
          could not be found because of a missing plugin.
        precondition: "releaseVariables[\"nbrImpTasks\"] > 0"
        variableMapping:
          pythonScript.password: "${global.snow.password}"
      - name: Update Flag
        type: xlrelease.ScriptTask
        owner: "${release.owner}"
        script: |-
          import json
          from datetime import datetime

          # Update flag for task created variable
          releaseVariables['tasksCreated'] = True
      - name: Send API call
        type: xlrelease.ScriptTask
        precondition: "releaseVariables[\"UseEHDS\"] == True"
        taskRecoverOp: SKIP_TASK
        script: |-
          import json
          from java.net import URLEncoder
          from java.net import URL
          import urllib2
          import ssl
          from urllib import urlencode
          import base64
          from com.xebialabs.xlrelease.domain.folder import Folder
          from com.xebialabs.xlrelease.api.v1.forms import Variable
          from datetime import datetime


          def get_token(apikey, auth_url, username, password):
              context = ssl._create_unverified_context()
              # Define the headers for the API request
              credentials = "{}:{}".format(username, password)
              credentials_encoded = base64.b64encode(credentials.encode()).decode()

              headers = {
                  "Content-Type": "application/x-www-form-urlencoded",
                  "Authorization": "Basic {}".format(credentials_encoded),
                  "apikey": apikey
              }


              data = {
                  'grant_type': 'client_credentials',
                  'scope': 'public'
              }
              print(data)
              print(headers)
              data_str = urlencode(data)
              data_bytes = data_str.encode()


              # Send a POST request to the Auth API
              request = urllib2.Request(auth_url,data_bytes,headers)
              #response = requests.post(endpoint, headers=headers, json=data)
              try:
                  response = urllib2.urlopen(request, context=context)
              except urllib2.URLError as e:
                  return "URLError occurred: {}".format(e)
              except urllib2.HTTPError as e:
                  return "HTTPError occurred: {}".format(e)
              except Exception as e:
                  return "An unexpected error occurred: {}".format(e)

              # If request is successful, return the token, else return the error
              if response.getcode() == 200:
                  response_json = json.load(response)
                  print(response_json)
                  return response_json
              else:
                  return response.read()
          # Your existing setup

          changeJSON = '{"releaseId": "","applabId": "","ticketDetails": [{"ticketNumber": "","ticketStatus": "","releaseDate": "","environment": "","ctasks": []}]}'

          # Build a JSON string with the output of the change and change tasks
          # to send back via a webhook call
          if releaseVariables["UseEHDS"] == True and releaseVariables["BlueGreen"]=="Yes":
            changeJSON_Offline = '{"releaseId": "","applabId": "","ticketDetails": [{"ticketNumber": "","ticketStatus": "","releaseDate": "","environment": "","ctasks": []},{"ticketNumber": "","ticketStatus": "","releaseDate": "","environment": "","ctasks": []}]}'
            format_yyyymmdd = "%Y-%m-%d"
            singleQuote = "'"
            doubleQuote = '"'
            sDate = releaseVariables['Planned_Start_Date_SN_Off']
            startDate = sDate.strip(singleQuote).strip(doubleQuote)[:10]

            jsondef = json.loads(changeJSON_Offline)
            jsondef["releaseId"] = release.id
            jsondef["applabId"] = releaseVariables["APM"]
            jsondef["ticketDetails"][0]["ticketNumber"]= releaseVariables["Change_Number_SN_Off"]
            jsondef["ticketDetails"][0]["ticketStatus"]= releaseVariables["State_Off"]
            jsondef["ticketDetails"][0]["releaseDate"]= str(startDate)
            jsondef["ticketDetails"][0]["environment"]= releaseVariables["Environment_SN_Off"]

            # load variables
            ctlist = []
            tskData = {}
            phaseTitle = "Offline Change Request Creation"

            # get the information from the task created by Service Now
            snCreatedChgTask = getTasksByTitle("Retrieve Offline Change Task Automatically Created", phaseTitle, releaseId = None)
            tskData = snCreatedChgTask[0].pythonScript.getProperty("data")
            ctlistitem = {"ctaskNumber" : tskData.get("number"),"shortDescription" : tskData.get("short_description"),"assignmentGroup" : tskData.get("assignment_group")}
            ctlist.append(ctlistitem)

            # loop through all tasks created via Digital.ai Release and add to JSON string
            snChgTask = getTasksByTitle("Create Offline Production Task", phaseTitle, releaseId = None)
            for ct in range(releaseVariables["nbrImpTasks_Off"]):
              #Find all of the tasks used to create the change tasks
              tskData = snChgTask[ct].pythonScript.getProperty("data")
              ctlistitem = {"ctaskNumber" : tskData.get("number"),"shortDescription" : tskData.get("short_description"),"assignmentGroup" : tskData.get("assignment_group")}
              ctlist.append(ctlistitem)
              ct = ct + 1

            jsondef["ticketDetails"][0]["ctasks"] = ctlist
            changeJSON = json.dumps(jsondef)
            print json.dumps(changeJSON, indent=4)

          if releaseVariables["UseEHDS"] == True:
            format_yyyymmdd = "%Y-%m-%d"
            singleQuote = "'"
            doubleQuote = '"'
            sDate = releaseVariables['Planned_Start_Date_SN']
            startDate = sDate.strip(singleQuote).strip(doubleQuote)[:10]
            print ("__sDate__", str(sDate), "__startDate__", str(startDate))

            tckCt = 1
            jsondef = json.loads(changeJSON)
            # If there is also an offline change request, do not duplicate the release information in the API call
            if releaseVariables["BlueGreen"] == "No":
              jsondef["releaseId"] = release.id
              jsondef["applabId"] = releaseVariables["APM"]
              tckCt = 0

            jsondef["ticketDetails"][tckCt]["ticketNumber"]= releaseVariables["Change_Number_SN"]
            jsondef["ticketDetails"][tckCt]["ticketStatus"]= releaseVariables["State"]
            jsondef["ticketDetails"][tckCt]["releaseDate"]= str(startDate)
            jsondef["ticketDetails"][tckCt]["environment"]= "prod"
            #jsondef["ticketDetails"][tckCt]["environment"]= releaseVariables["Environment_SN"]


            # load variables
            ctlist = []
            tskData = {}
            phaseTitle = "Production Change Request Creation"

            # get the information from the task created by Service Now
            snCreatedChgTask = getTasksByTitle("Retrieve Automatically Created Change Task", phaseTitle, releaseId = None)
            tskData = snCreatedChgTask[0].pythonScript.getProperty("data")
            ctlistitem = {"ctaskNumber" : tskData.get("number"),"shortDescription" : tskData.get("short_description"),"assignmentGroup" : tskData.get("assignment_group")}
            ctlist.append(ctlistitem)

            # loop through all tasks created via Digital.ai Release and add to JSON string
            snChgTask = getTasksByTitle("Create Production Task", phaseTitle, releaseId = None)
            for ct in range(releaseVariables["nbrImpTasks"]):
              #Find all of the tasks used to create the change tasks
              tskData = snChgTask[ct].pythonScript.getProperty("data")
              ctlistitem = {"ctaskNumber" : tskData.get("number"),"shortDescription" : tskData.get("short_description"),"assignmentGroup" : tskData.get("assignment_group")}
              ctlist.append(ctlistitem)
              ct = ct + 1

            jsondef["ticketDetails"][tckCt]["ctasks"] = ctlist
            changeJSON = json.dumps(jsondef)
            print json.dumps(changeJSON, indent=4)

          '''
          # Create a custom SSL context that does not verify the SSL certificate
          context = ssl._create_unverified_context()
          apikey= folderVariables['folder.ehds_apikey']
          auth_url='https://uat.'+folderVariables['folder.ehds_auth_url']
          username=folderVariables['folder.ehds_apikey']
          password=folderVariables['folder.ehds_secret']

          # Create a custom SSL context that does not verify the SSL certificate
          context = ssl._create_unverified_context()
          apikey='gn08khjeis7dfut2v5zyb1c3a6mw'
          auth_url='https://uat.api.digiproducts.ps.awsdns.internal.das/v1/oauth/accesstoken'
          #auth_url='https://sit.api.digiproducts.ps.awsdns.internal.das/v1/oauth/accesstoken'
          username='gn08khjeis7dfut2v5zyb1c3a6mw'
          password='pEX5dMgBZy5zlaOB2eZROuFYJ9X8NFU5bvg6LKU2beg3J1qF5qWZmzBWdaBj54qv'
          '''
          # Create a custom SSL context that does not verify the SSL certificate - Prod
          context = ssl._create_unverified_context()
          apikey='w7zm09si4yldr1g36q8nuabfpexv5tjk'
          auth_url='https://api.digitalproducts.ps.awsdns.internal.das/v1/oauth/accesstoken'
          username='w7zm09si4yldr1g36q8nuabfpexv5tjk'
          password='ONtc3P7ZJ9nHpExjPbSL2ZlXZjPnpUqWMsUrJTj0zJOnH7aM5UzcNWlesHuR4mdh'

          # Define the API endpoint
          endpoint = auth_url+"/PasswordVault/WebServices/auth/{service_id}/Logon"

          token = get_token(apikey, auth_url, username, password)
          print(token)

          #ehds_host='https://uat.api.digitalproducts.ps.awsdns.internal.das/ehds/v1/releasemanagement'
          ehds_host='https://api.digitalproducts.ps.awsdns.internal.das/ehds/v1/releasemanagement'
          #ehds_host='https://sit.api.digitalproducts.ps.awsdns.internal.das/ehds/v1/releasemanagement'
          #headers = {"Authorization": "Bearer "+token, "Content-Type": "application/vnd.api+json"}

          releaseId= getCurrentRelease().id
          print(releaseId)
          applabId=releaseVariables['APM']
          print(applabId)
          changeTicket=releaseVariables['Change_Number_SN'] #releaseVariables['CHG-Request-Sys-ID']
          print(changeTicket)
          environment='prod' #releaseVariables['Deployment_Environment']

          '''
          releaseId= 'rleaseid1' #releaseVariables['XLR_Parent_Release_Id']
          applabId=releaseVariables['APM']
          changeTicket=releaseVariables['Change_Number_SN'] #releaseVariables['CHG-Request-Sys-ID']
          environment='prod' #releaseVariables['Deployment_Environment']
          '''

          payload = json.loads(changeJSON)
          print("__payload__: " + str(payload))
          '''
          payload={
              "applabId": "APM1008338",
              "ticketDetails": [
                  {
                      "ticketNumber": "CHG0768690",
                      "releaseDate": "2024-06-20",
                      "ctasks": [
                          {
                              "shortDescription": "Implementation Plan",
                              "assignmentGroup": "",
                              "ctaskNumber": "CTASK2102796"
                          },
                          {
                              "shortDescription": "Implementation Task",
                              "assignmentGroup": "",
                              "ctaskNumber": "CTASK2102797"
                          }
                      ],
                      "environment": "prod",
                      "ticketStatus": "Draft"
                  }
              ],
              "releaseId": "Applications/Folder487687cb79b6404d858ad0ab0af3f853/Folder93dd27deb65b442d8aa1264863bfa5eb/Folder6cd1708eeb3f455696b3a816cf98795a/Release252a30e559ee452ba28bcd42b13ce734"
          }
          '''
          data = json.dumps(payload)
          data_bytes = data.encode('utf-8')
          url = ehds_host+'/deployment/ticket'

          headers = {
              "Authorization": "Bearer " + token['access_token'],
              "Content-Type": "application/json",
              "apikey": apikey
          }
          print(url)
          request = urllib2.Request(url,data_bytes,headers)
          request.get_method = lambda: 'PUT'


          # Make the API request
          response= urllib2.urlopen(request, context=context)
          status_code = response.getcode()

          # If request is successful, return the token, else return the error
          if response.getcode() == 200:
              response_json = json.load(response)
              print(response_json)
          else:
              # un Authorized call need to get new Token
              if status_code == 401 :
                  token = get_token(apikey, auth_url, username, password)
                  response= urllib2.urlopen(request)

          #Put json into release variables
          releaseVariables['changeJSON_Offline'] = changeJSON
          releaseVariables['changeJSON'] = changeJSON

          '''
          sv = {'wkstestpython53':'release-master-05032024033955'} #releaseVariables["service_version"]


          for app in sv:

              releaseVersion=sv[app]
              appname =app
              # Define the URL
              url = ehds_host+'/deployment/ticket'

              # Define the payload for creating a run

              payload= releaseVariables['changeJSON'}
              data = json.dumps(payload)
              data_bytes = data.encode('utf-8')

              headers = {
                  "Authorization": "Bearer " + token['access_token'],
                  "Content-Type": "application/json",
                  "apikey": apikey
              }
              print(url)
              request = urllib2.Request(url,data_bytes,headers)
              request.get_method = lambda: 'PUT'


              # Make the API request
              response= urllib2.urlopen(request, context=context)
              status_code = response.getcode()

              # If request is successful, return the token, else return the error
              if response.getcode() == 200:
                  response_json = json.load(response)
                  print(response_json)
              else:
                  # un Authorized call need to get new Token
                  if status_code == 401 :
                      token = get_token(apikey, auth_url, username, password)
                      response= urllib2.urlopen(request)
    - name: Capture Change Information
      type: xlrelease.ScriptTask
      script: |-
        # Add Production Change number and SysID to Key Value map
        releaseVariables["prodChanges"][releaseVariables["Change_Number_SN"]] = releaseVariables["Change-Request-Sys-ID"]
        print(str(releaseVariables["prodChanges"]))
    color: '#991C71'
  - phase: DevOps
    tasks:
    - name: GB Sub-Templates Mapping
      type: xlrelease.ScriptTask
      owner: "${release.owner}"
      precondition: "folderVariables['folder.Division'] == \"GBD\" and releaseVariables[\"\
        UseChecksum\"] in (\"Checksum Based Solution\", \"Hashtag Based Solution\"\
        )"
      script: |-
        #*****************************************************#
        #----Mapping GBD Sub-Template with Create Release Tasks in the Release----#
        pattern = re.compile('Call Deployment Sub-Template.*')
        ER_pattern = re.compile('Emergency Template')
        R_pattern = re.compile('Rollback Template')

        def GetReleaseFolderID(Id):
            return '/'.join(Id.split('/')[:-1])

        def GetParentFolderID(Id):
            return '/'.join(Id.split('/')[0:2])

        GBD_SubTemplate_ID = ""
        GBD_SubTemplate_Emergency_ID = ""
        GBD_SubTemplate_Rollback_ID = ""
        GBD_SubTemplate_INFRA_ID = ""

        IsINFRA_Release = False
        if releaseVariables['Category_SN'] == 'Cloud' and releaseVariables['Reason_SN'] == 'u_infrastructure':
          IsINFRA_Release = True
        elif releaseVariables['Category_SN_Off'] == 'Cloud' and releaseVariables['Reason_SN_Off'] == 'u_infrastructure':
          IsINFRA_Release = True

        def getSubTemplateID(GBDSubTemplateName,GBDSubTemplateTags):
            global GBD_SubTemplate_ID, GBD_SubTemplate_Emergency_ID, GBD_SubTemplate_Rollback_ID,GBD_SubTemplate_INFRA_ID
            tmplt_ids = templateApi.getTemplates(GBDSubTemplateName,GBDSubTemplateTags,0,100,1)
            tlen = len(tmplt_ids)
            print "Total Identified Templates : " + str(tlen)
            print "***************"
            if tlen == 1 and IsINFRA_Release:
               for t in tmplt_ids:
                    if parentFldrId in t.id:
                        if "GBD_SubTemplate-INFRA" in t.title:
                            GBD_SubTemplate_INFRA_ID = t.id
                        print t.title + " | "  + t.id
                    else:
                        print t.title + " | "  + t.id
                        print("SubTemplates doesn't belongs to parent folder.")
                        sys.exit(1)
            elif tlen == 3:
                for t in tmplt_ids:
                    if parentFldrId in t.id:
                        if "GBD_SubTemplate-Emergency" in t.title:
                            GBD_SubTemplate_Emergency_ID = t.id
                        elif "GBD_SubTemplate-Rollback" in t.title:
                            GBD_SubTemplate_Rollback_ID = t.id
                        elif "GBD_SubTemplate" in t.title:
                            GBD_SubTemplate_ID = t.id
                        print t.title + " | "  + t.id
                    else:
                        print t.title + " | "  + t.id
                        print("SubTemplates doesn't belongs to parent folder.")
                        sys.exit(1)
            elif tlen > 1:
                print "Error : More Templates found.. Please correct the template tags."
                print "Error : Notify the issue to Autobots Team for Immediate resolution."
                sys.exit(1)
            elif tlen == 0:
                print "Error : No Templates found for Mapping."
                sys.exit(1)
            print "***************"


        #Get reference to release, current folder and folder holding GBD Sub templates
        print "ReleaseID : " + release.id
        releaseFldrId = GetReleaseFolderID(release.id)
        print "ReleaseFolderID : " + releaseFldrId
        parentFldrId = GetParentFolderID(release.id)
        print "ParentFolderID : " + parentFldrId
        folder = folderApi.getFolder(parentFldrId)
        print "ParentFolderTitle : "+ folder.title

        GBDSubTemplateTags = list()
        if folder.title == "GBD":
          if IsINFRA_Release:
            print "In Infrastructure Release"
            GBDSubTemplateTags.append("GBD-INFRA")
          else:
            if folderVariables['folder.IsAPMSpecificTemplate'] == "Y":
              print "InAPMTemplate"
              GBDSubTemplateTags.append("GBD-${APM}")
            else:
              GBDSubTemplateTags.append("GBD")
        elif folder.title == "01 - DevOps":
          if IsINFRA_Release:
            print "In DEV Infrastructure Release"
            GBDSubTemplateTags.append("GBD-DEV-INFRA")
          else:
            if folderVariables['folder.IsAPMSpecificTemplate'] == "Y":
              print "InAPMTemplate"
              GBDSubTemplateTags.append("GBD-DEV-${APM}")
            else:
              GBDSubTemplateTags.append("GBD-DEV")

        getSubTemplateID("GBD_SubTemplate",GBDSubTemplateTags)

        if IsINFRA_Release:
          print "SubTmplt-INFRA | " + GBD_SubTemplate_INFRA_ID
        else:
          print "SubTmplt | " + GBD_SubTemplate_ID
          print "SubTmplt-Emergency | " + GBD_SubTemplate_Emergency_ID
          print "SubTmplt-Rollback | " + GBD_SubTemplate_Rollback_ID
        print "***************"


        #Get ReleaseTasks to modify
        taskList = release.getAllTasks()
        for t in taskList:
            isReleaseTask = False
            if str(t.type) == 'xlrelease.CreateReleaseTask' and str(t.status) == 'PLANNED':
                # Update folder name to ReleaseFolder
                t.folderId = releaseFldrId
                taskApi.updateTask(t)

                if pattern.match(t.title):
                    t.templateId = GBD_SubTemplate_INFRA_ID if IsINFRA_Release else GBD_SubTemplate_ID
                    isReleaseTask = True
                elif ER_pattern.match(t.title):
                    t.templateId = GBD_SubTemplate_INFRA_ID if IsINFRA_Release else GBD_SubTemplate_Emergency_ID
                    isReleaseTask = True
                elif R_pattern.match(t.title):
                    t.templateId = GBD_SubTemplate_INFRA_ID if IsINFRA_Release else GBD_SubTemplate_Rollback_ID
                    isReleaseTask = True

                if isReleaseTask:
                    print 'Phase: '+ t.getPhase().title
                    print 'Task: '+ t.title
                    taskApi.updateTask(t)

        print "***************"
        #sys.exit(1)
    - name: DevOps Engineer Update Tasks
      type: xlrelease.SequentialGroup
      tasks:
      - name: Dev update "Call Deployment Sub-Template" Tasks Email
        type: xlrelease.CreateReleaseTask
        description: |-
          Email Notification - Developer Complete Template Task
          *Do not edit the first line*

          This email is to send the developer a notification email that they need to come to this release and update all of the Infrastructure and / or Code Deployment Tasks

          RM:  If your Dev complete template doesn't have a set DevOps Engineer to send to please update the email template with the correct email address then kick off this task.
        owner: "${release.owner}"
        newReleaseTitle: "Dev to update Template task ${release.title}"
        templateVariables:
        - type: xlrelease.StringVariable
          key: UserEmail
          value: "${UserEmail}"
        createdReleaseId: "${DevTaskUpdate}"
      - name: DevOps Engineer Update information on tasks
        type: xlrelease.GateTask
        description: All Infrastructure and / or Code Deployment Tasks updated
        owner: "${release.owner}"
        locked: true
        conditions:
        - name: All Infrastructure and / or Code Deployment Tasks updated
          type: xlrelease.GateCondition
        dependencies:
        - type: xlrelease.Dependency
          targetId: "${DevTaskUpdate}"
    color: '#0079BC'
  - phase: SIT
    tasks:
    - name: Select Microservices
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: "${release.owner}"
      precondition: |-
        from com.xebialabs.xlrelease.domain.variables import ListOfStringValueProviderConfiguration

        # Change list of values to only those that were deployed to UAT
        if releaseVariables['Microservice_Flag'] == True and releaseVariables['ExecuteSIT'] == "Yes":
          result = True
        else:
          result = False

        if result == True:
          for v in releaseApi.getVariables(getCurrentRelease().id):
            if v.key == "multi_selected_deployments":
              vpc = ListOfStringValueProviderConfiguration()
              vpc.values = releaseVariables['microservice_list']
              v.valueProvider = vpc
              releaseApi.updateVariable(v)
      variables:
      - multi_selected_deployments
    - name: Call Deployment Sub-Template
      type: xlrelease.CreateReleaseTask
      description: "To invoke another template for deployment, first change the \"\
        Folder\" field to the folder that holds the template and click \"Save\" to\
        \ save the changes, and then select the correct template from the \"Template\"\
        \ field."
      owner: "${release.owner}"
      precondition: "releaseVariables['ExecuteSIT'] == \"Yes\""
      newReleaseTitle: "Deploy SIT Code + ${release.title}"
      createdReleaseId: "${SITDeployment}"
    - name: Refresh ServiceNow Change State
      type: xlrelease.SequentialGroup
      precondition: "releaseVariables['ExecuteSIT'] == \"Yes\""
      tasks:
      - name: Refresh Data from ServiceNow
        type: xlrelease.Task
        owner: "${release.owner}"
        flagStatus: ATTENTION_NEEDED
        flagComment: Task 'Refresh Data from ServiceNow' in Phase 'SIT' has been replaced
          by a manual task. The task of type 'servicenow.FindRecordByQuery' could
          not be found because of a missing plugin.
        variableMapping:
          pythonScript.data: "${Change_Request_Data_SN}"
          pythonScript.password: "${global.snow.password}"
        locked: true
      - name: Format Data
        type: xlrelease.ScriptTask
        owner: "${release.owner}"
        script: |-
          # Get an updated copy of the Change request data
          package = releaseVariables["Change_Request_Data_SN"]
          releaseVariables["RelGovernance"] = package.get("u_release_governance")
          releaseVariables["TechOnly"] = package.get("u_technical_change_only")
          releaseVariables["State"] = package.get("state")
          releaseVariables['Chg_on_hold'] = package.get("on_hold")
          print (str(releaseVariables["Change_Number_SN"]),str(releaseVariables["RelGovernance"]),str(releaseVariables["State"]),str(releaseVariables['Chg_on_hold']))

          # Format data for display
          head1 = "**Change Number**"
          head2 = "**State**"
          head3 = "**CM On Hold**"
          head4 = "**Release Governance**"
          head5 = "-"
          headWidth = 60

          releaseVariables['displayChgInfo'] = ""
          prdchgs = releaseVariables['prodChanges']
          sMessage = "| " + head1.ljust(headWidth," ") + "| " + head2.ljust(headWidth, " ") + "| " + head3.ljust(headWidth, " ") + "| " + head4.ljust(headWidth, " ") + "| \n"
          sMessage = sMessage + "| " + head5.ljust(headWidth," ") + "| " + head5.ljust(headWidth, " ") + "| " + head5.ljust(headWidth, " ") + "| " + head5.ljust(headWidth, " ") + "| \n"
          for key in prdchgs:
              sMessage = sMessage +  "| " + str(key).ljust(headWidth," ") + "| " + releaseVariables["State"].ljust(headWidth," ") + "| " + releaseVariables["Chg_on_hold"].ljust(headWidth," ") + "| " + releaseVariables["RelGovernance"].ljust(headWidth," ") + "|\n"
          releaseVariables['displayChgInfo'] = releaseVariables['displayChgInfo'] + sMessage
          releaseVariables["displayChgInfo"] = sMessage
          print(str(sMessage))
      - name: Notification for Business Approval Completed too soon
        type: xlrelease.NotificationTask
        owner: "${release.owner}"
        precondition: |-
          if releaseVariables["TechOnly"] == "No" and releaseVariables["State"] in ("IT Manager Approval","Implementation Approval", "Scheduled","Implement","Review"):
              result = True
          elif releaseVariables["TechOnly"] == "Yes" and releaseVariables["State"] in ("Implementation Approval", "Scheduled","Implement","Review"):
              result = True
          else:
              result = False
        addresses:
        - "${UserEmail}"
        subject: Change Request Approved Too Early
        body: |-
          The change request that is supporting this release ( ${Change_Number_SN} ) is currently in the ${State} phase in Service Now and has been approved prior to UAT signoff being received.

          This change should be rejected back to the Draft phase and receive new approvals after UAT has been completed successfully.

          **Sincerely,
          The Enterprise Release Management Team**
        cc:
        - "${CM_Admin_Email}"
        from: ESMAppReleaseManagement@elevancehealth.com
        priority: Normal
    - name: Deployment of Sub-Template completed
      type: xlrelease.GateTask
      description: "${displayChgInfo}"
      owner: "${release.owner}"
      precondition: "releaseVariables['ExecuteSIT'] == \"Yes\""
      locked: true
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${SITDeployment}"
    - name: SIT Notification
      type: xlrelease.SequentialGroup
      precondition: "releaseVariables['ExecuteSIT'] == \"Yes\""
      tasks:
      - name: SIT Email
        type: xlrelease.CreateReleaseTask
        description: |-
          Email Notification - SIT Validation
          *Do not edit the first line*

          Email users SIT is available to test

          Do Not skip this step in doing so it will not let you pass the next gate.  If you are not sending an email to a team send one to yourself.
        owner: "${release.owner}"
        newReleaseTitle: "SIT Email ${release.title}"
        templateVariables:
        - type: xlrelease.StringVariable
          key: FixVersion
          label: Fix Version
          value: "${FixVersion}"
        - type: xlrelease.StringVariable
          key: UserEmail
          value: "${UserEmail}"
        createdReleaseId: "${Email-Notification-SIT}"
        template: Applications/Folder67db40a6f1c7407f84e35e1bd4fe8dee/Folder1de0e33a3d36453f9cb081d3d2e0ada5/Released984ed0a117c4345875a172d42e9c4e4
      - name: Refresh Data from ServiceNow
        type: xlrelease.Task
        owner: "${release.owner}"
        flagStatus: ATTENTION_NEEDED
        flagComment: Task 'Refresh Data from ServiceNow' in Phase 'SIT' has been replaced
          by a manual task. The task of type 'servicenow.FindRecordByQuery' could
          not be found because of a missing plugin.
        variableMapping:
          pythonScript.data: "${Change_Request_Data_SN}"
          pythonScript.password: "${global.snow.password}"
        locked: true
      - name: Format Change Info for Display
        type: xlrelease.ScriptTask
        script: |-
          from com.xebialabs.xlrelease.domain.status import FlagStatus

          # Get an updated copy of the Change request data
          package = releaseVariables["Change_Request_Data_SN"]
          releaseVariables["RelGovernance"] = package.get("u_release_governance")
          releaseVariables["TechOnly"] = package.get("u_technical_change_only")
          releaseVariables["State"] = package.get("state")
          releaseVariables['Chg_on_hold'] = package.get("on_hold")
          print (str(releaseVariables["Change_Number_SN"]),str(releaseVariables["RelGovernance"]),str(releaseVariables["State"]),str(releaseVariables['Chg_on_hold']))

          # Format data for display
          head1 = "**Change Number**"
          head2 = "**State**"
          head3 = "**CM On Hold**"
          head4 = "**Release Governance**"
          head5 = "-"
          headWidth = 60

          releaseVariables['displayChgInfo'] = ""
          prdchgs = releaseVariables['prodChanges']
          sMessage = "| " + head1.ljust(headWidth," ") + "| " + head2.ljust(headWidth, " ") + "| " + head3.ljust(headWidth, " ") + "| " + head4.ljust(headWidth, " ") + "| \n"
          sMessage = sMessage + "| " + head5.ljust(headWidth," ") + "| " + head5.ljust(headWidth, " ") + "| " + head5.ljust(headWidth, " ") + "| " + head5.ljust(headWidth, " ") + "| \n"
          for key in prdchgs:
              sMessage = sMessage +  "| " + str(key).ljust(headWidth," ") + "| " + releaseVariables["State"].ljust(headWidth," ") + "| " + releaseVariables["Chg_on_hold"].ljust(headWidth," ") + "| " + releaseVariables["RelGovernance"].ljust(headWidth," ") + "|\n"
          releaseVariables['displayChgInfo'] = releaseVariables['displayChgInfo'] + sMessage
          releaseVariables["displayChgInfo"] = sMessage
          print(str(sMessage))

          # Set flag if change ticket approved too early
          if releaseVariables["TechOnly"] == "No" and releaseVariables["State"] in ("IT Manager Approval","Implementation Approval", "Scheduled","Implement","Review"):
              result = True
          elif releaseVariables["TechOnly"] == "Yes" and releaseVariables["State"] in ("Implementation Approval", "Scheduled","Implement","Review"):
              result = True
          else:
              result = False

          if result == True:
              relID = release.id
              nextTask = "Do you have more builds to deploy to SIT?"
              tskNext = taskApi.searchTasksByTitle(nextTask, None, relID)[-1]
              if str(tskNext.status) == 'PLANNED':
                tskNext.setFlagComment("Change Request was approved too early")
                tskNext.setFlagStatus(FlagStatus.ATTENTION_NEEDED)
                taskApi.updateTask(tskNext)
          else:
              result = False
          '''
      - name: Do you have more builds to deploy to SIT?
        type: xlrelease.UserInputTask
        description: "${displayChgInfo}"
        owner: "${release.owner}"
        precondition: "releaseVariables['ExecuteSIT'] == \"Yes\""
        variables:
        - Restart-SIT-Phase
      - name: Restart phase for more SIT packages
        type: xlrelease.ScriptTask
        precondition: "releaseVariables['Restart-SIT-Phase']=='Yes'"
        script: |-
          from com.xebialabs.xlrelease.repository import PhaseVersion
          release = getCurrentRelease()
          SITPhaseTitle = getCurrentPhase().title  # Change as needed
          firstSITPhaseTaskTitle = "Select Microservices" # Change as needed
          SITPhase = phaseApi.searchPhasesByTitle(SITPhaseTitle, release.id)[-1]
          firstSITTask = taskApi.searchTasksByTitle(firstSITPhaseTaskTitle, SITPhase.title, release.id)[-1]
          releaseApi.restartPhase(release, SITPhase, firstSITTask, PhaseVersion.LATEST, True)
      - name: SIT Testing
        type: xlrelease.GateTask
        owner: "${release.owner}"
        locked: true
        conditions:
        - name: SIT Passed?
          type: xlrelease.GateCondition
    color: '#0099CC'
  - phase: UAT
    tasks:
    - name: Select Microservices
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: "${release.owner}"
      precondition: |-
        from com.xebialabs.xlrelease.domain.variables import ListOfStringValueProviderConfiguration
        from com.xebialabs.xlrelease.domain.status import FlagStatus

        # Change list of values to only those that were deployed to UAT
        if releaseVariables['Microservice_Flag'] == True and releaseVariables['UseEHDS'] == False:
          result = True
        else:
          result = False

        if result == True:
          if releaseVariables['MicroErr'] == True:
            tskNext = getCurrentTask()
            tskNext.setFlagComment("The selection may not contain other entries if ALL is selected.")
            tskNext.setFlagStatus(FlagStatus.AT_RISK)
            taskApi.updateTask(tskNext)
          else:
            for v in releaseApi.getVariables(getCurrentRelease().id):
              releaseVariables['microservice_list'] = folderVariables['folder.selectable_deployments']
              if v.key == "multi_selected_deployments":
                vpc = ListOfStringValueProviderConfiguration()
                vpc.values = releaseVariables['microservice_list']
                v.valueProvider = vpc
                releaseApi.updateVariable(v)
      variables:
      - multi_selected_deployments
    - name: Validate List of Deployed Microservices
      type: xlrelease.ScriptTask
      precondition: "releaseVariables['Microservice_Flag'] == True and releaseVariables['UseEHDS']\
        \ == False"
      script: |-
        # Build a list of all microservices that have been selected.abortRelease
        # This list will be the source of the microservices dropdown in Offline Prod,
        # Production and Disaster Recovery.  If a new microserve needs to be deployed
        # after UAT is completed, the ARM will need to restart the UAT phase to add
        # in the new service.
        from com.xebialabs.xlrelease.repository import PhaseVersion

        # Declare local variables
        locallist = releaseVariables["multi_selected_deployments"]
        releaseVariables['MicroErr'] = False

        # If "ALL" was selected, set the list to every entry and
        # remove the option "ALL" from the list
        if "ALL" in locallist:
          # Only ALL is selected
          if len(locallist) == 1:
            # load all values EXCEPT ALL into local list
            locallist.extend(folderVariables['folder.selectable_deployments'])
            locallist = [ele for ele in locallist if ele != "ALL"]
            releaseVariables['deployed_microservices'] = locallist
            releaseVariables["multi_selected_deployments"] = releaseVariables['deployed_microservices']
          else:
            releaseVariables['MicroErr'] = True
        else:
          releaseVariables['deployed_microservices'].extend(releaseVariables["multi_selected_deployments"])

        #  If error is found, restart phase and set flag
        if releaseVariables['MicroErr'] == True:
          # Restart phase
          release = getCurrentRelease()
          UATPhaseTitle = getCurrentPhase().title  # Change as needed
          firstUATPhaseTaskTitle = 'Select Microservices' # Change as needed
          UATPhase = phaseApi.searchPhasesByTitle(UATPhaseTitle, release.id)[-1]
          firstUATTask = taskApi.searchTasksByTitle(firstUATPhaseTaskTitle, UATPhase.title, release.id)[-1]
          releaseApi.restartPhase(release, UATPhase, firstUATTask, PhaseVersion.LATEST, True)
    - name: Call Deployment Sub-Template
      type: xlrelease.CreateReleaseTask
      description: |-
        UAT
        *Do not edit the first line*

        To invoke another template for deployment, first change the "Folder" field to the folder that holds the template and click "Save" to save the changes, and then select the correct template from the "Template" field.
      owner: "${release.owner}"
      precondition: "releaseVariables['UseEHDS'] == False"
      newReleaseTitle: "Deploy UAT Code + ${release.title}"
      createdReleaseId: "${UATDeployment}"
    - name: Refresh ServiceNow Change State
      type: xlrelease.SequentialGroup
      precondition: "releaseVariables['UseEHDS'] == False"
      tasks:
      - name: Refresh Data from ServiceNow
        type: xlrelease.Task
        owner: "${release.owner}"
        flagStatus: ATTENTION_NEEDED
        flagComment: Task 'Refresh Data from ServiceNow' in Phase 'UAT' has been replaced
          by a manual task. The task of type 'servicenow.FindRecordByQuery' could
          not be found because of a missing plugin.
        variableMapping:
          pythonScript.data: "${Change_Request_Data_SN}"
          pythonScript.password: "${global.snow.password}"
        locked: true
      - name: Format Data
        type: xlrelease.ScriptTask
        owner: "${release.owner}"
        script: |-
          # Get an updated copy of the Change request data
          package = releaseVariables["Change_Request_Data_SN"]
          releaseVariables["RelGovernance"] = package.get("u_release_governance")
          releaseVariables["TechOnly"] = package.get("u_technical_change_only")
          releaseVariables["State"] = package.get("state")
          releaseVariables['Chg_on_hold'] = package.get("on_hold")
          print (str(releaseVariables["Change_Number_SN"]),str(releaseVariables["RelGovernance"]),str(releaseVariables["State"]),str(releaseVariables['Chg_on_hold']))

          # Format data for display
          head1 = "**Change Number**"
          head2 = "**State**"
          head3 = "**CM On Hold**"
          head4 = "**Release Governance**"
          head5 = "-"
          headWidth = 60

          releaseVariables['displayChgInfo'] = ""
          prdchgs = releaseVariables['prodChanges']
          sMessage = "| " + head1.ljust(headWidth," ") + "| " + head2.ljust(headWidth, " ") + "| " + head3.ljust(headWidth, " ") + "| " + head4.ljust(headWidth, " ") + "| \n"
          sMessage = sMessage + "| " + head5.ljust(headWidth," ") + "| " + head5.ljust(headWidth, " ") + "| " + head5.ljust(headWidth, " ") + "| " + head5.ljust(headWidth, " ") + "| \n"
          for key in prdchgs:
              sMessage = sMessage +  "| " + str(key).ljust(headWidth," ") + "| " + releaseVariables["State"].ljust(headWidth," ") + "| " + releaseVariables["Chg_on_hold"].ljust(headWidth," ") + "| " + releaseVariables["RelGovernance"].ljust(headWidth," ") + "|\n"
          releaseVariables['displayChgInfo'] = releaseVariables['displayChgInfo'] + sMessage
          releaseVariables["displayChgInfo"] = sMessage
          print(str(sMessage))
      - name: Notification for Business Approval Completed too soon
        type: xlrelease.NotificationTask
        owner: "${release.owner}"
        precondition: |-
          if releaseVariables["TechOnly"] == "No" and releaseVariables["State"] in ("IT Manager Approval","Implementation Approval", "Scheduled","Implement","Review"):
              result = True
          elif releaseVariables["TechOnly"] == "Yes" and releaseVariables["State"] in ("Implementation Approval", "Scheduled","Implement","Review"):
              result = True
          else:
              result = False
        addresses:
        - "${UserEmail}"
        subject: Change Request Approved Too Early
        body: |-
          The change request that is supporting this release ( ${Change_Number_SN} ) is currently in the ${State} phase in Service Now and has been approved prior to UAT signoff being received.

          This change should be rejected back to the Draft phase and receive new approvals after UAT has been completed successfully.

          **Sincerely,
          The Enterprise Release Management Team**
        cc:
        - "${CM_Admin_Email}"
        from: ESMAppReleaseManagement@elevancehealth.com
        priority: Normal
    - name: Deployment of Sub-Template completed
      type: xlrelease.GateTask
      description: "${displayChgInfo}"
      owner: "${release.owner}"
      precondition: "releaseVariables['UseEHDS'] == False"
      locked: true
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${UATDeployment}"
    - name: Capture Microservices Manifest
      type: xlrelease.ScriptTask
      precondition: "releaseVariables['UseChecksum'] in (\"Checksum Based Solution\"\
        , \"Hashtag Based Solution\") and releaseVariables['Microservice_Flag'] ==\
        \ True and releaseVariables['UseEHDS'] == False"
      locked: true
      script: |-
        # get manifest info from Subtemplate
        UAT_SubTemplate_Release = releaseApi.getVariables(releaseVariables['UATDeployment'])
        (releaseVariables["microservice_manifest"]).clear()
        manifest_Variable = "Deployed_ManifestInfo"

        for item in filter(lambda k: (manifest_Variable == k.key), UAT_SubTemplate_Release):
          if item.value:
            (releaseVariables["microservice_manifest"]).putAll(item.value)

        # create a copy of the SignedOff_ManifestInfo to merge with microservice_manifest
        dictResult = releaseVariables["SignedOff_ManifestInfo"]

        # update the results with the microservice_manifest info
        dictResult.update(releaseVariables["microservice_manifest"])
        releaseVariables["SignedOff_ManifestInfo"] = dictResult
    - name: UAT Notification
      type: xlrelease.SequentialGroup
      precondition: "releaseVariables['UseEHDS'] == False"
      tasks:
      - name: UAT Email
        type: xlrelease.CreateReleaseTask
        description: |-
          Email Notification - UAT Validation
          *Do not edit the first line*

          Send email to users to test UAT

          Do Not skip this step in doing so it will not let you pass the next gate.  If you are not sending an email to a team send one to yourself.
        owner: "${release.owner}"
        newReleaseTitle: "UAT Email ${release.title}"
        templateVariables:
        - type: xlrelease.StringVariable
          key: FixVersion
          label: Fix Version
          value: "${FixVersion}"
        - type: xlrelease.StringVariable
          key: UserEmail
          value: "${UserEmail}"
        createdReleaseId: "${Email-Notification-UAT}"
      - name: Refresh Data from ServiceNow
        type: xlrelease.Task
        owner: "${release.owner}"
        flagStatus: ATTENTION_NEEDED
        flagComment: Task 'Refresh Data from ServiceNow' in Phase 'UAT' has been replaced
          by a manual task. The task of type 'servicenow.FindRecordByQuery' could
          not be found because of a missing plugin.
        variableMapping:
          pythonScript.data: "${Change_Request_Data_SN}"
          pythonScript.password: "${global.snow.password}"
        locked: true
      - name: Format Change Info for Display
        type: xlrelease.ScriptTask
        script: |-
          from com.xebialabs.xlrelease.domain.status import FlagStatus

          # Get an updated copy of the Change request data
          package = releaseVariables["Change_Request_Data_SN"]
          releaseVariables["RelGovernance"] = package.get("u_release_governance")
          releaseVariables["TechOnly"] = package.get("u_technical_change_only")
          releaseVariables["State"] = package.get("state")
          releaseVariables['Chg_on_hold'] = package.get("on_hold")
          print (str(releaseVariables["Change_Number_SN"]),str(releaseVariables["RelGovernance"]),str(releaseVariables["State"]),str(releaseVariables['Chg_on_hold']))

          # Format data for display
          head1 = "**Change Number**"
          head2 = "**State**"
          head3 = "**CM On Hold**"
          head4 = "**Release Governance**"
          head5 = "-"
          headWidth = 60

          releaseVariables['displayChgInfo'] = ""
          prdchgs = releaseVariables['prodChanges']
          sMessage = "| " + head1.ljust(headWidth," ") + "| " + head2.ljust(headWidth, " ") + "| " + head3.ljust(headWidth, " ") + "| " + head4.ljust(headWidth, " ") + "| \n"
          sMessage = sMessage + "| " + head5.ljust(headWidth," ") + "| " + head5.ljust(headWidth, " ") + "| " + head5.ljust(headWidth, " ") + "| " + head5.ljust(headWidth, " ") + "| \n"
          for key in prdchgs:
              sMessage = sMessage +  "| " + str(key).ljust(headWidth," ") + "| " + releaseVariables["State"].ljust(headWidth," ") + "| " + releaseVariables["Chg_on_hold"].ljust(headWidth," ") + "| " + releaseVariables["RelGovernance"].ljust(headWidth," ") + "|\n"
          releaseVariables['displayChgInfo'] = releaseVariables['displayChgInfo'] + sMessage
          releaseVariables["displayChgInfo"] = sMessage
          print(str(sMessage))

          # Set flag if change ticket approved too early
          if releaseVariables["TechOnly"] == "No" and releaseVariables["State"] in ("IT Manager Approval","Implementation Approval", "Scheduled","Implement","Review"):
              result = True
          elif releaseVariables["TechOnly"] == "Yes" and releaseVariables["State"] in ("Implementation Approval", "Scheduled","Implement","Review"):
              result = True
          else:
              result = False

          if result == True:
              relID = release.id
              nextTask = "Do you have more builds to deploy to UAT?"
              tskNext = taskApi.searchTasksByTitle(nextTask, None, relID)[-1]
              if str(tskNext.status) == 'PLANNED':
                tskNext.setFlagComment("Change Request was approved too early")
                tskNext.setFlagStatus(FlagStatus.ATTENTION_NEEDED)
                taskApi.updateTask(tskNext)
          else:
              result = False
      - name: Do you have more builds to deploy to UAT?
        type: xlrelease.UserInputTask
        description: "${displayChgInfo}"
        owner: "${release.owner}"
        variables:
        - Restart-UAT-Phase
      - name: Restart phase for more UAT packages
        type: xlrelease.ScriptTask
        precondition: "releaseVariables['Restart-UAT-Phase']=='Yes'"
        script: |-
          from com.xebialabs.xlrelease.repository import PhaseVersion
          release = getCurrentRelease()
          UATPhaseTitle = getCurrentPhase().title  # Change as needed
          firstUATPhaseTaskTitle = "Select Microservices" # Change as needed
          UATPhase = phaseApi.searchPhasesByTitle(UATPhaseTitle, release.id)[-1]
          firstUATTask = taskApi.searchTasksByTitle(firstUATPhaseTaskTitle, UATPhase.title, release.id)[-1]
          releaseApi.restartPhase(release, UATPhase, firstUATTask, PhaseVersion.LATEST, True)
      - name: UAT Testing
        type: xlrelease.GateTask
        owner: "${release.owner}"
        locked: true
        conditions:
        - name: UAT Passed?
          type: xlrelease.GateCondition
    - name: Finalize Deployed Microservices List
      type: xlrelease.ScriptTask
      precondition: |-
        # Change list of values to only those that were deployed to UAT
        if releaseVariables['Microservice_Flag'] == True and releaseVariables['UseEHDS'] == False:
          result = True
        else:
          result = False
      locked: true
      script: |-
        # Loop through all of the deployed microservices and remove any duplicates

        releaseVariables['deployed_microservices'].sort()
        locallist = releaseVariables['deployed_microservices']

        # Convert to set to remove duplicates
        localset = set(locallist)

        # Loop through set adding it into the final variable
        releaseVariables['deployed_microservices_final'].clear()
        for x in localset:
          releaseVariables['deployed_microservices_final'].append(x)
          print str(x)
    - name: Capture Final Manifest
      type: xlrelease.ScriptTask
      owner: "${release.owner}"
      precondition: "releaseVariables['UseChecksum'] in (\"Checksum Based Solution\"\
        , \"Hashtag Based Solution\") and releaseVariables['Microservice_Flag'] ==\
        \ False and releaseVariables['UseEHDS'] == False"
      locked: true
      script: |-
        import sys

        UAT_SubTemplate_Release = releaseApi.getVariables(releaseVariables['UATDeployment'])

        (releaseVariables["SignedOff_ManifestInfo"]).clear()
        manifest_Variable = ""

        division = folderVariables['folder.Division']
        manifest_Variable = "Deployed_ManifestInfo"

        for item in filter(lambda k: (manifest_Variable == k.key), UAT_SubTemplate_Release):
          if item.value:
            (releaseVariables["SignedOff_ManifestInfo"]).putAll(item.value)
          else:
            print "**--Deployed_ManifestInfo is Empty--**"
            print "Please verify if the UAT deployment executed successfully with the execution of Finalize Manifest Artifacts Task in Last phase."
            sys.exit(1)
    color: '#68b749'
  - phase: Performance Testing
    tasks:
    - name: Select Microservices
      type: xlrelease.UserInputTask
      description: Please enter the required information below.
      owner: "${release.owner}"
      precondition: |-
        from com.xebialabs.xlrelease.domain.variables import ListOfStringValueProviderConfiguration

        # Change list of values to only those that were deployed to UAT
        if releaseVariables['Microservice_Flag'] == True and releaseVariables['PerfTestReq'] == "Yes":
          result = True
        else:
          result = False

        if result == True:
          for v in releaseApi.getVariables(getCurrentRelease().id):
            if v.key == "multi_selected_deployments":
              vpc = ListOfStringValueProviderConfiguration()
              vpc.values = releaseVariables['deployed_microservices_final']
              v.valueProvider = vpc
              releaseApi.updateVariable(v)
        '''
          if perfCount == 0:
            micro = releaseVariables['deployed_microservices_final']
            for i in micro:
              microSelected = deployed_microservices_final + str(i) + ", "
            releaseVariables['multi_selected_deployments'] = microSelected
        '''
      variables:
      - multi_selected_deployments
    - name: Call Deployment Sub-Template
      type: xlrelease.CreateReleaseTask
      description: |-
        PERF
        *Do not edit the first line*

        To invoke another template for deployment, first change the "Folder" field to the folder that holds the template and click "Save" to save the changes, and then select the correct template from the "Template" field.
      owner: "${release.owner}"
      precondition: "releaseVariables['PerfTestReq'] == \"Yes\""
      newReleaseTitle: "Deploy Performance Testing Code + ${release.title}"
      templateVariables:
      - type: xlrelease.StringVariable
        key: UserEmail
        label: User Email
        value: "${UserEmail}"
      createdReleaseId: "${PerformanceDeployment}"
    - name: Deployment of Sub-Template completed
      type: xlrelease.GateTask
      owner: "${release.owner}"
      precondition: "releaseVariables['PerfTestReq'] == \"Yes\""
      locked: true
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${PerformanceDeployment}"
    - name: Validate Performance Test Deployment
      type: xlrelease.UserInputTask
      description: |-
        Performance Test Deployment was successful or unsuccessful

        If unsuccessful this phase will restart

        If successful this will move to the next phase
      owner: "${release.owner}"
      precondition: "releaseVariables['PerfTestReq'] == \"Yes\""
      variables:
      - Validate-Perf
    - name: Restart Phase if Validation Fails
      type: xlrelease.ScriptTask
      precondition: "releaseVariables['PerfTestReq'] == \"Yes\" and releaseVariables['Validate-Perf']\
        \ == 'Validation Failed'"
      script: |-
        from com.xebialabs.xlrelease.repository import PhaseVersion
        release = getCurrentRelease()
        PerfPhaseTitle = getCurrentPhase().title  # Change as needed
        firstPerfPhaseTaskTitle = 'Select Microservices' # Change as needed
        PerfPhase = phaseApi.searchPhasesByTitle(PerfPhaseTitle, release.id)[-1]
        firstPerfTask = taskApi.searchTasksByTitle(firstPerfPhaseTaskTitle, PerfPhase.title, release.id)[-1]
        releaseApi.restartPhase(release, PerfPhase, firstPerfTask, PhaseVersion.LATEST, True)
    color: '#FFAB00'
  - phase: Documentation Validation
    tasks:
    - name: Verify Documents
      type: xlrelease.GateTask
      description: |-
        ```**Verify the SharePoint documents before proceeding the change ticket to Implementation Approval State**```
        *********************
        * BOIP - Backout Implementation Plan
        * PIVP - Post Implementation Validation Plan
        *********************
        [Click here to navigate to SharePoint](${CHG_SP_Path})
        [Click here to navigate to ServiceNow Change Request](${SNURL}${Change-Request-Sys-ID}) : **${Change_Number_SN}**
      owner: "${release.owner}"
      precondition: "folderVariables['folder.Division'] == \"GBD\""
      locked: true
      conditions:
      - name: Are PROD BOIPS attached?
        type: xlrelease.GateCondition
      - name: Are UAT Test Results attached?
        type: xlrelease.GateCondition
      - name: Is PIVP document attached?
        type: xlrelease.GateCondition
    - name: Validate the SharePoint Attachments
      type: xlrelease.ScriptTask
      owner: "${release.owner}"
      precondition: "folderVariables['folder.Division'] == \"GBD\" and releaseVariables[\"\
        UseChecksum\"] in (\"Checksum Based Solution\", \"Hashtag Based Solution\"\
        )"
      script: |-
        import sys
        import time
        import json
        import httplib
        from urlparse import urlparse

        #**************************************#
        # Fecthing credentials from CyberArk
        username = ""
        password = ""

        h = httplib.HTTPSConnection('${CyberArk-Url}')
        APIpath='/AIMWebService/api/Accounts?AppID=${CyberArk-AppId}&Safe=${CyberArk-Safe}&Object=${CyberArk-ObjectName}'
        h.request("GET", APIpath)
        r = h.getresponse()
        if(r.status != 200):
            print "cyberark API Returned Error"
            sys.exit(1)
        else:
            # Convert bytes to string type and string type to dict
            print "cyberark Connection successful"
            string = r.read().decode('utf-8')
            json_obj = json.loads(string)
            username = json_obj['UserName']
            password = json_obj['Content']

        #**************************************#
        URL = '${Bamboo_URL}'
        projPlanKey = '${BAM_BUILD_PLAN_SPV}'+'?'+'${BAM_RUN_SPV_QString}'
        proxyHost=''
        proxyPort=''
        uri = urlparse(URL)
        #print str(uri)
        host = '%s://%s' % (uri.scheme, uri.netloc)
        bambooServer = { 'url': host, 'username': username, 'password': password, 'proxyHost': proxyHost, 'proxyPort': proxyPort}
        #**************************************#

        print "Executing RunPlan.py\n"

        if bambooServer is None:
            print "No server provided."
            sys.exit(1)

        contentType = 'application/json'
        headers = {'accept' : 'application/json'}

        def finished(brkey):
            response = request.get('/rest/api/latest/result/' + brkey, contentType=contentType, headers=headers)
            return json.loads(response.response)['finished']

        def successful(brkey):
            response = request.get('/rest/api/latest/result/' + brkey, contentType=contentType, headers=headers)
            return json.loads(response.response)['successful']

        def getKeyStatesAndTimes(brkey):
            response = request.get('/rest/api/latest/result/' + brkey, contentType=contentType, headers=headers)
            jsonData = json.loads(response.response)
            return (jsonData['planResultKey']['key'], jsonData['buildState'], jsonData['state'], jsonData['prettyBuildStartedTime'], jsonData['prettyBuildCompletedTime'])

        #credentials = CredentialsFallback(bambooServer, username, password).getCredentials()
        request = HttpRequest(bambooServer, username, password)
        response = request.post('/rest/api/latest/queue/' + projPlanKey, '{}', contentType=contentType, headers=headers)
        if response.isSuccessful():
            result = json.loads(response.response)
            buildNumber = result['buildNumber']
            print 'Build number is ' + str(buildNumber) + '\n'
            brkey = result['buildResultKey']

            while (not finished(brkey)):
                time.sleep(5)

            (planResultKey, buildState, state, prettyBuildStartedTime, prettyBuildCompletedTime) = getKeyStatesAndTimes(brkey)

            print "Build job started at " + prettyBuildStartedTime + "\n"

            if successful(brkey):
                print "State : " + state + " BuildState : " + buildState + " BuildNumber : " + str(buildNumber) + " planResultKey : " + planResultKey
                print "Build job completed successfully at " + prettyBuildCompletedTime + "\n"
                sys.exit(0)
            else:
                print "Build job failed at " + prettyBuildCompletedTime + "\n"
                sys.exit(1)
        else:
            print "Failed to connect at %s." % URL
            print response.errorDump()
            sys.exit(1)
    color: '#3d6c9e'
  - phase: Offline Production
    tasks:
    - name: Deploy to Offline Prod
      type: xlrelease.SequentialGroup
      precondition: "releaseVariables[\"BlueGreen\"] == \"Yes\""
      tasks:
      - name: Offline Change Request is in Implementation State in ServiceNow
        type: xlrelease.Task
        description: |-
          Change is ready for deployment
          Received all approvals in Change ticket.
        flagStatus: ATTENTION_NEEDED
        flagComment: Task 'Offline Change Request is in Implementation State in ServiceNow'
          in Phase 'Offline Production' has been replaced by a manual task. The task
          of type 'servicenow.PollingCheckStatus' could not be found because of a
          missing plugin.
        variableMapping:
          pythonScript.password: "${global.snow.password}"
        locked: true
      - name: Deploy
        type: xlrelease.SequentialGroup
        tasks:
        - name: Select Microservices
          type: xlrelease.UserInputTask
          description: Please enter the required information below.
          owner: "${release.owner}"
          precondition: |-
            from com.xebialabs.xlrelease.domain.variables import ListOfStringValueProviderConfiguration

            # Change list of values to only those that were deployed to UAT
            if releaseVariables['Microservice_Flag'] == True and releaseVariables['BlueGreen'] == "Yes":
              result = True
            else:
              result = False

            if result == True:
              for v in releaseApi.getVariables(getCurrentRelease().id):
                if v.key == "multi_selected_deployments":
                  vpc = ListOfStringValueProviderConfiguration()
                  vpc.values = releaseVariables['deployed_microservices_final']
                  v.valueProvider = vpc
                  releaseApi.updateVariable(v)
          variables:
          - multi_selected_deployments
        - name: Get EHDS Inventory
          type: xlrelease.ScriptTask
          precondition: "releaseVariables['UseEHDS'] == True"
          script: |-
            # Check for existance of deployed code version variable for EHDS enabled applications

            bFound = False
            myRelease = getCurrentRelease()
            for r in myRelease.variables:
                if r.key == "EHDSDeployCodeAndVersion":
                    releaseVariables['Release-Ready'] = True
                    releaseVariables['EHDSNote'] = "EHDS Integration:  The EHDS Inventory is updated"
                    bFound = True
                    break

            # Show status flag regarding missing inventory
            if bFound = True:
                tskNext = getCurrentTask()
                tskNext.setFlagComment("The EHDS Inventory has not been updated.")
                tskNext.setFlagStatus(FlagStatus.AT_RISK)
                taskApi.updateTask(tskNext)
                # Restart phase
                OfflinePhaseTitle = getCurrentPhase().title  # Change as needed
                firstOfflinePhaseTaskTitle = 'Get EHDS Inventory' # Change as needed
                OfflinePhase = phaseApi.searchPhasesByTitle(OfflinePhaseTitle, release.id)[-1]
                firstOfflineTask = taskApi.searchTasksByTitle(firstOfflinePhaseTaskTitle, UATPhase.title, release.id)[-1]
                releaseApi.restartPhase(release, OfflinePhase, firstOfflineTask, PhaseVersion.LATEST, True)
        - name: Call Deployment Sub-Template
          type: xlrelease.CreateReleaseTask
          description: |-
            OFF-PROD
            *Do not edit the first line*

            To invoke another template for deployment, first change the "Folder" field to the folder that holds the template and click "Save" to save the changes, and then select the correct template from the "Template" field.
          owner: "${release.owner}"
          newReleaseTitle: "Deploy Production Code + ${release.title}"
          createdReleaseId: "${ProdDeployment}"
        - name: Deployment of Sub-Template completed
          type: xlrelease.GateTask
          owner: "${release.owner}"
          locked: true
          dependencies:
          - type: xlrelease.Dependency
            targetId: "${ProdDeployment}"
    - name: Offline Prod Validation
      type: xlrelease.SequentialGroup
      precondition: "releaseVariables[\"BlueGreen\"] == \"Yes\""
      tasks:
      - name: Check Technical Only Change
        type: xlrelease.Task
        owner: "${release.owner}"
        flagStatus: ATTENTION_NEEDED
        flagComment: Task 'Check Technical Only Change' in Phase 'Offline Production'
          has been replaced by a manual task. The task of type 'servicenow.FindRecordByQuery'
          could not be found because of a missing plugin.
        variableMapping:
          pythonScript.sysId: "${Change-Request-Sys-ID}"
          pythonScript.data: "${TechOnly-Data}"
          pythonScript.password: "${global.snow.password}"
          pythonScript.numberFound: "${TechOnlyOff}"
        locked: true
      - name: Business Offline Production Validation Email
        type: xlrelease.CreateReleaseTask
        description: |-
          Email Notification - Business Offline Prod Validation
          *Do not edit the first line*

          Email users that Offline Prod is available to test
        owner: "${release.owner}"
        precondition: "releaseVariables['TechOnlyOff'] == '1'"
        newReleaseTitle: "Business Offline Prod Validation Email ${release.title}"
        templateVariables:
        - type: xlrelease.StringVariable
          key: UserEmail
          value: "${UserEmail}"
        createdReleaseId: "${Offline_Business_Email}"
      - name: Business Offline Production Validation gate
        type: xlrelease.GateTask
        description: Has all Offline Prod testing been completed by the Business?
        owner: "${release.owner}"
        precondition: "releaseVariables['TechOnlyOff'] == '1'"
        taskRecoverOp: SKIP_TASK
        locked: true
        conditions:
        - name: Business Validated Offline Production
          type: xlrelease.GateCondition
        dependencies:
        - type: xlrelease.Dependency
          targetId: "${Offline_Business_Email}"
    - name: Offline Production Release Complete
      type: xlrelease.GateTask
      description: |-
        Only complete this gate when your Offline Production is approved to move to Production

        If you need to redeploy restart the phase.
      owner: "${release.owner}"
      precondition: "releaseVariables[\"BlueGreen\"] == \"Yes\""
      locked: true
      conditions:
      - name: Offline Production Release Complete
        type: xlrelease.GateCondition
    color: '#dd4b39'
  - phase: Release Ready
    tasks:
    - name: Ready for Release evaluation?
      type: xlrelease.GateTask
      description: |-
        Check below when the following are met:

        Production Change Request is in Implementation Approval or Scheduled

        Release Ready criteria below is met:
        * Testing Complete
        * Code Frozen
        * Security Scans Certified (if applicable)
        * Critical and High Defects Closed

        If conditions are not met, Release Ready evaluation fails, the phase will restart automatically.
      owner: "${release.owner}"
      locked: true
      conditions:
      - name: Release Ready?
        type: xlrelease.GateCondition
    - name: Refresh Change State
      type: xlrelease.Task
      flagStatus: ATTENTION_NEEDED
      flagComment: Task 'Refresh Change State' in Phase 'Release Ready' has been replaced
        by a manual task. The task of type 'servicenow.FindRecordByQuery' could not
        be found because of a missing plugin.
      variableMapping:
        pythonScript.password: "${global.snow.password}"
        pythonScript.data: "${Change_Request_Data_SN_Final}"
      locked: true
    - name: Get Current Change State
      type: xlrelease.ScriptTask
      script: |-
        #Get the current state that the change request is in, and set the variable
        #to determine which state the SN Wait for Status task will wait for
        package = releaseVariables["Change_Request_Data_SN_Final"]
        releaseVariables["State"] = package.get("state")

        releaseVariables['rr_state'] = "Implementation Approval"

        if releaseVariables['State'] in ("Implementation Approval", "Scheduled", "Implement"):
          releaseVariables['rr_state'] = releaseVariables["State"]
    - name: Release Ready?
      type: xlrelease.SequentialGroup
      tasks:
      - name: Retrieving Change Request Data
        type: xlrelease.Task
        description: |-
          If this task fails it can be a few reasons:
          * Did not fill out the form correctly - restart the phase and fill out the fields correctly in the first task.   ie. If you picked a group the release owner is not a member of.
          * Restarted this phase or the phase prior and the Change Request was already created
        owner: "${release.owner}"
        flagStatus: ATTENTION_NEEDED
        flagComment: Task 'Retrieving Change Request Data' in Phase 'Release Ready'
          has been replaced by a manual task. The task of type 'servicenow.PollingCheckStatus'
          could not be found because of a missing plugin.
        precondition: "releaseVariables['rr_state'] != \"Scheduled\" or releaseVariables['rr_state']\
          \ != \"Implmement\""
        failureHandler: |-
          if (releaseVariables['attempt'] < 3):
            releaseVariables['attempt'] = releaseVariables['attempt'] + 1
            taskApi.retryTask(getCurrentTask().getId(), 'Retrying task from failure handler.')
          else:
            taskApi.skipTask(getCurrentTask().getId(), 'Skipped task from failure handler.')
            releaseVariables['attempt'] = 1
        taskRecoverOp: RUN_SCRIPT
        variableMapping:
          pythonScript.password: "${global.snow.password}"
          pythonScript.data: "${Change_Request_Data_SN_Final}"
        locked: true
      - name: Release Ready Evaluation
        type: xlrelease.SequentialGroup
        tasks:
        - name: Initialize Variables
          type: xlrelease.ScriptTask
          owner: "${release.owner}"
          script: |-
            releaseVariables['Release-Ready'] = True
            releaseVariables['UserEmail'] = """${release.owner}""" + "@anthem.com"

            # Get an updated copy of the Change request data
            package = releaseVariables["Change_Request_Data_SN_Final"]
            releaseVariables["Planned_Start_Date_SN_Final"] = package.get("start_date")
            releaseVariables["Planned_End_Date_SN_Final"] = package.get("end_date")
            releaseVariables["Deploy_Tool_Final"] = package.get("u_deployment_tool")
            releaseVariables["RelGovernance"] = package.get("u_release_governance")
            releaseVariables["CHG_orig_governance"] = package.get("u_release_governance")
            releaseVariables["TechOnly"] = package.get("u_technical_change_only")
            releaseVariables["ImpApproval"] = package.get("state")
            releaseVariables["u_high_severity_defects"] = package.get("u_high_severity_defects")
            releaseVariables["MoveDefectsIntoProd"] = package.get("u_high_severity_defects")
            releaseVariables["InternetFacing-SN"] = package.get("u_impacts_internet_facing_application")
            releaseVariables["chg_Short_Description"] = package.get("short_description")
            releaseVariables['TotalCount'] = 0
            releaseVariables['Scanning-InProgress'] = 0
            releaseVariables['Scanning-Certified'] = 0
            releaseVariables['Scanning-NotCertified'] = 0
            releaseVariables['chgReason'] = package.get("reason")
            releaseVariables['State'] = package.get("state")
            releaseVariables['Chg_on_hold'] = package.get("on_hold")
            print (releaseVariables['Chg_on_hold'])

            # If reason code is Infrastructure, then default defect question to No
            if releaseVariables['chgReason'] == "Infrastructure":
                releaseVariables["u_high_severity_defects"] = "No"

            # Number of times Release Ready executes
            releaseVariables['RR_Count'] = releaseVariables['RR_Count'] + 1

            # Set initial work note for Service Now
            releaseVariables['rr_work_note'] = "Updated Governance field by Digital.ai Automation for Release Ready evaluation."

            # If the change is not on hold by CM and state is Scheduled, Implement, Review, Closed, change cannot be Updated
            if releaseVariables['State'] in ("Implement", "Review", "Closed"):
                # Set the governance field to "Not Release Ready" if the current value is not already "Not Release Ready" or "Potential Release Collision"
                if releaseVariables['RR_Count'] == 1 and (releaseVariables["RelGovernance"] == "Not release ready" or releaseVariables["RelGovernance"] == "Potential release collision"):
                    # set variable to set governance field on change to Not Release ready
                    releaseVariables['chg_Governance_Update'] = 1
        - name: Service Now Calls
          type: xlrelease.SequentialGroup
          precondition: "releaseVariables['InternetFacing-SN'] == 'Yes'"
          locked: true
          tasks:
          - name: Total SR Count for Scanning Certification
            type: xlrelease.Task
            owner: "${release.owner}"
            flagStatus: ATTENTION_NEEDED
            flagComment: Task 'Total SR Count for Scanning Certification' in Phase
              'Release Ready' has been replaced by a manual task. The task of type
              'servicenow.FindRecordByQuery' could not be found because of a missing
              plugin.
            failureHandler: |-
              if (releaseVariables['attempt'] < 3):
                releaseVariables['attempt'] = releaseVariables['attempt'] + 1
                taskApi.retryTask(getCurrentTask().getId(), 'Retrying task from failure handler.')
              else:
                taskApi.skipTask(getCurrentTask().getId(), 'Skipped task from failure handler.')
                releaseVariables['attempt'] = 1
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.numberFound: "${TotalCount}"
              pythonScript.sysId: "${Change-Request-Sys-ID}"
              pythonScript.password: "${global.snow.password}"
              pythonScript.data: "${SecurityScanData}"
            locked: true
          - name: In Progress Scan Count
            type: xlrelease.Task
            owner: "${release.owner}"
            flagStatus: ATTENTION_NEEDED
            flagComment: Task 'In Progress Scan Count' in Phase 'Release Ready' has
              been replaced by a manual task. The task of type 'servicenow.FindRecordByQuery'
              could not be found because of a missing plugin.
            failureHandler: |-
              if (releaseVariables['attempt'] < 3):
                releaseVariables['attempt'] = releaseVariables['attempt'] + 1
                taskApi.retryTask(getCurrentTask().getId(), 'Retrying task from failure handler.')
              else:
                taskApi.skipTask(getCurrentTask().getId(), 'Skipped task from failure handler.')
                releaseVariables['attempt'] = 1
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.password: "${global.snow.password}"
              pythonScript.numberFound: "${Scanning-InProgress}"
            locked: true
          - name: Certified Scan Count
            type: xlrelease.Task
            owner: "${release.owner}"
            flagStatus: ATTENTION_NEEDED
            flagComment: Task 'Certified Scan Count' in Phase 'Release Ready' has
              been replaced by a manual task. The task of type 'servicenow.FindRecordByQuery'
              could not be found because of a missing plugin.
            failureHandler: |-
              if (releaseVariables['attempt'] < 3):
                releaseVariables['attempt'] = releaseVariables['attempt'] + 1
                taskApi.retryTask(getCurrentTask().getId(), 'Retrying task from failure handler.')
              else:
                taskApi.skipTask(getCurrentTask().getId(), 'Skipped task from failure handler.')
                releaseVariables['attempt'] = 1
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.password: "${global.snow.password}"
              pythonScript.numberFound: "${Scanning-Certified}"
            locked: true
          - name: Not Certified Scan Count
            type: xlrelease.Task
            owner: "${release.owner}"
            flagStatus: ATTENTION_NEEDED
            flagComment: Task 'Not Certified Scan Count' in Phase 'Release Ready'
              has been replaced by a manual task. The task of type 'servicenow.FindRecordByQuery'
              could not be found because of a missing plugin.
            failureHandler: |-
              if (releaseVariables['attempt'] < 3):
                releaseVariables['attempt'] = releaseVariables['attempt'] + 1
                taskApi.retryTask(getCurrentTask().getId(), 'Retrying task from failure handler.')
              else:
                taskApi.skipTask(getCurrentTask().getId(), 'Skipped task from failure handler.')
                releaseVariables['attempt'] = 1
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.numberFound: "${Scanning-NotCertified}"
              pythonScript.password: "${global.snow.password}"
            locked: true
        - name: Get Critical and High Defect Count
          type: jira.Query
          username: srcERMJIRA
          query: "${JIRADefectQuery}"
          delayDuringBlackout: true
          failureHandler: |-
            if (releaseVariables['attempt'] < 3):
              releaseVariables['attempt'] = releaseVariables['attempt'] + 1
              taskApi.retryTask(getCurrentTask().getId(), 'Retrying task from failure handler.')
            else:
              taskApi.skipTask(getCurrentTask().getId(), 'Skipped task from failure handler.')
              releaseVariables['attempt'] = 1
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.password: "${global.ermjira.password}"
            pythonScript.issues: "${OpenDefects}"
        - name: Check JIRA Status
          type: jira.Query
          username: srcERMJIRA
          query: "${JIRAReadyForReleaseQuery}"
          owner: "${release.owner}"
          variableMapping:
            pythonScript.password: "${global.ermjira.password}"
            pythonScript.issues: "${ReadyForRelease}"
        - name: Get EHDS Inventory
          type: xlrelease.ScriptTask
          precondition: "releaseVariables['UseEHDS'] == True"
          script: |-
            releaseVariables['Release-Ready'] = False
            releaseVariables['EHDSNote'] = "EHDS Integration:  The EHDS Inventory has not been updated"
            myRelease = getCurrentRelease()
            for r in myRelease.variables:
              if r.key == "EHDSDeployCodeAndVersion":
                releaseVariables['Release-Ready'] = True
                releaseVariables['EHDSNote'] = "EHDS Integration:  The EHDS Inventory is updated"
                break
        - name: Update Variables and Tag
          type: xlrelease.ScriptTask
          script: |-
            'Set dependnecy flag to True
            releaseVariables['Dependencies_Identified'] = 'Yes'
            releaseVariables['Dependency-Flag'] = True

            # Check for pended change due to collisions
            if releaseVariables["RelGovernance"] == "Potential release collision":
                releaseVariables['Collision-Count'] = "Yes"
                releaseVariables['Release-Ready'] = False

            'Update Code Frozen / Testing Complete Flag
            if releaseVariables["ImpApproval"] in ["Implementation Approval", "Scheduled", "Implement"]:
                releaseVariables['CodeFrozen-Flag'] = True
            else:
                releaseVariables['CodeFrozen-Flag'] = False
                releaseVariables['Release-Ready'] = False

            ' Change request marked as moving defects to production
            if releaseVariables['MoveDefectsIntoProd'] == 'Yes':
                'Check for open Critical or High Priority defects
                releaseVariables['NoOpenDefects-Flag'] = "True"
            else:
                if releaseVariables['OpenDefects'] == {}:
                    releaseVariables['NoOpenDefects-Flag'] = "True"
                else:
                    releaseVariables['NoOpenDefects-Flag'] = "False"
                    releaseVariables['Release-Ready'] = False

            'Update Internet Facing Value, to control whether a check for production certification scan is required
            if releaseVariables['InternetFacing-SN'] == 'Yes':
                releaseVariables['Impacts-Internet-Facing-Application'] = 'Yes'
            else:
                releaseVariables['Impacts-Internet-Facing-Application'] = 'No'

            'if App scanning is required, did it pass certification?
            if  releaseVariables['Impacts-Internet-Facing-Application'] == 'Yes':
                Totals = int(releaseVariables['TotalCount'])
                CtInProgress = int(releaseVariables['Scanning-InProgress'])
                CtCertified = int(releaseVariables['Scanning-Certified'])
                CtNotCertified = (releaseVariables['Scanning-NotCertified'])

                print "__Change Number:__ %s" % releaseVariables['Change_Number_SN']
                print "__Totals:__ " + str(Totals)
                print "__InProgress:__ " +  str(CtInProgress)
                print "__Certified:__ " + str(CtCertified)
                print "__Not Certified:__ " + str(CtNotCertified)

                if Totals == 0:
                    if releaseVariables['NoScanRequired'] == False:
                        releaseVariables['Release-Ready'] = False
                        releaseVariables['PendSecurityScan'] = 'No Requests Submitted'
                        releaseVariables["scanEmailNote"] = releaseVariables["emailMissingScans"]
                        print "__No SR Submitted__"
                    elif releaseVariables['NoScanRequired'] == True:
                        releaseVariables['PendSecurityScan'] = 'Not Required'
                        releaseVariables["scanEmailNote"] = releaseVariables["emailMissingScans"]
                        print "__No Scan Required__"
                    else:
                        releaseVariables['PendSecurityScan'] = 'Not Required'
                        releaseVariables["scanEmailNote"] = releaseVariables["emailMissingScans"]
                        print "__No Scan Required__"
                elif CtInProgress > 0:
                    releaseVariables['Release-Ready'] = False
                    releaseVariables['PendSecurityScan'] = 'False - In Progress'
                    releaseVariables["scanEmailNote"] = ""
                elif CtCertified == 0:
                    releaseVariables['Release-Ready'] = False
                    releaseVariables['PendSecurityScan'] = 'False - No Certification'
                    releaseVariables["scanEmailNote"] = ""
                elif CtInProgress == 0 and CtCertified > 0:
                    #releaseVariables['Release-Ready'] = True
                    releaseVariables['PendSecurityScan'] = 'True'
                    releaseVariables["scanEmailNote"] = ""
                else:
                    releaseVariables['PendSecurityScan'] = 'Not Required'
                    releaseVariables["scanEmailNote"] = ""

            # If the release ready flag is "True", update RelGovernance field on change to appropriate Value
            if releaseVariables['State'] not in ("Implement", "Review", "Closed"):
                if releaseVariables['Release-Ready'] == True:
                    if releaseVariables["CHG_orig_governance"] == "Not release ready":
                        releaseVariables['chg_Governance_Update'] = 4
                    else:
                        releaseVariables['chg_Governance_Update'] = 5
                    releaseVariables['rr_work_note'] = "Updated Governance field by Digital.ai Release Ready Automation \n"
                    releaseVariables['rr_work_note'] = releaseVariables['rr_work_note'] + "Release Ready: True \n"
                else:
                    releaseVariables['rr_work_note'] = "Updated Governance field by Digital.ai Release Ready Automation \n"
                    releaseVariables['rr_work_note'] = releaseVariables['rr_work_note'] + "Release Ready: False \n"
                    if releaseVariables['CodeFrozen-Flag'] == True:
                        releaseVariables['rr_work_note'] = releaseVariables['rr_work_note'] + "* Release Code Frozen: True \n"
                    else:
                        releaseVariables['rr_work_note'] = releaseVariables['rr_work_note'] + "* Release Code Frozen: False \n"
                    releaseVariables['rr_work_note'] = releaseVariables['rr_work_note'] + "* Security Scan Certified: " +  releaseVariables['PendSecurityScan'] + " \n"
                    if releaseVariables['CodeFrozen-Flag'] == True:
                        releaseVariables['rr_work_note'] = releaseVariables['rr_work_note'] + "* Testing Complete: True \n"
                    else:
                        releaseVariables['rr_work_note'] = releaseVariables['rr_work_note'] + "* Testing Complete: False \n"
                    if releaseVariables['NoOpenDefects-Flag'] == "True":
                        releaseVariables['rr_work_note'] = releaseVariables['rr_work_note'] + "* All Critical and High Priority Defects Closed: True \n"
                    else:
                        releaseVariables['rr_work_note'] = releaseVariables['rr_work_note'] + "* All Critical and High Priority Defects Closed: False \n"

                    # Add note re: pended change; text based upon value of Release Ready variable
            if releaseVariables['Release-Ready'] == False:
                releaseVariables['rr_email_note'] = "Your change request has been pended by ERM and will be on hold in ServiceNow. The pend will be removed once your change is Release Ready. If Change Management has a hold on the ticket for other reasons, please contact them at " + releaseVariables['CM_Admin_Email'] + "."
                releaseVariables['rr_email_note'] = releaseVariables['rr_email_note'] + "\n\nEnterprise Release Management hosts a Release Governance meeting on Wednesday at 2pm ET of Enterprise Application Release Week ONLY. If you are required to attend, you will receive an invite to the meeting. If you have any questions, please reach out to ESMAppReleaseManagement@elevancehealth.com"
            elif releaseVariables['Release-Ready'] == True and releaseVariables["CHG_orig_governance"] == "Not release ready":
                releaseVariables['rr_email_note'] = "If your change was previously pended by ERM for not being release ready, the ERM pend has now been removed in ServiceNow. If Change Management has a hold on the ticket for other reasons, please contact them at " + releaseVariables['CM_Admin_Email'] + "."
                releaseVariables['rr_email_note'] = releaseVariables['rr_email_note'] + "\n\nIf you have any questions, please reach out to ESMAppReleaseManagement@elevancehealth.com"
            releaseVariables['EmailText'] = ""
            '''
            # Build list of content not in a "Ready for Release" status in JIRA
            if releaseVariables["ReadyForRelease"] == {} and releaseVariables["OpenDefects"] == {}:
                releaseVariables['EmailText'] = ""
            else:
                head1 = "Key"
                head2 = "Summary"
                head3 = "-"
                releaseVariables['EmailText'] = ""
                releaseVariables['EmailText'] = "## Not in Ready for Release or Resolved Status ## \n \n"
                sMessage = "| " + head1.ljust(80," ") + "| " + head2.ljust(120, " ") + "\n | " + head3.ljust(80,head3) + "| " + head3.ljust(120,head3) + "|\n"
                releaseVariables['EmailText'] = releaseVariables['EmailText'] + sMessage
            '''
            if releaseVariables["ReadyForRelease"] != {}:
                jiraContent = releaseVariables['ReadyForRelease']
                sMessage = ""
                head1 = "Key"
                head2 = "Summary"
                head3 = "-"
                releaseVariables['EmailText'] = releaseVariables['EmailText'] + "## Work Efforts Not in a Ready for Release or Resolved Status ## \n \n"
                sMessage = "| " + head1.ljust(80," ") + "| " + head2.ljust(120, " ") + "\n | " + head3.ljust(80,head3) + "| " + head3.ljust(120,head3) + "|\n"
                #releaseVariables['EmailText'] = releaseVariables['EmailText'] + sMessage
                for key in jiraContent:
                    keyLink = '[' + key + '](' + releaseVariables["JIRAURL"] + key + ')'
                    sMessage = sMessage + " | " + keyLink + "| " + jiraContent[key].ljust(120," ") + " | \n"
                releaseVariables['EmailText'] = releaseVariables['EmailText'] + sMessage

            if releaseVariables["OpenDefects"] != {}:
                openDefects = releaseVariables['OpenDefects']
                sMessage = ""
                head1 = "Key"
                head2 = "Summary"
                head3 = "-"
                releaseVariables['EmailText'] = releaseVariables['EmailText'] + "\n ## Open Critical or High Priority Defects for this Release ## \n \n"
                sMessage = "| " + head1.ljust(80," ") + "| " + head2.ljust(120, " ") + "\n | " + head3.ljust(80,head3) + "| " + head3.ljust(120,head3) + "|\n"
                for key in openDefects:
                    keyLink = '[' + key + '](' + releaseVariables["JIRAURL"] + key + ')'
                    sMessage = sMessage + " | " + keyLink + "| " + openDefects[key].ljust(120," ") + " | \n"
                releaseVariables['EmailText'] = releaseVariables['EmailText'] + sMessage

            # Get reference to the Release Readines Email task and add CM_Admin_Email as a cc if the change is on hold and too far in the process for ERM to unpend the
            if (releaseVariables["State"] == "Scheduled" and releaseVariables['Release-Ready'] == False) or (releaseVariables['Chg_on_hold'] == True):
                relID = release.id
                nextTask = "Notify Release Ready Status"
                tskNext = taskApi.searchTasksByTitle(nextTask, None, relID)[-1]
                if str(tskNext.status) == 'PLANNED':
                    ccSet = tskNext.cc
                    ccSet.add(releaseVariables["CM_Admin_Email"])
                    tskNext.cc = ccSet
                    if releaseVariables['Chg_on_hold'] == True and releaseVariables['Release-Ready'] == True:
                        newSubject = tskNext.subject
                        newSubject = newSubject + ": CM - Please remove hold on " + releaseVariables['Change_Number_SN']
                        tskNext.subject = newSubject
                    elif releaseVariables['Chg_on_hold'] == False and releaseVariables['Release-Ready'] == False and releaseVariables["State"] == "Scheduled":
                        newSubject = tskNext.subject
                        newSubject = newSubject + ": CM - Please place a hold on " + releaseVariables['Change_Number_SN']
                        tskNext.subject = newSubject
                    taskApi.updateTask(tskNext)

            if releaseVariables["Release-Ready"] == True:
                update = False
                if 'not release ready' in release.tags:
                    release.tags.remove('not release ready')
                    update = True
                if 'release ready' not in release.tags:
                    release.tags.add('release ready')
                    update = True
                if update:
                    releaseApi.updateRelease(release)
        - name: Notify Release Ready Status
          type: xlrelease.NotificationTask
          addresses:
          - "${UserEmail}"
          subject: "Release Ready Evaluation for ${release.title}"
          body: |-
            # Release:     ${release.title}
            ## ${Change_Number_SN} Release Ready Status

            * Release Code Frozen: ${CodeFrozen-Flag}
            * Security Scan Certified: ${PendSecurityScan}
            * Testing Complete: ${CodeFrozen-Flag}
            * All Critical and High Priority Defects Closed: ${NoOpenDefects-Flag}

            Release Ready: ${Release-Ready}

            ${EHDSNote}

            ${scanEmailNote}

            ${rr_email_note}

            ${EmailText}
          cc:
          - ESMAppReleaseManagement@elevancehealth.com
          from: ESMAppReleaseManagement@elevancehealth.com
        - name: Collisions Email
          type: xlrelease.CreateReleaseTask
          description: |-
            Email - Collisions
            *Do not edit the first line*
          precondition: "releaseVariables[\"RelGovernance\"] == \"Potential release\
            \ collision\""
          newReleaseTitle: "Potential Collision Email ${release.title}"
          templateVariables:
          - type: xlrelease.StringVariable
            key: UserEmail
            value: "${UserEmail}"
          - type: xlrelease.StringVariable
            key: Change-Number
            value: "${Change_Number_SN}"
          template: Applications/Folder67db40a6f1c7407f84e35e1bd4fe8dee/Folder1de0e33a3d36453f9cb081d3d2e0ada5/Releasedad69db1224a4e1b980c61680718aa8c
        - name: Update Release Governance
          type: xlrelease.Task
          owner: "${release.owner}"
          dueDate: 2018-05-19T00:07:00-04:00
          flagStatus: ATTENTION_NEEDED
          flagComment: Task 'Update Release Governance' in Phase 'Release Ready' has
            been replaced by a manual task. The task of type 'servicenow.UpdateChangeRequest'
            could not be found because of a missing plugin.
          precondition: "releaseVariables['State'] not in (\"Implement\", \"Review\"\
            , \"Closed\")"
          variableMapping:
            pythonScript.additionalFields: "${Change_Request_UpdateGovernance}"
            pythonScript.data: "${chg_pend_data}"
            pythonScript.password: "${global.snow.password}"
          locked: true
      - name: Non Release Ready Gates
        type: xlrelease.SequentialGroup
        tasks:
        - name: On Hold for Release Collision
          type: xlrelease.GateTask
          description: Stop all progress is change is on hold for potential collisions
          owner: "${release.owner}"
          precondition: |-
            if releaseVariables['Collision-Count']=='Yes':
              result = True
            else:
              result = False
          locked: true
          conditions:
          - name: Potential Collision Mitigated?
            type: xlrelease.GateCondition
        - name: On Hold for SLT Approval to Move Critical / High Defects into Production
          type: xlrelease.GateTask
          description: |-
            Have the appropriate approvals been received from senior management to move Critical or High Priority defects into production been received?

            (Note:  If you do NOT plan to move critical and / or high priority defects into production, please update your change request to reflect that.)
          owner: "${release.owner}"
          precondition: |-
            if releaseVariables['MoveDefectsIntoProd'] == 'Yes':
              result = True
            else:
              result = False
          locked: true
          conditions:
          - name: SLT Approval Received for Moving Critical and High Priority Defects
              into Production?
            type: xlrelease.GateCondition
        - name: "Per AppSec, Scanning Not Required"
          type: xlrelease.GateTask
          description: |-
            The change request field is marked as "Internet Facing", but Application Security has noted to the application team that a security scan is not required for this release.

            This gate can also be triggered if the Application Security Production Certification requests are not related to your change request.  Please relate the relevant certification tasks to the change request to pass the Release Ready gate.
          owner: "${release.owner}"
          precondition: "releaseVariables['InternetFacing-SN'] == 'Yes' and releaseVariables['TotalCount']\
            \ == \"0\" and releaseVariables['NoScanRequired'] == False"
          locked: true
          conditions:
          - name: "Security Scanning Not Required for this release, per Application\
              \ Security"
            type: xlrelease.GateCondition
        - name: Mark AppScan Value as False
          type: xlrelease.ScriptTask
          precondition: "releaseVariables['InternetFacing-SN'] == 'Yes' and releaseVariables['TotalCount']\
            \ == \"0\" and releaseVariables['NoScanRequired'] == False"
          script: |-
            # Get reference to AppSec gate and check the condition
            gates = getTasksByTitle("Per AppSec, Scanning Not Required", phaseTitle = getCurrentPhase().title, releaseId = None)
            conditions = gates[0].getConditions()
            for condition in conditions:
                print "Condition: " + str(condition.title) + " is : " + str(condition.isChecked()) + "\n"
                if condition.isChecked() == True:
                    releaseVariables['NoScanRequired'] = True
      - name: Restart Phase if Release Ready Fails
        type: xlrelease.ScriptTask
        precondition: "releaseVariables['Release-Ready'] == False"
        script: |-
          from com.xebialabs.xlrelease.repository import PhaseVersion
          release = getCurrentRelease()
          RRPhaseTitle = getCurrentPhase().title  # Change as needed
          firstRRPhaseTaskTitle = "Ready for Release evaluation?" # Change as needed
          RRPhase = phaseApi.searchPhasesByTitle(RRPhaseTitle, release.id)[-1]
          firstRRTask = taskApi.searchTasksByTitle(firstRRPhaseTaskTitle, RRPhase.title, release.id)[-1]
          releaseApi.restartPhase(release, RRPhase, firstRRTask, PhaseVersion.LATEST, True)
    - name: Check Release Ready Gate
      type: xlrelease.GateTask
      description: ServiceNow and JIRA
      owner: "${release.owner}"
      precondition: "releaseVariables['Release-Ready'] == False"
      locked: true
      conditions:
      - name: ERM Governance Requirements Met?
        type: xlrelease.GateCondition
    color: '#0079BC'
  - phase: Production
    tasks:
    - name: Release Ready Email to Stakeholders Prior to Prod
      type: xlrelease.CreateReleaseTask
      description: |-
        Email Notification - Ready for Prod Release
        *Do not edit the first line*

        Email to send to stakeholders that release has been approved and ready to be deployed to Production.
      owner: "${release.owner}"
      newReleaseTitle: "Email to stakeholders prior to production ${release.title}"
      templateVariables:
      - type: xlrelease.StringVariable
        key: NoOpenDefects-Flag
        label: No Open Defects Flag
        value: NoOpenDefects-Flag
      - type: xlrelease.StringVariable
        key: UserEmail
        value: "${UserEmail}"
      createdReleaseId: "${Email-Notification-Ready-For-Release}"
      template: Applications/Foldera910ff048c8c4a21a3c9e23fbc048387/Folder232b2a96553549dda1790ba016f72073/Release1da7f9fc0d2a44e2bdf4d0082a8ba33d
    - name: Final Validation Before Implementation
      type: xlrelease.SequentialGroup
      tasks:
      - name: Refresh Change Information
        type: xlrelease.SequentialGroup
        tasks:
        - name: Pulling Change Request Data
          type: xlrelease.Task
          description: |-
            If this task fails it can be a few reasons:
            * Did not fill out the form correctly - restart the phase and fill out the fields correctly in the first task.   ie. If you picked a group the release owner is not a member of.
            * Restarted this phase or the phase prior and the Change Request was already created
          owner: "${release.owner}"
          flagStatus: ATTENTION_NEEDED
          flagComment: Task 'Pulling Change Request Data' in Phase 'Production' has
            been replaced by a manual task. The task of type 'servicenow.FindRecordByQuery'
            could not be found because of a missing plugin.
          failureHandler: |-
            if (releaseVariables['attempt'] < 3):
              releaseVariables['attempt'] = releaseVariables['attempt'] + 1
              taskApi.retryTask(getCurrentTask().getId(), 'Retrying task from failure handler.')
            else:
              taskApi.skipTask(getCurrentTask().getId(), 'Skipped task from failure handler.')
              releaseVariables['attempt'] = 1
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.sysId: "${Change-Request-Sys-ID}"
            pythonScript.password: "${global.snow.password}"
            pythonScript.data: "${Change_Request_Data_SN_Final}"
          locked: true
        - name: Refresh Change Request Data
          type: xlrelease.ScriptTask
          owner: "${release.owner}"
          script: |-
            # Check planned start date of the production change request, and check against Now() to
            # determine when this task can be executed.  We need a delay to ensure that we don't do
            # the final defect and app sec cert values are still valid

            from datetime import datetime, timedelta, date, time
            from time import gmtime, strftime
            from com.xebialabs.xlrelease.repository import PhaseVersion
            from org.joda.time import DateTime
            from org.joda.time import DateTimeZone
            from java.util import Date

            print "Imports successful"

            # Refresh Service Now Data
            package = releaseVariables["Change_Request_Data_SN_Final"]
            releaseVariables['u_high_severity_defects'] = package.get("u_high_severity_defects")
            releaseVariables['MoveDefectsIntoProd'] = package.get("u_high_severity_defects")
            releaseVariables['InternetFacing-SN'] = package.get("u_impacts_internet_facing_application")
            releaseVariables["Planned_Start_Date_SN_Final"] = package.get("start_date")
            releaseVariables["Planned_End_Date_SN_Final"] = package.get("end_date")
            releaseVariables["chg_Short_Description"] = package.get("short_description")
            releaseVariables['State'] = package.get("state")
            releaseVariables['Chg_on_hold'] = package.get("on_hold")

            #Check for open Critical or High Priority defects
            if releaseVariables['OpenDefects'] == {}:
                releaseVariables['NoOpenDefects-Flag'] = "True"
            else:
                releaseVariables['NoOpenDefects-Flag'] = "False"

            print("Planned_Start_Date_SN_Final", releaseVariables["Planned_Start_Date_SN_Final"])

            # Set the timezone to Eastern

            zone = DateTimeZone.forID("US/Eastern")

            # Get planned start date

            startdate_Obj = datetime.strptime(releaseVariables["Planned_Start_Date_SN_Final"], '%Y-%m-%d %H:%M:%S')
            sDate = DateTime(startdate_Obj)
            mDate = DateTime(startdate_Obj)
            mtDate = mDate.minusMonths(1)
            stDate = sDate.plusHours(4)
            print(stDate)

            DofW = stDate.dayOfWeek().getAsText()
            sn_day = stDate.getDayOfMonth()
            maxday = stDate.dayOfMonth().getMaximumValue()
            print(maxday)
            mtday = mtDate.dayOfMonth().getMaximumValue()
            print(mtday)
            sn_month = stDate.getMonthOfYear()
            sn_year = stDate.getYear()
            sn_hour = stDate.getHourOfDay()
            sn_minute = stDate.getMinuteOfHour()
            print(sn_minute)
            #deployTime = 15   # 3 PM ET

            # code for Planned_Start_Date_SN_Final is first day of the month


            if DofW in ("Monday","Tuesday","Wednesday","Thursday"):
                if sn_day == 1 and sn_hour == 0:
                    sn_day = mtday
                    sn_month = sn_month - 1
                    deployTime = 23 - sn_hour - 2
                    sn_minute = sn_minute
                    print "Inside Weekday before 3 Loop"
                    releaseVariables["SkipPend"] = False
                elif sn_day > 1 and sn_hour == 0:
                    sn_day = sn_day - 1
                    deployTime = 23 - sn_hour - 2
                    sn_minute = sn_minute
                    print "Inside Weekday before 3 Loop"
                    releaseVariables["SkipPend"] = False
            if DofW == "Friday":
                if sn_day == 1 and sn_hour == 0:
                    sn_day = mtday
                    sn_month = sn_month - 1
                    deployTime = 23 - sn_hour - 2
                    sn_minute = sn_minute
                    print "Inside Friday morning Loop"
                    releaseVariables["SkipPend"] = False
                elif sn_day > 1 and sn_hour == 0:
                    sn_day = sn_day - 1
                    deployTime = 23 - sn_hour - 2
                    sn_minute = sn_minute
                    print "Inside Friday morning Loop"
                    releaseVariables["SkipPend"] = False
            if DofW in ("Saturday","Sunday"):
                if sn_day == 1 and sn_hour == 0:
                    sn_day = mtday
                    sn_month = sn_month - 1
                    deployTime = 23 - sn_hour - 2
                    sn_minute = sn_minute
                    print "Inside weekend loop"
                    releaseVariables["SkipPend"] = True
                elif sn_day > 1 and sn_hour == 0:
                    sn_day = sn_day - 1
                    deployTime = 23 - sn_hour - 2
                    sn_minute = sn_minute
                    print "Inside weekend loop"
                    releaseVariables["SkipPend"] = True

            if DofW in ("Monday","Tuesday","Wednesday","Thursday"):
                if sn_day == 1 and sn_hour == 1:
                    sn_day = mtday
                    sn_month = sn_month - 1
                    deployTime = 23 - sn_hour
                    sn_minute = sn_minute
                    print "Inside Weekday before 3 Loop"
                    releaseVariables["SkipPend"] = False
                elif sn_day > 1 and sn_hour == 1:
                    sn_day = sn_day - 1
                    deployTime = 23 - sn_hour
                    sn_minute = sn_minute
                    print "Inside Weekday before 3 Loop"
                    releaseVariables["SkipPend"] = False
            if DofW == "Friday":
                if sn_day == 1 and sn_hour == 1:
                    sn_day = mtday
                    sn_month = sn_month - 1
                    deployTime = 23 - sn_hour
                    sn_minute = sn_minute
                    print "Inside Friday morning Loop"
                    releaseVariables["SkipPend"] = False
                elif sn_day > 1 and sn_hour == 1:
                    sn_day = sn_day - 1
                    deployTime = 23 - sn_hour
                    sn_minute = sn_minute
                    print "Inside Friday morning Loop"
                    releaseVariables["SkipPend"] = False
            if DofW in ("Saturday","Sunday"):
                if sn_day == 1 and sn_hour == 1:
                    sn_day = mtday
                    sn_month = sn_month - 1
                    deployTime = 23 - sn_hour
                    sn_minute = sn_minute
                    print "Inside weekend loop"
                    releaseVariables["SkipPend"] = True
                elif sn_day > 1 and sn_hour == 1:
                    sn_day = sn_day - 1
                    deployTime = 23 - sn_hour
                    sn_minute = sn_minute
                    print "Inside weekend loop"
                    releaseVariables["SkipPend"] = True

            if DofW in ("Monday","Tuesday","Wednesday","Thursday"):
                if sn_day == 1 and sn_hour == 2:
                    sn_day = mtday
                    sn_month = sn_month - 1
                    deployTime = 23
                    sn_minute = sn_minute
                    print "Inside Weekday before 3 Loop"
                    releaseVariables["SkipPend"] = False
                elif sn_day > 1 and sn_hour == 2:
                    sn_day = sn_day - 1
                    deployTime = 23
                    sn_minute = sn_minute
                    print "Inside Weekday before 3 Loop"
                    releaseVariables["SkipPend"] = False
            if DofW == "Friday":
                if sn_day == 1 and sn_hour == 2:
                    sn_day = mtday
                    sn_month = sn_month - 1
                    deployTime = 23
                    sn_minute = sn_minute
                    print "Inside Friday morning Loop"
                    releaseVariables["SkipPend"] = False
                elif sn_day > 1 and sn_hour == 2:
                    sn_day = sn_day - 1
                    deployTime = 23
                    sn_minute = sn_minute
                    print "Inside Friday morning Loop"
                    releaseVariables["SkipPend"] = False
            if DofW in ("Saturday","Sunday"):
                if sn_day == 1 and sn_hour == 2:
                    sn_day = mtday
                    sn_month = sn_month - 1
                    deployTime = 23
                    sn_minute = sn_minute
                    print "Inside weekend loop"
                    releaseVariables["SkipPend"] = True
                elif sn_day > 1 and sn_hour == 2:
                    sn_day = sn_day - 1
                    deployTime = 23
                    sn_minute = sn_minute
                    print "Inside weekend loop"
                    releaseVariables["SkipPend"] = True



            #code for Planned_Start_Date_SN_Final is at 3pm but minutes is greater than 0

            if DofW in ("Monday","Tuesday","Wednesday","Thursday"):
                if sn_hour == 15 and  sn_minute >= 0:
                    deployTime = 15
                    sn_minute = 0
                    print "Inside Weekday after 3 hours and minutes Loop"
                    releaseVariables["SkipPend"] = False
            elif DofW == "Friday":
                if sn_hour == 15 and  sn_minute >= 0:
                    deployTime = 15
                    sn_minute = 0
                    releaseVariables["SkipPend"] = False
                    print "Inside Friday afternoon minutes Loop"



            #code for other days of the month except first day

            if DofW in ("Monday","Tuesday","Wednesday","Thursday"):
                if sn_hour < 15 and sn_hour > 2:
                    deployTime = sn_hour - 3
                    sn_minute = sn_minute
                    print "Inside Weekday before 3 Loop"
                elif sn_hour > 15 and sn_hour > 2:
                    deployTime = 15
                    sn_minute = 0
                    print "Inside Weekday after 3 Loop"
                    releaseVariables["SkipPend"] = False
            elif DofW == "Friday":
                if sn_hour < 15 and sn_hour > 2:
                    deployTime = sn_hour - 3
                    sn_minute = sn_minute
                    releaseVariables["SkipPend"] = False
                    print "Inside Friday morning Loop"
                elif sn_hour > 15 and sn_hour < 18:
                    deployTime = 15
                    sn_minute = 0
                    releaseVariables["SkipPend"] = False
                    print "Inside Friday afternoon Loop"
                elif sn_hour > 2 and sn_hour > 18:
                    releaseVariables["SkipPend"] = True
                    deployTime = sn_hour - 3
                    sn_minute = sn_minute
                    print "Inside Friday evening Loop"
                elif sn_hour == 18 and sn_minute >= 0:
                    releaseVariables["SkipPend"] = True
                    deployTime = sn_hour - 3
                    sn_minute = sn_minute
                    print "Inside Friday evening Loop"
            elif DofW in ("Saturday","Sunday"):
                if sn_hour >= 3:
                    releaseVariables["SkipPend"] = True
                    deployTime = sn_hour - 3
                    sn_minute = sn_minute
                    print "Inside weekend loop"

            print ("SkipPend",str(releaseVariables["SkipPend"]))

            # Get reference to the next SN call to set date / time of task
            relID = release.id
            nextTask = "Update Internet Facing and Defect Approval"
            tskNext = taskApi.searchTasksByTitle(nextTask, None, relID)[-1]
            if str(tskNext.status) == 'PLANNED':
                tskNext.scheduledStartDate = Date(DateTime(sn_year, sn_month, sn_day, deployTime, sn_minute, 0, zone).getMillis())
                taskApi.updateTask(tskNext)

            # Set release progress indicator
            releaseVariables['ReleaseProgress'] = "Releasehasnotstarted"
        - name: Update Internet Facing and Defect Approval
          type: xlrelease.Task
          description: |-
            If this task fails it can be a few reasons:
            * Did not fill out the form correctly - restart the phase and fill out the fields correctly in the first task.   ie. If you picked a group the release owner is not a member of.
            * Restarted this phase or the phase prior and the Change Request was already created
          owner: "${release.owner}"
          flagStatus: ATTENTION_NEEDED
          flagComment: Task 'Update Internet Facing and Defect Approval' in Phase
            'Production' has been replaced by a manual task. The task of type 'servicenow.FindRecordByQuery'
            could not be found because of a missing plugin.
          failureHandler: |-
            if (releaseVariables['attempt'] < 3):
              releaseVariables['attempt'] = releaseVariables['attempt'] + 1
              taskApi.retryTask(getCurrentTask().getId(), 'Retrying task from failure handler.')
            else:
              taskApi.skipTask(getCurrentTask().getId(), 'Skipped task from failure handler.')
              releaseVariables['attempt'] = 1
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.sysId: "${Change-Request-Sys-ID}"
            pythonScript.password: "${global.snow.password}"
            pythonScript.data: "${Change_Request_Data_SN_Final}"
        - name: Refresh Internet Facing and Defect Approval
          type: xlrelease.ScriptTask
          owner: "${release.owner}"
          script: |-
            # Check planned start date of the production change request, and check against Now() to
            # determine when this task can be executed.  We need a delay to ensure that we don't do
            # the final defect and app sec cert values are still valid

            # Refresh Service Now Data
            package = releaseVariables["Change_Request_Data_SN_Final"]
            releaseVariables['MoveDefectsIntoProd'] = package.get("u_high_severity_defects")
            releaseVariables['u_high_severity_defects'] = package.get("u_high_severity_defects")
            'Check for open Critical or High Priority defects
            if releaseVariables['OpenDefects'] == {}:
                releaseVariables['NoOpenDefects-Flag'] = "True"
            else:
                releaseVariables['NoOpenDefects-Flag'] = "False"
            releaseVariables['InternetFacing-SN'] = package.get("u_impacts_internet_facing_application")
            releaseVariables["Planned_Start_Date_SN_Final"] = package.get("start_date")
            releaseVariables["Planned_End_Date_SN_Final"] = package.get("end_date")

            # Set release progress indicator
            releaseVariables['ReleaseProgress'] = "Releasehasnotstarted"

            # If reason code is Infrastructure, then default defect question to No
            if releaseVariables['chgReason'] == "Infrastructure":
                releaseVariables["u_high_severity_defects"] = "No"
      - name: Get Critical and High Defect Count
        type: jira.Query
        username: srcERMJIRA
        query: "${JIRADefectQuery}"
        failureHandler: |-
          if (releaseVariables['attempt'] < 3):
            releaseVariables['attempt'] = releaseVariables['attempt'] + 1
            taskApi.retryTask(getCurrentTask().getId(), 'Retrying task from failure handler.')
          else:
            taskApi.skipTask(getCurrentTask().getId(), 'Skipped task from failure handler.')
            releaseVariables['attempt'] = 1
        taskRecoverOp: RUN_SCRIPT
        variableMapping:
          pythonScript.password: "${global.ermjira.password}"
          pythonScript.issues: "${OpenDefects}"
      - name: Final Prod Certification Check
        type: xlrelease.SequentialGroup
        precondition: "releaseVariables['Impacts-Internet-Facing-Application'] ==\
          \ \"Yes\" and releaseVariables['NoScanRequired'] == False"
        locked: true
        tasks:
        - name: Total SR Count for Scanning Certification
          type: xlrelease.Task
          owner: "${release.owner}"
          flagStatus: ATTENTION_NEEDED
          flagComment: Task 'Total SR Count for Scanning Certification' in Phase 'Production'
            has been replaced by a manual task. The task of type 'servicenow.FindRecordByQuery'
            could not be found because of a missing plugin.
          failureHandler: |-
            if (releaseVariables['attempt'] < 3):
              releaseVariables['attempt'] = releaseVariables['attempt'] + 1
              taskApi.retryTask(getCurrentTask().getId(), 'Retrying task from failure handler.')
            else:
              taskApi.skipTask(getCurrentTask().getId(), 'Skipped task from failure handler.')
              releaseVariables['attempt'] = 1
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.numberFound: "${TotalCount}"
            pythonScript.sysId: "${Change-Request-Sys-ID}"
            pythonScript.password: "${global.snow.password}"
            pythonScript.data: "${SecurityScanData}"
          locked: true
        - name: In Progress Scan Count
          type: xlrelease.Task
          owner: "${release.owner}"
          flagStatus: ATTENTION_NEEDED
          flagComment: Task 'In Progress Scan Count' in Phase 'Production' has been
            replaced by a manual task. The task of type 'servicenow.FindRecordByQuery'
            could not be found because of a missing plugin.
          failureHandler: |-
            if (releaseVariables['attempt'] < 3):
              releaseVariables['attempt'] = releaseVariables['attempt'] + 1
              taskApi.retryTask(getCurrentTask().getId(), 'Retrying task from failure handler.')
            else:
              taskApi.skipTask(getCurrentTask().getId(), 'Skipped task from failure handler.')
              releaseVariables['attempt'] = 1
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.password: "${global.snow.password}"
            pythonScript.numberFound: "${Scanning-InProgress}"
          locked: true
        - name: Certified Scan Count
          type: xlrelease.Task
          owner: "${release.owner}"
          flagStatus: ATTENTION_NEEDED
          flagComment: Task 'Certified Scan Count' in Phase 'Production' has been
            replaced by a manual task. The task of type 'servicenow.FindRecordByQuery'
            could not be found because of a missing plugin.
          precondition: "releaseVariables['Impacts-Internet-Facing-Application'] ==\
            \ 'Yes' and releaseVariables['NoScanRequired'] != True"
          failureHandler: |-
            if (releaseVariables['attempt'] < 3):
              releaseVariables['attempt'] = releaseVariables['attempt'] + 1
              taskApi.retryTask(getCurrentTask().getId(), 'Retrying task from failure handler.')
            else:
              taskApi.skipTask(getCurrentTask().getId(), 'Skipped task from failure handler.')
              releaseVariables['attempt'] = 1
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.password: "${global.snow.password}"
            pythonScript.numberFound: "${Scanning-Certified}"
          locked: true
        - name: Not Certified Scan Count
          type: xlrelease.Task
          owner: "${release.owner}"
          dueDate: 2018-05-19T05:20:00-04:00
          flagStatus: ATTENTION_NEEDED
          flagComment: Task 'Not Certified Scan Count' in Phase 'Production' has been
            replaced by a manual task. The task of type 'servicenow.FindRecordByQuery'
            could not be found because of a missing plugin.
          precondition: "releaseVariables['Impacts-Internet-Facing-Application'] ==\
            \ 'Yes' and releaseVariables['NoScanRequired'] != True"
          failureHandler: |-
            if (releaseVariables['attempt'] < 3):
              releaseVariables['attempt'] = releaseVariables['attempt'] + 1
              taskApi.retryTask(getCurrentTask().getId(), 'Retrying task from failure handler.')
            else:
              taskApi.skipTask(getCurrentTask().getId(), 'Skipped task from failure handler.')
              releaseVariables['attempt'] = 1
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.numberFound: "${Scanning-NotCertified}"
            pythonScript.password: "${global.snow.password}"
          locked: true
      - name: Evaluate Final Check
        type: xlrelease.ScriptTask
        script: |-
          # Check to see if there are open defects after passing Release Ready
          if releaseVariables['MoveDefectsIntoProd'] == 'Yes':
              'Check for open Critical or High Priority defects
              releaseVariables['NoOpenDefects-Flag'] = "True"
          else:
              if releaseVariables['OpenDefects'] == {}:
                  releaseVariables['NoOpenDefects-Flag'] = "True"
              else:
                  releaseVariables['NoOpenDefects-Flag'] = "False"
                  releaseVariables['Release-Ready'] = False

          print("MoveDefectsIntoProd", releaseVariables['MoveDefectsIntoProd'])

          # Check if App scanning has a late opened scan?
          if  releaseVariables['Impacts-Internet-Facing-Application'] == 'Yes':
              Totals = int(releaseVariables['TotalCount'])
              CtInProgress = int(releaseVariables['Scanning-InProgress'])
              CtCertified = int(releaseVariables['Scanning-Certified'])
              CtNotCertified = (releaseVariables['Scanning-NotCertified'])

              print "__Change Number:__ %s" % releaseVariables['Change_Number_SN']
              print "__Totals:__ " + str(Totals)
              print "__InProgress:__ " +  str(CtInProgress)
              print "__Certified:__ " + str(CtCertified)
              print "__Not Certified:__ " + str(CtNotCertified)

              if Totals == 0:
                  if releaseVariables['NoScanRequired'] == False:
                      releaseVariables['Release-Ready'] = False
                      releaseVariables['PendSecurityScan'] = 'No Requests Submitted'
                      print "__No SR Submitted__"
                  elif releaseVariables['NoScanRequired'] == True:
                      releaseVariables['PendSecurityScan'] = 'Not Required'
                      print "__No Scan Required__"
                  else:
                      releaseVariables['PendSecurityScan'] = 'Not Required'
                      print "__No Scan Required__"
              elif CtInProgress > 0:
                  releaseVariables['Release-Ready'] = False
                  releaseVariables['PendSecurityScan'] = 'False - In Progress'
              elif CtCertified == 0:
                  releaseVariables['Release-Ready'] = False
                  releaseVariables['PendSecurityScan'] = 'False - No Certification'
              elif CtInProgress == 0 and CtCertified > 0:
                  #releaseVariables['Release-Ready'] = True
                  releaseVariables['PendSecurityScan'] = 'True'
              else:
                  releaseVariables['PendSecurityScan'] = 'Not Required'

          print("__PendSecurityScan: %s__" % releaseVariables['PendSecurityScan'])

          # If the release ready flag is "True", update RelGovernance field on change to appropriate Value
          if releaseVariables['State'] not in ("Implement", "Review", "Closed"):
              if releaseVariables['Release-Ready'] == False:
                  releaseVariables['chg_Governance_Update'] = 1
                  releaseVariables['rr_work_note'] = "Updated Governance field by Digital.ai Release Ready Final Check Automation \n"
                  releaseVariables['rr_work_note'] = releaseVariables['rr_work_note'] + "* Security Scan Certified: " +  "${PendSecurityScan}" + " \n"
                  if releaseVariables['NoOpenDefects-Flag'] == "True":
                      releaseVariables['rr_work_note'] = releaseVariables['rr_work_note'] + "* All Critical and High Priority Defects Closed: True \n"
                  else:
                      releaseVariables['rr_work_note'] = releaseVariables['rr_work_note'] + "* All Critical and High Priority Defects Closed: False \n"

          # Add note re: pended change; text based upon value of Release Ready variable
          if releaseVariables['Release-Ready'] == False and releaseVariables['SkipPend'] == False:
              releaseVariables['rr_initial_email_note'] = "Your release (" + "${release.title}" + ") has been sent back to the Release Ready phase, and that evaluation will need to be completed again. The following conditions triggered this action:"
              releaseVariables['rr_email_note'] = "Your change request has been pended by ERM and will be on hold in ServiceNow. The pend will be removed once your change is Release Ready. If Change Management has a hold on the ticket for other reasons, please contact them at " + releaseVariables['CM_Admin_Email'] + "."
              releaseVariables['rr_email_note'] = releaseVariables['rr_email_note'] + "\n\nEnterprise Release Management hosts a Release Governance meeting on Wednesday at 2pm ET of Enterprise Application Release Week ONLY. If you are required to attend, you will receive an invite to the meeting. If you have any questions, please reach out to ESMAppReleaseManagement@elevancehealth.com"
          elif releaseVariables['Release-Ready'] == False and releaseVariables['SkipPend'] == True:
              releaseVariables['rr_initial_email_note'] = "Your release (" + "${release.title}" + ") will be allowed to move forward, however, ERM will be following up with the ARM on Monday to determine why the quality checks failed.  This action was triggered by the following conditions:"
              releaseVariables['rr_email_note'] = "It's important to keep in mind that for critical or high testing defects, they must be in a CLOSED status in JIRA before being implemented, unless there are VP approvals attached to the change ticket. Additionally, if applicable, the change ticket must have security scan certifications attached to it."
          elif releaseVariables['Release-Ready'] == True and releaseVariables["CHG_orig_governance"] == "Not release ready":
              releaseVariables['rr_email_note'] = "If your change was previously pended by ERM for not being release ready, the ERM pend has now been removed in ServiceNow. If Change Management has a hold on the ticket for other reasons, please contact them at " + releaseVariables['CM_Admin_Email'] + "."
              releaseVariables['rr_email_note'] = releaseVariables['rr_email_note'] + "\n\nIf you have any questions, please reach out to ESMAppReleaseManagement@elevancehealth.com"
          releaseVariables['EmailText'] = ""

          # Build list of defects still opened
          if releaseVariables["OpenDefects"] == {}:
              releaseVariables['EmailText'] = ""
          else:
              head1 = "Key"
              head2 = "Summary"
              head3 = "-"

              releaseVariables['EmailText'] = "## Open Critical or High Priority Defects ## \n \n"
              jiraOpenDefects = releaseVariables['OpenDefects']
              sMessage = "| " + head1.ljust(80," ") + "| " + head2.ljust(120, " ") + "\n | " + head3.ljust(80,head3) + "| " + head3.ljust(120,head3) + "|\n"
              for key in jiraOpenDefects:
                  keyLink = '[' + key + '](' + releaseVariables["JIRAURL"] + key + ')'
                  sMessage = sMessage + " | " + keyLink + "| " + jiraOpenDefects[key].ljust(120," ") + " | \n"
              releaseVariables['EmailText'] = releaseVariables['EmailText'] + sMessage

          # Get reference to the Release Readines Email task and add CM_Admin_Email as a cc if the change is Scheduled to place on hold
          if (releaseVariables["State"] == "Scheduled" and releaseVariables['Release-Ready'] == False) or (releaseVariables['Chg_on_hold'] == True):
              relID = release.id
              nextTask = "Notify Release Manager if Checks Failed"
              tskNext = taskApi.searchTasksByTitle(nextTask, None, relID)[-1]
              if str(tskNext.status) == 'PLANNED' and releaseVariables['SkipPend'] == False:
                  newSubject = tskNext.subject
                  newSubject = "${release.title}: Failed Post Release Ready Checks and is now in the Release Ready phase"
                  tskNext.subject = newSubject
                  ccSet = tskNext.cc
                  ccSet.add(releaseVariables["CM_Admin_Email"])
                  tskNext.cc = ccSet
                  taskApi.updateTask(tskNext)
      - name: Notify Release Manager if Checks Failed
        type: xlrelease.NotificationTask
        precondition: "releaseVariables['Release-Ready'] == False"
        addresses:
        - "${UserEmail}"
        subject: "${release.title}: Failed Post Release Ready Checks"
        body: |-
          # Release:     ${release.title}
          ## ${Change_Number_SN}

          Last Validation checks prior to change moving into the Implementation state have failed.

          ${rr_initial_email_note}

          * Open Critical or High Priority Defects Closed:  ${NoOpenDefects-Flag}
          * Outstanding Application Security Scan:  ${PendSecurityScan}

          ${scanEmailNote}

          ${rr_email_note}

          ${EmailText}
        cc:
        - ESMAppReleaseManagement@elevancehealth.com
        - jennifer.lambirth@elevancehealth.com
        - tony.hall@elevancehealth.com
        from: ESMAppReleaseManagement@elevancehealth.com
      - name: Update Release Governance
        type: xlrelease.Task
        owner: "${release.owner}"
        flagStatus: ATTENTION_NEEDED
        flagComment: Task 'Update Release Governance' in Phase 'Production' has been
          replaced by a manual task. The task of type 'servicenow.UpdateChangeRequest'
          could not be found because of a missing plugin.
        precondition: |-
          if releaseVariables["SkipPend"] == False:
              result = True
              if releaseVariables['Impacts-Internet-Facing-Application'] == 'Yes' and releaseVariables['PendSecurityScan'] != "True":
                  result = True
              elif releaseVariables['NoOpenDefects-Flag'] == "False" and releaseVariables['OpenDefects'] != {} and releaseVariables['u_high_severity_defects'] == "No":
                  result = True
              else:
                  result = False
          else:
              result = False
        variableMapping:
          pythonScript.additionalFields: "${Change_Request_UpdateGovernance}"
          pythonScript.data: "${chg_pend_data}"
          pythonScript.password: "${global.snow.password}"
        locked: true
      - name: Restart Release Ready Phase
        type: xlrelease.ScriptTask
        precondition: |-
          if releaseVariables["SkipPend"] == False:
              result = True
              if releaseVariables['Impacts-Internet-Facing-Application'] == 'Yes' and releaseVariables['PendSecurityScan'] != "True":
                  result = True
              elif releaseVariables['NoOpenDefects-Flag'] == "False" and releaseVariables['OpenDefects'] != {} and releaseVariables['u_high_severity_defects'] == "No":
                  result = True
              else:
                  result = False
          else:
              result = False
        script: |-
          # reset release ready tags
          if releaseVariables["Release-Ready"] == False:
              update = False
              if 'Release Ready' in release.tags:
                  release.tags.remove('release ready')
                  update = True
              if 'Release Ready' not in release.tags:
                  release.tags.add('not release ready')
                  update = True
              if update:
                  releaseApi.updateRelease(release)


          from com.xebialabs.xlrelease.repository import PhaseVersion
          release = getCurrentRelease()
          RRPhaseTitle = "Release Ready"  # Change as needed
          firstRRPhaseTaskTitle = "Ready for Release evaluation?" # Change as needed
          UATPhase = phaseApi.searchPhasesByTitle(RRPhaseTitle, release.id)[-1]
          firstRRTask = taskApi.searchTasksByTitle(firstRRPhaseTaskTitle, UATPhase.title, release.id)[-1]
          releaseApi.restartPhase(release, UATPhase, firstRRTask, PhaseVersion.LATEST, True)
    - name: Deploy to Prod
      type: xlrelease.SequentialGroup
      tasks:
      - name: Change Request is in Implementation State in ServiceNow
        type: xlrelease.Task
        description: |-
          Change is ready for deployment
          Received all approvals in Change ticket.
        owner: "${release.owner}"
        flagStatus: ATTENTION_NEEDED
        flagComment: Task 'Change Request is in Implementation State in ServiceNow'
          in Phase 'Production' has been replaced by a manual task. The task of type
          'servicenow.PollingCheckStatus' could not be found because of a missing
          plugin.
        failureHandler: |-
          if (releaseVariables['attempt'] < 3):
            releaseVariables['attempt'] = releaseVariables['attempt'] + 1
            taskApi.retryTask(getCurrentTask().getId(), 'Retrying task from failure handler.')
          else:
            taskApi.skipTask(getCurrentTask().getId(), 'Skipped task from failure handler.')
            releaseVariables['attempt'] = 1
        taskRecoverOp: RUN_SCRIPT
        variableMapping:
          pythonScript.password: "${global.snow.password}"
        locked: true
      - name: Select Microservices
        type: xlrelease.UserInputTask
        description: Please enter the required information below.
        owner: "${release.owner}"
        precondition: |-
          from com.xebialabs.xlrelease.domain.variables import ListOfStringValueProviderConfiguration

          # Change list of values to only those that were deployed to UAT
          if releaseVariables['Microservice_Flag'] == True:
            result = True
          else:
            result = False

          if result == True:
            for v in releaseApi.getVariables(getCurrentRelease().id):
              if v.key == "multi_selected_deployments":
                vpc = ListOfStringValueProviderConfiguration()
                vpc.values = releaseVariables['deployed_microservices_final']
                v.valueProvider = vpc
                releaseApi.updateVariable(v)
        variables:
        - multi_selected_deployments
      - name: Update Release Progress Variable
        type: xlrelease.ScriptTask
        owner: "${release.owner}"
        script: "releaseVariables['ReleaseProgress'] = \"ImplementationStarted\""
      - name: Call Deployment Sub-Template
        type: xlrelease.CreateReleaseTask
        description: |-
          PROD
          *Do not edit the first line*

          To invoke another template for deployment, first change the "Folder" field to the folder that holds the template and click "Save" to save the changes, and then select the correct template from the "Template" field.
        owner: "${release.owner}"
        newReleaseTitle: "Deploy Production Code + ${release.title}"
        templateVariables:
        - type: xlrelease.StringVariable
          key: UserEmail
          label: User Email
          value: "${UserEmail}"
        createdReleaseId: "${ProdDeployment}"
      - name: Deployment of Sub-Template completed
        type: xlrelease.GateTask
        owner: "${release.owner}"
        locked: true
        dependencies:
        - type: xlrelease.Dependency
          targetId: "${ProdDeployment}"
      - name: Compare Production to UAT Artifacts
        type: xlrelease.SequentialGroup
        precondition: "releaseVariables['UseChecksum'] in (\"Checksum Based Solution\"\
          , \"Hashtag Based Solution\")"
        locked: true
        tasks:
        - name: Capture Prod Manifest
          type: xlrelease.ScriptTask
          owner: "${release.owner}"
          locked: true
          script: |-
            import sys

            SubTemplate_Release = releaseApi.getVariables(releaseVariables['ProdDeployment'])

            (releaseVariables["Prod_Deployed_ManifestInfo"]).clear()
            manifest_Variable = ""

            division = folderVariables['folder.Division']
            manifest_Variable = "Deployed_ManifestInfo"

            for item in filter(lambda k: (manifest_Variable == k.key), SubTemplate_Release):
                    (releaseVariables["Prod_Deployed_ManifestInfo"]).putAll(item.value)
        - name: Review Final Manifest
          type: xlrelease.ScriptTask
          owner: "${release.owner}"
          locked: true
          script: |-
            # Compare values in Manifest variable against the Current_Manifest variable so that we can
            # ensure that what was approved in UAT is going to Production

            releaseVariables['SignedOff_ManifestInfo']
            releaseVariables['Prod_Deployed_ManifestInfo']

            is_equal = releaseVariables['SignedOff_ManifestInfo'] == releaseVariables['Prod_Deployed_ManifestInfo']

            shared_items = {k: (releaseVariables['SignedOff_ManifestInfo'])[k] for k in releaseVariables['SignedOff_ManifestInfo'] if k in releaseVariables['Prod_Deployed_ManifestInfo'] and (releaseVariables['SignedOff_ManifestInfo'])[k] == (releaseVariables['Prod_Deployed_ManifestInfo'])[k]}

            print is_equal
            releaseVariables['Is_SignedOff_eq_Prod_Mainfest'] = is_equal
        - name: Email - Enterprise Release Management
          type: xlrelease.NotificationTask
          owner: "${release.owner}"
          precondition: "releaseVariables['Is_SignedOff_eq_Prod_Mainfest'] == False\
            \ and releaseVariables['UseEHDS'] == False"
          locked: true
          addresses:
          - ESMAppReleaseManagement@anthem.com
          subject: Production Manifest Validation
          body: |-
            Team,

            Production deployed Artifacts doesn't match with the SignedOff Artifacts. Please find the release information  below

            **ReleaseTitle:** [${release.title}](${release.url})

            **Release ID:** ${release.id}

            **Validation Match Result :** ${Is_SignedOff_eq_Prod_Mainfest}


            Thanks
            Digital.ai Release
          cc:
          - "${UserEmail}"
          from: ESMAppReleaseManagement@elevancehealth.com
          priority: High
      - name: Update Release Progress Variable
        type: xlrelease.ScriptTask
        owner: "${release.owner}"
        script: "releaseVariables['ReleaseProgress'] = \"PostValidationStarted\""
    - name: Go/No Go Decision
      type: xlrelease.SequentialGroup
      description: "Approved for Production, Emergency, Rollback"
      tasks:
      - name: Go No/Go Decision
        type: xlrelease.UserInputTask
        description: |-
          Please select an option below:

          Go! Prod Approved OR No Go: Emergency Fix OR  No Go: Rolback
        owner: "${release.owner}"
        taskRecoverOp: RUN_SCRIPT
        variables:
        - Go-NoGo
      - name: Application is Live - Email
        type: xlrelease.CreateReleaseTask
        description: |-
          Email Notification - Prod is live
          *Do not edit the first line*

          Email Prod is live
        precondition: "releaseVariables['Go-NoGo'] == 'Prod Approved'"
        newReleaseTitle: "Application is Live Email ${release.title}"
        templateVariables:
        - type: xlrelease.StringVariable
          key: FixVersion
          label: Fix Version
          value: "${FixVersion}"
        - type: xlrelease.StringVariable
          key: UserEmail
          value: "${UserEmail}"
        createdReleaseId: "${Email-Notification-Live}"
      - name: Emergency
        type: xlrelease.SequentialGroup
        precondition: "releaseVariables['Go-NoGo']=='Emergency Fix'"
        tasks:
        - name: Emergency Template
          type: xlrelease.CreateReleaseTask
          description: |-
            PROD
            *Do not edit the first line*

            If Production isn't working as expected and it can be fixed in implementation window use Emergency fix process
          owner: "${release.owner}"
          taskRecoverOp: SKIP_TASK
          newReleaseTitle: "Emergency Fix ${release.title}"
          createdReleaseId: "${EmgReleaseID}"
        - name: Add Emergency Tag
          type: xlrelease.ScriptTask
          script: |-
            release.tags.add('emergency')
            releaseApi.updateRelease(release)

            # Update progress indicator for weekend reporting

            releaseVariables['ReleaseProgress'] = "PostValidationStartedEmergency"
        - name: Gate for Emergency to be Completed
          type: xlrelease.GateTask
          description: |-
            This task is only required when an Emg Template has been used in the workflow.
            This task will wait for the Emergency template to be completed

            Update the Emergency Email template with the correct email you want to use and the correct folder.
          owner: "${release.owner}"
          precondition: "releaseVariables['Go-NoGo']=='Emergency Fix'"
          taskFailureHandlerEnabled: true
          taskRecoverOp: SKIP_TASK
          locked: true
          conditions:
          - name: Emergency Completed
            type: xlrelease.GateCondition
          dependencies:
          - type: xlrelease.Dependency
            targetId: "${EmgReleaseID}"
        - name: Application is Live Email (Emergency)
          type: xlrelease.CreateReleaseTask
          description: |-
            Email Notification - Prod is live Emergency
            *Do not edit the first line*

            Email that Emergency fix has been applied
          owner: "${release.owner}"
          newReleaseTitle: "Application is Live Email (Emergency) ${release.title}"
          templateVariables:
          - type: xlrelease.StringVariable
            key: UserEmail
            value: "${UserEmail}"
          createdReleaseId: "${Email-Notification-Live}"
        - name: "Get Sys ID, Priority, Inc from Emg template"
          type: xlrelease.ScriptTask
          script: |-
            import sys

            SubTemplate_Release = releaseApi.getVariables(releaseVariables['EmgReleaseID'])

            for item in filter(lambda k: ("Emg_CR_Sys_ID" == k.key), SubTemplate_Release):
                    releaseVariables["Emg_CR_Sys_ID"] = item.value
                    print releaseVariables["Emg_CR_Sys_ID"]

            for item in filter(lambda k: ("Emg-Change-Number" == k.key), SubTemplate_Release):
                    releaseVariables["Emg-Change-Number"] = item.value
                    print releaseVariables["Emg-Change-Number"]

            for item in filter(lambda k: ("Priority" == k.key), SubTemplate_Release):
                    releaseVariables["Priority"] = item.value
                    print releaseVariables["Priority"]

            for item in filter(lambda k: ("INC-Number" == k.key), SubTemplate_Release):
                    releaseVariables["INC-Number"] = item.value
                    print releaseVariables["INC-Number"]

            for item in filter(lambda k: ("Incident-Sys-ID" == k.key), SubTemplate_Release):
                    releaseVariables["Incident-Sys-ID"] = item.value
                    print releaseVariables["Incident-Sys-ID"]

            #sys.exit(1)
        - name: Update Final Manifest from Emergency
          type: xlrelease.ScriptTask
          script: |-
            # get manifest info from Subtemplate
            SubTemplate_Release = releaseApi.getVariables(releaseVariables['ProdDeployment'])
            (releaseVariables["microservice_manifest"]).clear()
            manifest_Variable = "Deployed_ManifestInfo"

            for item in filter(lambda k: (manifest_Variable == k.key), SubTemplate_Release):
              if item.value:
                (releaseVariables["microservice_manifest"]).putAll(item.value)

            # create a copy of the SignedOff_ManifestInfo to merge with microservice_manifest
            dictResult = releaseVariables["Prod_Deployed_ManifestInfo"]

            # update the results with the microservice_manifest info
            dictResult.update(releaseVariables["microservice_manifest"])
            releaseVariables["Prod_Deployed_ManifestInfo"] = dictResult
        - name: Update Release Progress Variable To Weekend Activities Completed -
            Emergency
          type: xlrelease.ScriptTask
          script: |-
            # Update progress indicator for weekend reporting

            releaseVariables['ReleaseProgress'] = "ScheduledWeekendActivitiesCompletedEmergency"
      - name: Rollback
        type: xlrelease.SequentialGroup
        precondition: "releaseVariables['Go-NoGo'] == 'Rollback'"
        tasks:
        - name: Rollback Template
          type: xlrelease.CreateReleaseTask
          description: |-
            PROD
            *Do not edit the first line*

            Business Manager Approve or Reject Prod Verification
          owner: "${release.owner}"
          taskRecoverOp: SKIP_TASK
          newReleaseTitle: "Rollback ${release.title}"
          createdReleaseId: "${Rollback-Competed}"
        - name: Add Backout Tag
          type: xlrelease.ScriptTask
          script: |-
            release.tags.add('backout')
            releaseApi.updateRelease(release)

            # Update progress indicator for weekend reporting

            releaseVariables['ReleaseProgress'] = "PostValidationStartedBackout"
        - name: Production Rollback Complete
          type: xlrelease.GateTask
          description: Production Rollback is successful
          owner: "${release.owner}"
          taskRecoverOp: SKIP_TASK
          locked: true
          conditions:
          - name: Rollback Completed
            type: xlrelease.GateCondition
          dependencies:
          - type: xlrelease.Dependency
            targetId: "${Rollback-Competed}"
        - name: Application is Live Email (Rollback)
          type: xlrelease.CreateReleaseTask
          description: |-
            Email Notification - Prod is live Rollback
            *Do not edit the first line*

            Email rollback is completed in Prod.
          owner: "${release.owner}"
          newReleaseTitle: "Rollback Completed email ${release.title}"
          templateVariables:
          - type: xlrelease.StringVariable
            key: UserEmail
            value: "${UserEmail}"
        - name: Update Final Manifest from Rollback
          type: xlrelease.ScriptTask
          script: |-
            # get manifest info from Subtemplate
            SubTemplate_Release = releaseApi.getVariables(releaseVariables['ProdDeployment'])
            (releaseVariables["microservice_manifest"]).clear()
            manifest_Variable = "Deployed_ManifestInfo"

            for item in filter(lambda k: (manifest_Variable == k.key), SubTemplate_Release):
              if item.value:
                (releaseVariables["microservice_manifest"]).putAll(item.value)

            # create a copy of the SignedOff_ManifestInfo to merge with microservice_manifest
            dictResult = releaseVariables["Prod_Deployed_ManifestInfo"]

            # update the results with the microservice_manifest info
            dictResult.update(releaseVariables["microservice_manifest"])
            releaseVariables["Prod_Deployed_ManifestInfo"] = dictResult
        - name: Update Release Progress Variable To Weekend Activities Completed -
            Rollback
          type: xlrelease.ScriptTask
          script: |-
            # Update progress indicator for weekend reporting

            releaseVariables['ReleaseProgress'] = "ScheduledWeekendActivitiesCompletedBackout"
    - name: Update Release Progress Variable To Weekend Activities Completed
      type: xlrelease.ScriptTask
      precondition: "releaseVariables['ReleaseProgress'] != \"ScheduledWeekendActivitiesCompletedBackout\"\
        \ or releaseVariables['ReleaseProgress'] != \"ScheduledWeekendActivitiesCompletedEmergency\""
      script: |-
        # Update progress indicator for weekend reporting

        releaseVariables['ReleaseProgress'] = "ScheduledWeekendActivitiesCompleted"
    color: '#dd4b39'
  - phase: Disaster Recovery
    tasks:
    - name: Deploy
      type: xlrelease.SequentialGroup
      tasks:
      - name: Select Microservices
        type: xlrelease.UserInputTask
        description: Please enter the required information below.
        owner: "${release.owner}"
        precondition: "releaseVariables['Microservice_Flag'] == True and releaseVariables['DR_Deploy']\
          \ == \"Yes\""
        variables:
        - multi_selected_deployments
      - name: Call Deployment Sub-Template
        type: xlrelease.CreateReleaseTask
        description: |-
          DR
          *Do not edit the first line*

          To invoke another template for deployment, first change the "Folder" field to the folder that holds the template and click "Save" to save the changes, and then select the correct template from the "Template" field.
        owner: "${release.owner}"
        precondition: "releaseVariables['DR_Deploy'] == \"Yes\""
        newReleaseTitle: "Deploy Disaster Recovery Code + ${release.title}"
        templateVariables:
        - type: xlrelease.StringVariable
          key: UserEmail
          label: User Email
          value: "${UserEmail}"
        createdReleaseId: "${DRDeployment}"
      - name: Deployment of Sub-Template completed
        type: xlrelease.GateTask
        owner: "${release.owner}"
        precondition: "releaseVariables['DR_Deploy'] == \"Yes\""
        locked: true
        dependencies:
        - type: xlrelease.Dependency
          targetId: "${DRDeployment}"
    - name: Validate Disaster Recovery Deployment
      type: xlrelease.UserInputTask
      description: |-
        Disaster Recovery Deployment was successful or unsuccessful

        If unsuccessful this phase will restart

        If successful this will move to the next phase
      owner: "${release.owner}"
      precondition: "releaseVariables['DR_Deploy'] == \"Yes\""
      variables:
      - Validate-DR
    - name: Restart Phase if Validation Fails
      type: xlrelease.ScriptTask
      precondition: "releaseVariables['DR_Deploy'] == \"Yes\" and releaseVariables['Validate-DR']\
        \ == 'Validation Failed'"
      script: |-
        from com.xebialabs.xlrelease.repository import PhaseVersion
        release = getCurrentRelease()
        DRPhaseTitle = getCurrentPhase().title  # Change as needed
        firstDRPhaseTaskTitle = 'Select Microservices' # Change as needed
        DRPhase = phaseApi.searchPhasesByTitle(DRPhaseTitle, release.id)[-1]
        firstDRTask = taskApi.searchTasksByTitle(firstDRPhaseTaskTitle, DRPhase.title, release.id)[-1]
        releaseApi.restartPhase(release, DRPhase, firstDRTask, PhaseVersion.LATEST, True)
    color: '#FFAB00'
  - phase: Post Production Review
    tasks:
    - name: JIRA-Issues Status Validation-(GB Only)
      type: xlrelease.SequentialGroup
      precondition: "folderVariables['folder.Division'] == \"GBD\" and releaseVariables[\"\
        UseChecksum\"] in (\"Checksum Based Solution\", \"Hashtag Based Solution\"\
        )"
      tasks:
      - name: Get JIRA for Issues - Not in Closed Status
        type: jira.Query
        username: "${global.ermjira.username}"
        query: "\"APM Number\" ~ ${APM} and fixVersion in (${FixVersion}) AND (issuetype\
          \ in (\"Story\") or (issuetype in (Defect) and \"Defect Detected In\" in\
          \ (PRODUCTION,\"PRODUCTION - Warranty\"))) and status not in (closed)"
        owner: "${release.owner}"
        variableMapping:
          pythonScript.password: "${global.ermjira.password}"
          pythonScript.issues: "${Get-JIRA-Content-NotClosed}"
      - name: Validate JIRA Issues
        type: xlrelease.ScriptTask
        owner: "${release.owner}"
        failureHandler: |-
          from java.util import Calendar, Date
          import time

          # Get the parent block for current script task
          parenttask = getCurrentTask().container

          # Use calendar to increment the time
          cal = Calendar.getInstance()
          cal.setTime(parenttask.startDate)
          cal.add(Calendar.DAY_OF_WEEK, 1)

          (releaseVariables["Get-JIRA-Content-NotClosed"]).clear()

          # Create a new task from that parenttask as the next task
          newtask = taskApi.copyTask(parenttask.id, phase.id, len(phase.getTasks())-3)

          # Set the newtask to the new time and title
          newtask.setScheduledStartDate(cal.getTime())
          newtask.title = parenttask.title

          # Update the new task
          taskApi.updateTask(newtask)
          taskApi.skipTask(getCurrentTask().getId(), "Skipped task from failure handler.")
        taskFailureHandlerEnabled: true
        taskRecoverOp: RUN_SCRIPT
        script: |-
          import sys

          if len(releaseVariables['Get-JIRA-Content-NotClosed']) != 0:
              sys.exit(1)
          else:
              print "All JIRA Issues of the Fix Version : ${FixVersion} are Closed."
    - name: Offline ServiceNow Change Request Closed
      type: xlrelease.Task
      description: Change Request is closed
      owner: "${release.owner}"
      flagStatus: ATTENTION_NEEDED
      flagComment: Task 'Offline ServiceNow Change Request Closed' in Phase 'Post
        Production Review' has been replaced by a manual task. The task of type 'servicenow.PollingCheckStatus'
        could not be found because of a missing plugin.
      precondition: "releaseVariables[\"BlueGreen\"] == \"Yes\""
      failureHandler: |-
        if (releaseVariables['attempt'] < 3):
          releaseVariables['attempt'] = releaseVariables['attempt'] + 1
          taskApi.retryTask(getCurrentTask().getId(), 'Retrying task from failure handler.')
        else:
          taskApi.skipTask(getCurrentTask().getId(), 'Skipped task from failure handler.')
          releaseVariables['attempt'] = 1
      taskRecoverOp: RUN_SCRIPT
      variableMapping:
        pythonScript.ticket: "${Change_Number_SN_Off}"
        pythonScript.status: "${State}"
        pythonScript.password: "${global.snow.password}"
        pythonScript.data: "${Change_Request_Data_SN_Off}"
      locked: true
    - name: ServiceNow Change Request Closed
      type: xlrelease.Task
      description: Change Request is closed
      owner: "${release.owner}"
      flagStatus: ATTENTION_NEEDED
      flagComment: Task 'ServiceNow Change Request Closed' in Phase 'Post Production
        Review' has been replaced by a manual task. The task of type 'servicenow.PollingCheckStatus'
        could not be found because of a missing plugin.
      failureHandler: |-
        if (releaseVariables['attempt'] < 3):
          releaseVariables['attempt'] = releaseVariables['attempt'] + 1
          taskApi.retryTask(getCurrentTask().getId(), 'Retrying task from failure handler.')
        else:
          taskApi.skipTask(getCurrentTask().getId(), 'Skipped task from failure handler.')
          releaseVariables['attempt'] = 1
      taskRecoverOp: RUN_SCRIPT
      variableMapping:
        pythonScript.status: "${State}"
        pythonScript.data: "${Change_Request_Data_SN}"
        pythonScript.password: "${global.snow.password}"
        pythonScript.ticket: "${Change_Number_SN}"
      locked: true
    - name: ServiceNow Emergency Change Request Closed
      type: xlrelease.Task
      description: Change Request is closed
      owner: "${release.owner}"
      flagStatus: ATTENTION_NEEDED
      flagComment: Task 'ServiceNow Emergency Change Request Closed' in Phase 'Post
        Production Review' has been replaced by a manual task. The task of type 'servicenow.PollingCheckStatus'
        could not be found because of a missing plugin.
      precondition: "releaseVariables['Go-NoGo']=='Emergency Fix'"
      failureHandler: |-
        if (releaseVariables['attempt'] < 3):
          releaseVariables['attempt'] = releaseVariables['attempt'] + 1
          taskApi.retryTask(getCurrentTask().getId(), 'Retrying task from failure handler.')
        else:
          taskApi.skipTask(getCurrentTask().getId(), 'Skipped task from failure handler.')
          releaseVariables['attempt'] = 1
      taskRecoverOp: RUN_SCRIPT
      variableMapping:
        pythonScript.status: "${Emg-Change-State}"
        pythonScript.data: "${Emg-Change-Request-Key}"
        pythonScript.password: "${global.snow.password}"
        pythonScript.ticket: "${Emg-Change-Number}"
      locked: true
    - name: Update Final Values for Reporting
      type: xlrelease.ScriptTask
      locked: true
      script: |-
        # Pull data from the closed change request for SOD reporting
        package = releaseVariables["Change_Request_Data_SN"]
        releaseVariables["Planned_Start_Date_SN_Final"] = package.get("start_date")
        releaseVariables["Deploy_Tool_Final"] = package.get("u_deployment_tool")
        releaseVariables["Other_Tool"] = package.get("u_provide_deployment_tool")
        approvingmanager = package.get("u_approving_it_manager")

        # Format IT Manager to remove formatting data
        x=approvingmanager.strip('{}')
        y=x.replace(':',',')
        z=y.split(',')
        w=z[1:3]
        u=''.join(w)
        v=u.replace(' ',', ')
        m=v.strip('""')
        releaseVariables["approving_it_manager"] = m

        # Check to see if Other was selected as one of the deployment tools.  If so, replace with provide deployment tool field
        if "Other" in releaseVariables["Deploy_Tool_Final"]:
          sOth = releaseVariables["Deploy_Tool_Final"]
          newVal = sOth.replace("Other", releaseVariables["Other_Tool"])
          releaseVariables["Deploy_Tool_Final"] = newVal

        # Pull SOD data from Non GBD Template based deployments
        if folderVariables['folder.Division'] != "GBD" and releaseVariables["UseChecksum"] in ("Checksum Based Solution", "Hashtag Based Solution"):
          # Loop through manifest information, extracting to a list and adding the SOD variable into the localList
          for index, (k, val) in enumerate(releaseVariables["Prod_Deployed_ManifestInfo"].items()):
            # Convert value from this key into list
            localval = str(val)
            localval = localval.strip('{}')
            #localval = localval.strip('""')
            localval = localval.replace(':',',')
            print (str(localval))
            locallist = localval.split(',')
            print ("locallist",str(len(locallist)), locallist, " /n")
            # Loop through locallist until you find the entry "sod"
            localList = []
            bGetNext = False
            for i, j in enumerate(locallist):
              print("Index=",i,"value=", j)
              if bGetNext == True:
                print ("inside if bGetNext loop")
                l = j.strip('""')
                print str(l)
                localList.append(l)
                releaseVariables["SOD"].append(l)
                bGetNext = False
                # Next entry goes into the local list
                if j == '"sod"' or j == 'sod':
                  bGetNext = True
                  print("inside if j == loop")
              else:
                if i == 4:
                  bGetNext = True

        # Pull value from SOD list and update the deployed code version variables
        delimiter = ', '
        localSOD = delimiter.join(releaseVariables["SOD"])
        if localSOD == "":
          localSOD = " "
        print (localSOD)
        releaseVariables["Deployed_Code_Version"] = localSOD
    color: '#999999'
  variables:
  - type: xlrelease.StringVariable
    key: RollbackPackageID
    showOnReleaseStart: false
    label: Rollback ID
  - type: xlrelease.StringVariable
    key: Rollback-Competed
    showOnReleaseStart: false
    label: Rollback Completed
  - type: xlrelease.StringVariable
    key: JIRAURL
    showOnReleaseStart: false
    label: URL for JIRA in this Environment - for email to track content and defects
    description: URL for JIRA in this Environment - for email to track content and
      defects
    value: https://jira.elevancehealth.com/browse/
  - type: xlrelease.StringVariable
    key: FixVersion
    label: Jira Fix Version
    description: e.g. yyyy-mm-dd
  - type: xlrelease.StringVariable
    key: JiraSystems
    requiresValue: false
    showOnReleaseStart: false
    label: Values from the JIRA System List
    description: "For a specific value from the System List, please use the following\
      \ format:  \"APM # ~ Application Name ~ Application Status\""
    value: ALL
  - type: xlrelease.StringVariable
    key: Release_Date
    requiresValue: false
    showOnReleaseStart: false
    label: Release Date Formatted from JIRA Fix Version
    description: Release Date Formatted from JIRA Fix Version
  - type: xlrelease.StringVariable
    key: JIRAContentQuery
    showOnReleaseStart: false
    label: Enterprise Standard Content Query
    description: Enterprise Standard Content Query
    value: "\"APM Number\" ~ ${APM} and fixVersion in (${FixVersion}) AND (issuetype\
      \ in (\"Story\") or (issuetype in (Defect) and \"Defect Detected In\" in (PRODUCTION,\
      \ \"PRODUCTION - Warranty\", \"PRODUCTION - Dark Release\")) or (issuetype in\
      \ (Defect) and \"Defect Detected In\" in (\"TEST - System Integration Test (SIT)\"\
      , \"TEST - User Acceptance Test (UAT)\", \"TEST - Performance\", \"TEST - Continuous\
      \ Integration\", \"STAGE / PRE-PRODUCTION\", \"TEST - End-to-End (E2E)\") and\
      \ \"Production Impact Indicator\" in (\"Moving to Production - Impact\", \"\
      Moving to Production - No Impact\", \"Moving to Production - Not Active/Live\"\
      )) and status not in (closed, Abandoned))"
    multiline: true
  - type: xlrelease.MapStringStringVariable
    key: Get-JIRA-Content
    requiresValue: false
    showOnReleaseStart: false
    label: Get JIRA Content
  - type: xlrelease.MapStringStringVariable
    key: Get-JIRA-Content_Chgs
    requiresValue: false
    showOnReleaseStart: false
    label: Get JIRA Content Chgs
    description: JIRA Content Chgs
  - type: xlrelease.MapStringStringVariable
    key: additionToScope
    requiresValue: false
    showOnReleaseStart: false
    label: Additional Stories Add to Scope After Last Deployment
    description: Additional Stories Add to Scope After Last Deployment
  - type: xlrelease.MapStringStringVariable
    key: removeFromScope
    requiresValue: false
    showOnReleaseStart: false
    label: Stories Removed from Scope After Last Deployment
    description: Stories Removed from Scope After Last Deployment
  - type: xlrelease.StringVariable
    key: JIRADefectQuery
    showOnReleaseStart: false
    label: Enterprise Standard Defect Query
    description: Enterprise Standard Defect Query
    value: "Issuetype = Defect AND category = \"SW Dev\" AND  (labels not in (Conversion_CPC)\
      \ OR labels is EMPTY) AND (\"Vendor Defect\" = No OR \"Vendor Defect\" is EMPTY)\
      \ AND \"APM Number\" ~ ${APM} AND affectedVersion in (${FixVersion}) AND status\
      \ not in (Closed, Cancelled, Abandoned) AND Severity not in (Medium, Low) AND\
      \ \"Defect Detected In\" in (\"TEST - System Integration Test (SIT)\", \"TEST\
      \ - User Acceptance Test (UAT)\", \"TEST - Performance\", \"TEST - Continuous\
      \ Integration\", \"STAGE / PRE-PRODUCTION\", \"TEST - End-to-End (E2E)\") OR\
      \ Issuetype = Defect AND category = \"SW Dev\" AND \"APM Number\" ~ ${APM} AND\
      \ (labels not in (Conversion_CPC) OR labels is EMPTY) AND (\"Vendor Defect\"\
      \ = No OR \"Vendor Defect\" is EMPTY) AND \"Release date (Affects)\" in (${Release_Date})\
      \ AND status not in (Closed, Cancelled, Abandoned) AND Severity not in (Medium,\
      \ Low) AND \"Defect Detected In\" in (\"TEST - System Integration Test (SIT)\"\
      , \"TEST - User Acceptance Test (UAT)\", \"TEST - Performance\", \"TEST - Continuous\
      \ Integration\", \"STAGE / PRE-PRODUCTION\", \"TEST - End-to-End (E2E)\")"
    multiline: true
  - type: xlrelease.MapStringStringVariable
    key: OpenDefects
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: EmailText
    requiresValue: false
    showOnReleaseStart: false
    label: Email Body of JIRA Content and Defect Queries
    description: Email Body of JIRA Content and Defect Queries
    multiline: true
  - type: xlrelease.StringVariable
    key: Go-NoGo
    showOnReleaseStart: false
    label: Results of Go or No Go vote?
    description: Prod Approved/Emg Fix/Rollback
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - Prod Approved
      - Emergency Fix
      - Rollback
  - type: xlrelease.StringVariable
    key: RollbackID
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: Passed-Testing
    showOnReleaseStart: false
    label: All testing complete
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "No"
  - type: xlrelease.StringVariable
    key: Change_Number_SN
    requiresValue: false
    showOnReleaseStart: false
    label: Number
  - type: xlrelease.StringVariable
    key: Change-Request-Sys-ID
    showOnReleaseStart: false
    label: Change Request Sys ID
  - type: xlrelease.MapStringStringVariable
    key: Change_Request_Data_SN
    requiresValue: false
    showOnReleaseStart: false
    label: Change Request Field Data
  - type: xlrelease.StringVariable
    key: State
    requiresValue: false
    showOnReleaseStart: false
    label: Change State
  - type: xlrelease.StringVariable
    key: Email-Notification-SIT
    showOnReleaseStart: false
    label: Email Notification - SIT
  - type: xlrelease.StringVariable
    key: Email-Notification-UAT
    showOnReleaseStart: false
    label: Email Notification - UAT
  - type: xlrelease.StringVariable
    key: Email-Notification-Prod
    showOnReleaseStart: false
    label: Email Notification - Prod
  - type: xlrelease.StringVariable
    key: Email-Notification-Ready-For-Release
    showOnReleaseStart: false
    label: Email Notification - Ready For Release
  - type: xlrelease.StringVariable
    key: Email-Notification-Prod-Business
    showOnReleaseStart: false
    label: Email Notification Prod Business
  - type: xlrelease.StringVariable
    key: Email-Notification-Live
    showOnReleaseStart: false
    label: Email Notification app is live
  - type: xlrelease.StringVariable
    key: EmgReleaseID
    requiresValue: false
    showOnReleaseStart: false
    label: Emg Release ID
  - type: xlrelease.StringVariable
    key: Impacts-Internet-Facing-Application
    showOnReleaseStart: false
    label: Security Scanning Required?
    description: Is an application security scan required for this release?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "No"
  - type: xlrelease.StringVariable
    key: Validate-SIT
    showOnReleaseStart: false
    label: Validate SIT
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - Validation Passed
      - Validation Failed
    value: Validation Passed
  - type: xlrelease.StringVariable
    key: Validate-UAT
    showOnReleaseStart: false
    label: Validate UAT
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - Validation Passed
      - Validation Failed
    value: Validation Passed
  - type: xlrelease.StringVariable
    key: Defect Release ID
    showOnReleaseStart: false
    label: Defect Release ID
  - type: xlrelease.StringVariable
    key: Dependencies_Identified
    showOnReleaseStart: false
    label: Dependencies Identified?
    description: Dependencies Identified
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "Yes"
  - type: xlrelease.MapStringStringVariable
    key: Blue-Exchange-Data
    showOnReleaseStart: false
    label: Blue Exchange Data
  - type: xlrelease.BooleanVariable
    key: Blue-Exchange
    showOnReleaseStart: false
    label: Blue Exchange Impact?
  - type: xlrelease.MapStringStringVariable
    key: Non-Tech-Change-Data
    showOnReleaseStart: false
    label: Non Tech Change Data
  - type: xlrelease.BooleanVariable
    key: Non-Tech-Change
    showOnReleaseStart: false
    label: Non Tech Change
  - type: xlrelease.MapStringStringVariable
    key: Sec-Cert-Data
    showOnReleaseStart: false
    label: Security Cert Data
  - type: xlrelease.BooleanVariable
    key: Sec-Cert
    showOnReleaseStart: false
    label: Security Cert
  - type: xlrelease.StringVariable
    key: ReleaseReady
    showOnReleaseStart: false
    label: Release Ready
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "No"
  - type: xlrelease.MapStringStringVariable
    key: Release-Gov-Data
    showOnReleaseStart: false
    label: Potential Collision
  - type: xlrelease.StringVariable
    key: Collision-Count
    showOnReleaseStart: false
    label: Potential Release Collision
    description: Potential Release Collision
    value: "0"
  - type: xlrelease.BooleanVariable
    key: Release-Ready
    showOnReleaseStart: false
    label: Does this change meet the definition of Release Ready?
  - type: xlrelease.BooleanVariable
    key: CodeFrozen-Flag
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: Emergency-Approved
    showOnReleaseStart: false
    label: Emergency Approved
  - type: xlrelease.MapStringStringVariable
    key: TechOnly-Data
    showOnReleaseStart: false
    label: Technical Only Data
  - type: xlrelease.StringVariable
    key: BXImpact
    showOnReleaseStart: false
    label: Blue Exchange Impact?
  - type: xlrelease.BooleanVariable
    key: BXImpact-Flag
    showOnReleaseStart: false
  - type: xlrelease.MapStringStringVariable
    key: BXData
    showOnReleaseStart: false
  - type: xlrelease.MapStringStringVariable
    key: SecurityScanData
    showOnReleaseStart: false
    label: Data for Check for passing security scan
  - type: xlrelease.StringVariable
    key: PendSecurityScan
    showOnReleaseStart: false
    label: Check to see if change is pended for security scan issue
    value: Not Required
  - type: xlrelease.BooleanVariable
    key: ScanningFlag
    showOnReleaseStart: false
  - type: xlrelease.BooleanVariable
    key: Dependency-Flag
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: TechOnly
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: SLTApprovalDefect
    showOnReleaseStart: false
    label: SLT Approval Received?
    description: SLT Approval Received?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "No"
  - type: xlrelease.StringVariable
    key: DefectsIntoProd
    showOnReleaseStart: false
    label: Critical and High Priority Defects Moving to Production?
    description: Critical and High Priority Defects Moving to Production?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "No"
  - type: xlrelease.StringVariable
    key: Emg-Change-Number
    showOnReleaseStart: false
    label: Emergency Change Number
  - type: xlrelease.StringVariable
    key: Emg_CR_Sys_ID
    requiresValue: false
    showOnReleaseStart: false
    label: Emergency Change Request Sys ID
  - type: xlrelease.MapStringStringVariable
    key: Emg-Change-Request-Key
    requiresValue: false
    showOnReleaseStart: false
    label: Emergency Change Request Key
  - type: xlrelease.StringVariable
    key: Emg-Change-State
    requiresValue: false
    showOnReleaseStart: false
    label: Emergency Change State
  - type: xlrelease.StringVariable
    key: EmgGoNoGo
    showOnReleaseStart: false
    label: Emergency Go/NoGo
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - Emergency Approved
      - Rollback Emergency Change
      - Continue Fixing
  - type: xlrelease.StringVariable
    key: InternetFacing-SN
    showOnReleaseStart: false
    label: Is this an internet facing application?
  - type: xlrelease.BooleanVariable
    key: Content_Chg_Flag
    requiresValue: false
    showOnReleaseStart: false
    description: Has content changed since last run?
    value: true
  - type: xlrelease.StringVariable
    key: UserEmail
    requiresValue: false
    showOnReleaseStart: false
    label: Release Owners Email
  - type: xlrelease.StringVariable
    key: Restart-SIT-Phase
    requiresValue: false
    showOnReleaseStart: false
    label: Do you have more components to deploy to SIT?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "No"
  - type: xlrelease.StringVariable
    key: Restart-UAT-Phase
    requiresValue: false
    showOnReleaseStart: false
    label: Do you have more components to deploy to UAT?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "No"
  - type: xlrelease.StringVariable
    key: UseChecksum
    showOnReleaseStart: false
    label: Unique Code Identifier
    description: Unique Code Identifier
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - Checksum Based Solution
      - Hashtag Based Solution
      - Non Checksum Based Solution
  - type: xlrelease.StringVariable
    key: ExecuteSIT
    showOnReleaseStart: false
    label: Are you utilizing the SIT Phase in this release?
    description: Are you utilizing the SIT Phase in this release?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
  - type: xlrelease.StringVariable
    key: PerfTestReq
    showOnReleaseStart: false
    label: Is Performance Testing Required for this Release?
    description: Is Performance Testing Required for this Release?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
  - type: xlrelease.StringVariable
    key: Validate-Perf
    requiresValue: false
    showOnReleaseStart: false
    label: Validate Performance Testing Deployment
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - Validation Passed
      - Validation Failed
    value: Validation Passed
  - type: xlrelease.StringVariable
    key: UserName
    requiresValue: false
    showOnReleaseStart: false
    label: User Name Email
  - type: xlrelease.StringVariable
    key: DevTaskUpdate
    requiresValue: false
    showOnReleaseStart: false
    label: Dev Task Update
  - type: xlrelease.StringVariable
    key: PlanningRestarted
    requiresValue: false
    showOnReleaseStart: false
    label: PlanningRestarted
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "No"
      - "Yes"
    value: "No"
  - type: xlrelease.StringVariable
    key: SITDeployment
    requiresValue: false
    showOnReleaseStart: false
    label: SIT Deployment Completed
  - type: xlrelease.StringVariable
    key: UATDeployment
    requiresValue: false
    showOnReleaseStart: false
    label: UAT Deployment Completed
  - type: xlrelease.StringVariable
    key: ProdDeployment
    requiresValue: false
    showOnReleaseStart: false
    label: Prod Deployment Completed
  - type: xlrelease.StringVariable
    key: PerformanceDeployment
    requiresValue: false
    showOnReleaseStart: false
    label: Performance Deployment Completed
  - type: xlrelease.StringVariable
    key: Category_SN
    showOnReleaseStart: false
    label: Category SN
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - Applications Software
      - Business Service
      - Software
      - System Software
      - Cloud
    value: Applications Software
  - type: xlrelease.StringVariable
    key: Initiating_Business_Division_SN
    showOnReleaseStart: false
    label: Initiating Business Division
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - Enterprise
      - government_gbd
  - type: xlrelease.StringVariable
    key: Environment_SN
    showOnReleaseStart: false
    label: Environment
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - u_production
    value: u_production
  - type: xlrelease.StringVariable
    key: Reason_SN
    showOnReleaseStart: false
    label: Reason
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - Administrative (APG only)
      - u_application
      - u_infrastructure
    value: u_application
  - type: xlrelease.StringVariable
    key: Change_Requires_Outage_SN
    showOnReleaseStart: false
    label: Change Requires Outage
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "yes"
      - "no"
    value: "no"
  - type: xlrelease.StringVariable
    key: Planned_Start_Date_SN
    showOnReleaseStart: false
    label: Planned Implementation Start Date
    description: YYYY-MM-DD HH:MM:SS
  - type: xlrelease.StringVariable
    key: Planned_End_Date_SN
    showOnReleaseStart: false
    label: Planned Implementation End Date
    description: YYYY-MM-DD HH:MM:SS
  - type: xlrelease.StringVariable
    key: Planned_Outage_End_SN
    requiresValue: false
    showOnReleaseStart: false
    label: Planned Outage End
    description: YYYY-MM-DD HH:MM:SS
  - type: xlrelease.StringVariable
    key: Planned_Outage_Start_SN
    requiresValue: false
    showOnReleaseStart: false
    label: Planned Outage Start
    description: YYYY-MM-DD HH:MM:SS
  - type: xlrelease.StringVariable
    key: Assignment_Group_SN
    requiresValue: false
    showOnReleaseStart: false
    label: Assignment Group
    description: Must match ServiceNow group exactly
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - ENTERPRISE RELEASE MANAGEMENT
      - GBD-CM-Change-ReleaseMgmtTeam
      - CONSUMER MOBILE APP SUPPORT
      - IAS Config Support
      - Member WCS Support
      - GBD-Vantage-Deployer
      - Provider Finder Devops Systems Support
      - GBD-CM-Member Portals
      - GBD MOBILE APP SUPPORT
  - type: xlrelease.StringVariable
    key: Configuration_Item_SN
    showOnReleaseStart: false
    label: Configuration Item
  - type: xlrelease.StringVariable
    key: Release_Manager_SN
    showOnReleaseStart: false
    label: Release Manager
    description: Must be in the Release Manager role in ServiceNow - Enter US Domain
      ID
  - type: xlrelease.StringVariable
    key: ConfigurationID
    requiresValue: false
    showOnReleaseStart: false
    label: ConfigurationID
  - type: xlrelease.StringVariable
    key: APM Sys ID
    requiresValue: false
    showOnReleaseStart: false
    label: APM Sys ID
  - type: xlrelease.MapStringStringVariable
    key: APM_Data
    requiresValue: false
    showOnReleaseStart: false
    label: APM Data
  - type: xlrelease.StringVariable
    key: APM
    requiresValue: false
    showOnReleaseStart: false
    label: APM
  - type: xlrelease.MapStringStringVariable
    key: ImpApproval-Data
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: ImpApproval
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: Parent_Release_Pass_Back_ID
    requiresValue: false
    showOnReleaseStart: false
    label: Parent_Release_Pass_Back_ID
  - type: xlrelease.MapStringStringVariable
    key: Parent_Release_Pass_Back_Data
    requiresValue: false
    showOnReleaseStart: false
    label: Parent_Release_Pass_Back_Data
  - type: xlrelease.StringVariable
    key: Deployment_Tool_SN
    showOnReleaseStart: false
    label: Deployment Tool
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - Bamboo
      - UDeploy Urban Code Deploy
      - AWS Tool set
      - Open Shift Jenkins
      - Kubernetes
  - type: xlrelease.StringVariable
    key: BlueGreen
    showOnReleaseStart: false
    label: Blue/Green Environment
    description: "Yes, if deploying using a Blue/Green strategy"
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
  - type: xlrelease.StringVariable
    key: Change_Number_SN_Off
    requiresValue: false
    showOnReleaseStart: false
    label: Offline Prod Change Number
  - type: xlrelease.StringVariable
    key: Environment_SN_Off
    showOnReleaseStart: false
    label: Offline Production Environment
    value: u_offlineproduction
  - type: xlrelease.StringVariable
    key: Category_SN_Off
    showOnReleaseStart: false
    label: Category
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - Applications Software
      - Business Service
      - Software
      - System Software
      - Cloud
    value: Applications Software
  - type: xlrelease.StringVariable
    key: Initiating_Business_Division_SN_Off
    showOnReleaseStart: false
    label: Initiating Business Division
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - Enterprise
      - government_gbd
  - type: xlrelease.StringVariable
    key: Reason_SN_Off
    showOnReleaseStart: false
    label: Reason
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - Administrative (AGP only)
      - Reports
      - u_application
      - u_infrastructure
    value: u_application
  - type: xlrelease.StringVariable
    key: Change_Requires_Outage_SN_Off
    showOnReleaseStart: false
    label: Change Requires Outage
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "yes"
      - "no"
    value: "no"
  - type: xlrelease.StringVariable
    key: Planned_Start_Date_SN_Off
    showOnReleaseStart: false
    label: Planned Implementation Start Date
    description: YYYY-MM-DD HH:MM:SS
  - type: xlrelease.StringVariable
    key: Planned_End_Date_SN_Off
    showOnReleaseStart: false
    label: Planned Implementation End Date
    description: YYYY-MM-DD HH:MM:SS
  - type: xlrelease.StringVariable
    key: Planned_Outage_End_SN_Off
    requiresValue: false
    showOnReleaseStart: false
    label: Planned Outage End
    description: YYYY-MM-DD HH:MM:SS
  - type: xlrelease.StringVariable
    key: Planned_Outage_Start_SN_Off
    requiresValue: false
    showOnReleaseStart: false
    label: Planned Outage Start
    description: YYYY-MM-DD HH:MM:SS
  - type: xlrelease.StringVariable
    key: Assignment_Group_SN_Off
    requiresValue: false
    showOnReleaseStart: false
    label: Assignment Group
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - ENTERPRISE RELEASE MANAGEMENT
      - GBD-CM-Change-ReleaseMgmtTeam
      - CONSUMER MOBILE APP SUPPORT
      - GBD-Vantage-Deployer
      - IAS Config Support
      - Member WCS Support
      - Provider Finder Devops Systems Support
      - GBD MOBILE APP SUPPORT
      - GBD-CM-Member Portals
  - type: xlrelease.StringVariable
    key: Configuration_Item_SN_Off
    showOnReleaseStart: false
    label: Configuration Item
  - type: xlrelease.StringVariable
    key: Release_Manager_SN_Off
    showOnReleaseStart: false
    label: Release Manager
    description: Must be in the Release Manager role in ServiceNow - Enter US Domain
      ID
  - type: xlrelease.StringVariable
    key: Deployment_Tool_SN_Off
    showOnReleaseStart: false
    label: Deployment Tool
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - Bamboo
      - UDeploy Urban Code Deploy
      - AWS Tool set
      - Open Shift Jenkins
      - Kurbenetes
  - type: xlrelease.MapStringStringVariable
    key: Change_Request_Data_SN_Off
    requiresValue: false
    showOnReleaseStart: false
    label: Change Request Data SN Off
  - type: xlrelease.StringVariable
    key: Change-Request-Sys-ID-Off
    requiresValue: false
    showOnReleaseStart: false
    label: Change Request Sys ID Off
  - type: xlrelease.StringVariable
    key: MoveDefectsIntoProd
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: Offline_Checkout_IT_Email
    requiresValue: false
    showOnReleaseStart: false
    label: Offline Checkout IT Email
  - type: xlrelease.StringVariable
    key: Offline_Business_Email
    requiresValue: false
    showOnReleaseStart: false
    label: Offline Business Email
  - type: xlrelease.StringVariable
    key: TechOnlyOff
    requiresValue: false
    showOnReleaseStart: false
    label: Tech Only Off
  - type: xlrelease.StringVariable
    key: ChangeInitiator-Off
    showOnReleaseStart: false
    label: Change Initiator
    description: Must have Change creation role in ServiceNow - Enter US Domain ID
  - type: xlrelease.StringVariable
    key: ChangeInitiator
    showOnReleaseStart: false
    label: Change Initiator
    description: Must have Change creation role in ServiceNow - Enter US Domain ID
  - type: xlrelease.StringVariable
    key: DR_Deploy
    showOnReleaseStart: false
    label: Deploy to DR?
    description: "Deploy updated code to DR, after prod deployment has received business\
      \ signoff"
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "No"
  - type: xlrelease.StringVariable
    key: Validate-DR
    requiresValue: false
    showOnReleaseStart: false
    label: Validate Disaster Recovery
    description: DR Validation Passed?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - Validation Passed
      - Validation Failed
    value: Validation Passed
  - type: xlrelease.StringVariable
    key: DRDeployment
    requiresValue: false
    showOnReleaseStart: false
    label: DR Deployment Complete
  - type: xlrelease.StringVariable
    key: TotalCount
    requiresValue: false
    showOnReleaseStart: false
    value: "0"
  - type: xlrelease.StringVariable
    key: Scanning-InProgress
    requiresValue: false
    showOnReleaseStart: false
    value: "0"
  - type: xlrelease.StringVariable
    key: Scanning-Certified
    requiresValue: false
    showOnReleaseStart: false
    value: "0"
  - type: xlrelease.StringVariable
    key: Scanning-NotCertified
    requiresValue: false
    showOnReleaseStart: false
    value: "0"
  - type: xlrelease.MapStringStringVariable
    key: Change_Request_UpdateVariables
    showOnReleaseStart: false
    label: Input Change Request Variables
    description: Change Request Variables
    value:
      u_has_change_been_peer_reviewed: "${PeerReviewed_SN}"
      work_notes: Updated mandatory fields by Digital.ai Automation
      implementation_plan: "${CHG_SP_Path}"
      u_verify_ac: "${CHG_verify_ac}"
      u_high_severity_defects: "${CHG_high_severity_defects}"
      u_pre_implementation_test_plan: "${CHG_SP_Path}"
      u_test_results: "${CHG_SP_Path}"
      u_cab_required_reason: "${CABReq_Reason}"
      u_does_change_directly_impact_call_center: "${CallCenterImpact_SN}"
      u_backout_plan_required: "${CHG_backout_plan_required}"
      u_impacts_gbd_apps: "${CHG_impacts_gbd_apps}"
      description: "${CHG_description}"
      u_prior_to_prod_impl: "${CHG_prior_to_prod_impl}"
      u_impacts_internet_facing_application: "${CHG_impacts_internet_facing_application}"
      u_des_the_change_impact_shared_it_functions: "${ImpactSharedServices_SN}"
      u_impacting_division_s_or_area_s: "${Impacting_Division_Final}"
      u_can_backout_plan_be_executed: "${CHG_u_can_backout_plan_be_executed}"
      backout_plan: "${CHG_SP_Path}"
      u_impacts_for_bcbsa_mandates: "${CHG_impacts_for_bcbsa_mandates}"
      cab_required: "${CHG_cabReq}"
      u_impact_roles: "${CHG_impact_roles}"
      u_deployment_tool: "${Deploy_Tool_Final}"
      u_will_this_change_introduces_new: "${CHG_will_this_change_introduces_new}"
      parent: "${CHG_Parent}"
      u_impacts_network: "${CHG_impacts_network}"
      chg_model: "${Model}"
      u_technical_change_only: "${CHG_technical_change_only}"
      u_impacts_daily_int: "${CHG_impacts_daily_int}"
  - type: xlrelease.StringVariable
    key: CHG_impacts_gbd_apps
    showOnReleaseStart: false
    label: Impacts GB Applications?
    description: Impacts Government Health Business Applications?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
  - type: xlrelease.StringVariable
    key: CHG_prior_to_prod_impl
    showOnReleaseStart: false
    label: Please confirm if non-prod data/accounts will be removed prior to prod
      release
    description: Please confirm if non-prod data/accounts will be removed prior to
      prod release
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - Not Applicable
      - "Yes"
      - "No"
    value: Not Applicable
  - type: xlrelease.StringVariable
    key: CHG_impacts_internet_facing_application
    showOnReleaseStart: false
    label: Impacts Internet Facing Application?
    description: Impacts Internet Facing Application?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
  - type: xlrelease.StringVariable
    key: CHG_impact_roles
    showOnReleaseStart: false
    label: Will change alter or impact any roles?
    description: "Will change alter or impact any roles, groups, permissions or entitlement\
      \ types?"
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "No"
  - type: xlrelease.StringVariable
    key: CHG_impacts_network
    showOnReleaseStart: false
    label: Impacts Network?
    description: Impacts Network?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "No"
  - type: xlrelease.StringVariable
    key: CHG_description
    showOnReleaseStart: false
    label: Change Description
    description: Change Description
    multiline: true
  - type: xlrelease.StringVariable
    key: CHG_technical_change_only
    showOnReleaseStart: false
    label: Technical Change Only
    description: Technical Change Only
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
  - type: xlrelease.StringVariable
    key: CHG_high_severity_defects
    showOnReleaseStart: false
    label: Moving Defects into Production?
    description: Are any High Severity Defects (Sev 1 or 2) moving into Production?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
  - type: xlrelease.StringVariable
    key: CHG_verify_ac
    showOnReleaseStart: false
    label: Impacts data used in SailPoint Automated Qtrly Access Review/WISP compliance?
    description: Impacts data used in SailPoint Automated Qtrly Access Review/WISP
      compliance?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "No"
  - type: xlrelease.StringVariable
    key: CHG_will_this_change_introduces_new
    showOnReleaseStart: false
    label: "New, modify or remove Internet accessible systems?"
    description: "New, modify or remove Internet accessible systems?"
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "No"
  - type: xlrelease.StringVariable
    key: CHG_backout_plan_required
    showOnReleaseStart: false
    label: Backout Plan Required?
    description: Backout Plan Required?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "Yes"
  - type: xlrelease.StringVariable
    key: CHG_impacts_daily_int
    showOnReleaseStart: false
    label: Impacts daily integration with Identity Access Management (Avatar & SailPoint)?
    description: Impacts daily integration with Identity Access Management (Avatar
      & SailPoint)?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "No"
  - type: xlrelease.StringVariable
    key: CHG_post_validation_plan
    showOnReleaseStart: false
    label: Post Validation Plan
    description: Post Validation Plan
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - Yes IT Only
      - Yes IT and Business
      - "No"
    value: Yes IT and Business
  - type: xlrelease.StringVariable
    key: CHG_impacts_for_bcbsa_mandates
    showOnReleaseStart: false
    label: Impacts BCBSA Mandates?
    description: Impacts BCBSA Mandates?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
  - type: xlrelease.StringVariable
    key: CHG_u_can_backout_plan_be_executed
    showOnReleaseStart: false
    label: Can Backout Plan be executed within the planned change window?
    description: Can Backout Plan be executed within the planned change window?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "Yes"
  - type: xlrelease.MapStringStringVariable
    key: Initial_Manifest
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: Environment
    showOnReleaseStart: false
    label: Environment Deploying To
    description: Environment Deploying To
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - UAT
      - Staging
      - Pre-Production
      - Performance Testing
    value: UAT
  - type: xlrelease.StringVariable
    key: ReadyToDeploy
    showOnReleaseStart: false
    label: Is the code ready to be deployed?
    description: Is the code ready to be deployed?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "Yes"
  - type: xlrelease.StringVariable
    key: Planned_Start_Date_SN_Final
    showOnReleaseStart: false
    label: Planned Start Date SN Final
  - type: xlrelease.BooleanVariable
    key: NoScanRequired
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.MapStringStringVariable
    key: Change_Request_Data_SN_Final
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: Planned_End_Date_SN_Final
    showOnReleaseStart: false
    label: Planned End Date SN Final
    description: Planned End Date SN Final
  - type: xlrelease.IntegerVariable
    key: attempt
    requiresValue: false
    showOnReleaseStart: false
    value: 1
  - type: xlrelease.StringVariable
    key: manifestEmailList
    requiresValue: false
    showOnReleaseStart: false
    description: List of Final Manifest Set
    value: Print out list of Final_Manifest Set Variable
  - type: xlrelease.BooleanVariable
    key: firstTestDeploy
    requiresValue: false
    showOnReleaseStart: false
    value: true
  - type: xlrelease.StringVariable
    key: ReleaseProgress
    requiresValue: false
    showOnReleaseStart: false
    value: Releasehasnotstarted
  - type: xlrelease.MapStringStringVariable
    key: SignedOff_ManifestInfo
    showOnReleaseStart: false
  - type: xlrelease.MapStringStringVariable
    key: Prod_Deployed_ManifestInfo
    showOnReleaseStart: false
  - type: xlrelease.BooleanVariable
    key: Is_SignedOff_eq_Prod_Mainfest
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: RelGovernance
    requiresValue: false
    showOnReleaseStart: false
    label: Release Governance
  - type: xlrelease.StringVariable
    key: u_high_severity_defects
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: SNURL
    showOnReleaseStart: false
    label: URL To ServiceNow for this Environment
    value: https://elevancehealth.service-now.com/change_request.do?sys_id=
  - type: xlrelease.StringVariable
    key: releaseWeekTag
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: BITNumber
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: chgReason
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.MapStringStringVariable
    key: Change_Request_UpdateVariables_Off
    showOnReleaseStart: false
    label: Change Request UpdateVariables Offline
    value:
      u_impacting_division_s_or_area_s: "${Impacting_Division_Final_Off}"
      u_prior_to_prod_impl: "${CHG_prior_to_prod_impl_Off}"
      work_notes: Updated mandatory fields by Digital.ai Automation
      backout_plan: "${CHG_SP_Path_Off}"
      u_technical_change_only: "${CHG_technical_change_only_Off}"
      u_impacts_for_bcbsa_mandates: "${CHG_impacts_for_bcbsa_mandates_Off}"
      u_high_severity_defects: "${CHG_high_severity_defects_Off}"
      description: "${CHG_description_Off}"
      u_verify_ac: "${CHG_verify_ac_Off}"
      u_impacts_daily_int: "${CHG_impacts_daily_int_Off}"
      u_des_the_change_impact_shared_it_functions: "${ImpactSharedServices_SN_Off}"
      u_has_change_been_peer_reviewed: "${PeerReviewed_SN_Off}"
      u_impacts_network: "${CHG_impacts_network_Off}"
      u_deployment_tool: "${Deploy_Tool_Final_Off}"
      u_impacts_gbd_apps: "${CHG_impacts_gbd_apps_Off}"
      u_impact_roles: "${CHG_impact_roles_Off}"
      u_pre_implementation_test_plan: "${CHG_SP_Path_Off}"
      u_backout_plan_required: "${CHG_backout_plan_required_Off}"
      u_test_results: "${CHG_SP_Path_Off}"
      implementation_plan: "${CHG_SP_Path_Off}"
      u_can_backout_plan_be_executed: "${CHG_u_can_backout_plan_be_executed_Off}"
      u_does_change_directly_impact_call_center: "${CallCenterImpact_SN_Off}"
      u_impacts_internet_facing_application: "${CHG_impacts_internet_facing_application_Off}"
      parent: "${CHG_Parent}"
      chg_model: "${Model}"
      u_will_this_change_introduces_new: "${CHG_will_this_change_introduces_new_Off}"
  - type: xlrelease.StringVariable
    key: CHG_impacts_gbd_apps_Off
    showOnReleaseStart: false
    label: Impacts GB Applications?
    description: Impacts Government Health Business Applications?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
  - type: xlrelease.StringVariable
    key: CHG_prior_to_prod_impl_Off
    showOnReleaseStart: false
    label: Please confirm if non-prod data/accounts will be removed prior to prod
      release
    description: Please confirm if non-prod data/accounts will be removed prior to
      prod release
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "No"
      - "Yes"
      - Not Applicable
    value: Not Applicable
  - type: xlrelease.StringVariable
    key: CHG_impacts_internet_facing_application_Off
    showOnReleaseStart: false
    label: Impacts Internet Facing Application?
    description: Impacts Internet Facing Application?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "No"
      - "Yes"
  - type: xlrelease.StringVariable
    key: CHG_impact_roles_Off
    showOnReleaseStart: false
    label: Will change alter or impact any roles?
    description: "Will change alter or impact any roles, groups, permissions or entitlement\
      \ types?"
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "No"
  - type: xlrelease.StringVariable
    key: CHG_description_Off
    showOnReleaseStart: false
    label: Change Description
    description: Change Description
    multiline: true
  - type: xlrelease.StringVariable
    key: CHG_technical_change_only_Off
    showOnReleaseStart: false
    label: Technical Change Only
    description: Technical Change Only
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "No"
      - "Yes"
  - type: xlrelease.StringVariable
    key: CHG_high_severity_defects_Off
    showOnReleaseStart: false
    label: Moving Defects into Production?
    description: Are any High Severity Defects (Sev 1 or 2) moving into Production?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "No"
      - "Yes"
  - type: xlrelease.StringVariable
    key: CHG_verify_ac_Off
    showOnReleaseStart: false
    label: Impacts data used in SailPoint Automated Qtrly Access Review/WISP compliance?
    description: Impacts data used in SailPoint Automated Qtrly Access Review/WISP
      compliance?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "No"
  - type: xlrelease.StringVariable
    key: CHG_will_this_change_introduces_new_Off
    showOnReleaseStart: false
    label: "New, modify or remove Internet accessible systems?"
    description: "New, modify or remove Internet accessible systems?"
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "No"
  - type: xlrelease.StringVariable
    key: CHG_backout_plan_required_Off
    showOnReleaseStart: false
    label: Backout Plan Required?
    description: Backout Plan Required?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "Yes"
  - type: xlrelease.StringVariable
    key: CHG_impacts_daily_int_Off
    showOnReleaseStart: false
    label: Impacts daily integration with Identity Access Management (Avatar & SailPoint)?
    description: Impacts daily integration with Identity Access Management (Avatar
      & SailPoint)?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "No"
  - type: xlrelease.StringVariable
    key: CHG_impacts_for_bcbsa_mandates_Off
    showOnReleaseStart: false
    label: Impacts BCBSA Mandates?
    description: Impacts BCBSA Mandates?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
  - type: xlrelease.StringVariable
    key: CHG_u_can_backout_plan_be_executed_Off
    showOnReleaseStart: false
    label: Can Backout Plan be executed within the planned change window?
    description: Can Backout Plan be executed within the planned change window?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "Yes"
  - type: xlrelease.StringVariable
    key: CHG_impacts_network_Off
    showOnReleaseStart: false
    label: Impacts Network?
    description: Impacts Network?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "No"
  - type: xlrelease.StringVariable
    key: CHG_post_validation_plan_Off
    showOnReleaseStart: false
    label: Post Validation Plan
    description: Post Validation Plan
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - Yes IT Only
      - Yes IT and Business
      - "No"
    value: Yes IT and Business
  - type: xlrelease.IntegerVariable
    key: nbrImpTasks
    showOnReleaseStart: false
    label: Number of Additional Implementation Tasks to Be Created (Service Now will
      create one)
    description: Number Implementation Tasks to Be Created
  - type: xlrelease.IntegerVariable
    key: nbrImpTasks_Off
    showOnReleaseStart: false
    label: Number of Additional Implementation Tasks to Be Created (Service Now will
      create one)
    description: Number Implementation Tasks to Be Created
  - type: xlrelease.StringVariable
    key: taskDescrip
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: taskDescrip_Off
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: testPlan
    showOnReleaseStart: false
    label: Pre-Implementation Test Plan
    description: Pre-Implementation Test Plan
    value: Please attach supporting documentation or provide appropriate details.
    multiline: true
  - type: xlrelease.StringVariable
    key: testPlan_Off
    showOnReleaseStart: false
    label: Pre-Implementation Test Plan
    description: Pre-Implementation Test Plan
    value: Please attach supporting documentation or provide appropriate details.
    multiline: true
  - type: xlrelease.StringVariable
    key: testResults
    showOnReleaseStart: false
    label: Test Results
    description: Test Results
    value: Please attach supporting documentation or provide appropriate details.
    multiline: true
  - type: xlrelease.StringVariable
    key: testResults_Off
    showOnReleaseStart: false
    label: Test Results
    description: Test Results
    value: Please attach supporting documentation or provide appropriate details.
    multiline: true
  - type: xlrelease.StringVariable
    key: impPlan
    showOnReleaseStart: false
    label: Implementation Plan
    description: Implementation Plan
    value: Please attach supporting documentation or provide appropriate details.
    multiline: true
  - type: xlrelease.StringVariable
    key: impPlan_Off
    showOnReleaseStart: false
    label: Implementation Plan
    description: Implementation Plan
    value: Please attach supporting documentation or provide appropriate details.
    multiline: true
  - type: xlrelease.StringVariable
    key: backoutPlan
    showOnReleaseStart: false
    label: Backout Plan
    description: Backout Plan
    value: Please attach supporting documentation or provide appropriate details.
    multiline: true
  - type: xlrelease.StringVariable
    key: backoutPlan_Off
    showOnReleaseStart: false
    label: Backout Plan
    description: Backout Plan
    value: Please attach supporting documentation or provide appropriate details.
    multiline: true
  - type: xlrelease.StringVariable
    key: JIRAReadyForReleaseQuery
    showOnReleaseStart: false
    label: Ready for Release
    value: "\"APM Number\" ~ ${APM} and fixVersion in (${FixVersion}) AND (issuetype\
      \ in (\"Story\") or (issuetype in (Defect) and \"Defect Detected In\" in (PRODUCTION,\
      \ \"PRODUCTION - Warranty\", \"PRODUCTION - Dark Release\")) or (issuetype in\
      \ (Defect) and \"Defect Detected In\" in (\"TEST - System Integration Test (SIT)\"\
      , \"TEST - User Acceptance Test (UAT)\", \"TEST - Performance\", \"TEST - Continuous\
      \ Integration\", \"STAGE / PRE-PRODUCTION\", \"TEST - End-to-End (E2E)\") and\
      \ \"Production Impact Indicator\" in (\"Moving to Production - Impact\", \"\
      Moving to Production - No Impact\", \"Moving to Production - Not Active/Live\"\
      )) and status not in (\"Ready For Release\"))"
    multiline: true
  - type: xlrelease.MapStringStringVariable
    key: ReadyForRelease
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: emailMissingScans
    showOnReleaseStart: false
    value: "Note:  If your release is failing the Release Ready evaluation due to\
      \ missing certification of security scans, please check your change ticket to\
      \ ensure the scanning tickets (beginning with RITM) are on the Requested Items\
      \ tab.  If they are missing, hit the \"New\" button to add the scanning request\
      \ manually, and then re-run the Release Ready evaluation in Digital.ai Release."
    multiline: true
  - type: xlrelease.StringVariable
    key: scanEmailNote
    requiresValue: false
    showOnReleaseStart: false
    multiline: true
  - type: xlrelease.StringVariable
    key: CHG_SP_Path
    requiresValue: false
    showOnReleaseStart: false
    value: "https://collaborate.wellpoint.com/teams/ITCM/GBD%20Auto%20Deployment%20Change%20Documents/Forms/AllItems.aspx?id=/teams/ITCM/GBD%20Auto%20Deployment%20Change%20Documents/${DAIR_AppPath}/${Change_Number_SN}"
  - type: xlrelease.StringVariable
    key: CHG_Impacted_BU_SN
    showOnReleaseStart: false
    label: Impacting Division or Area
    description: Impacted Business Unit
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - All
      - Aspire
      - Carelon Behavioral Health
      - Carelon Global Solutions
      - Carelon Medical Benefits Mgmt
      - Carelon RX
      - CareMore
      - Clinical Solutions
      - Commercial and Speciality
      - Corporate Shared Services
      - DeCare
      - Digital Experience & Product Engineering
      - Diversified Business Group
      - Facets
      - Government (GBD)
      - HealthCore Inc.
      - Information Technology
      - Simply HealthCare
  - type: xlrelease.StringVariable
    key: CHG_Impacted_BU_SN_Off
    showOnReleaseStart: false
    label: Impacting Division or Area
    description: Impacted Business Unit
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - All
      - Aspire
      - Carelon Behavioral Health
      - Carelon Global Solutions
      - Carelon Medical Benefits Mgmt
      - Carelon RX
      - CareMore
      - Clinical Solutions
      - Commercial and Specialty
      - Corporate Shared Services
      - DeCare
      - Digital Experience & Product Engineering
      - Diversified Business Group
      - Facets
      - Government (GBD)
      - HealthCore Inc.
      - Information Technology
      - Simply HealthCare
  - type: xlrelease.BooleanVariable
    key: JiraError
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: Priority
    requiresValue: false
    showOnReleaseStart: false
    label: Priority
    description: Priority of Inc Comes from ERM Emg Template
  - type: xlrelease.StringVariable
    key: INC-Number
    requiresValue: false
    showOnReleaseStart: false
    label: INC-Number
    description: Comes from ERM Emg Template
  - type: xlrelease.BooleanVariable
    key: Chg_on_hold
    showOnReleaseStart: false
    label: Is the change on Hold by CM?
    description: Is the change on Hold by CM?
  - type: xlrelease.IntegerVariable
    key: RR_Count
    showOnReleaseStart: false
    label: Number of times this release has gone through the Release Ready phase
    description: Number of times this release has gone through the Release Ready phase
  - type: xlrelease.MapStringStringVariable
    key: chg_pend_data
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: chg_pend_ct
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CM_Admin_Email
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: chg_Short_Description
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: rr_email_note
    requiresValue: false
    showOnReleaseStart: false
    multiline: true
  - type: xlrelease.StringVariable
    key: Incident-Sys-ID
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.MapStringStringVariable
    key: Incident_Data
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CHG_assignment_group-SysId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CHG_assignment_group-SysId_Off
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CHG_assigned_to-SysId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CHG_assigned_to-SysId_Off
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CHG_assigned_to
    showOnReleaseStart: false
    label: Request By or Initiator Backup
    description: Request By or Initiator Backup
    value: N/A
  - type: xlrelease.StringVariable
    key: CHG_assignment_group
    showOnReleaseStart: false
    label: Request By or Initiator Backup Support Group
    description: Must Match Service Now Group Name EXACTLY
    value: N/A
  - type: xlrelease.StringVariable
    key: CHG_assigned_to_Off
    showOnReleaseStart: false
    label: Request By or Initiator Backup
    description: Request By or Initiator Backup
    value: N/A
  - type: xlrelease.StringVariable
    key: CHG_assignment_group_Off
    showOnReleaseStart: false
    label: Request By or Initiator Backup Support Group
    description: Must Match Service Now Group Name EXACTLY
    value: N/A
  - type: xlrelease.StringVariable
    key: DAIR_AppPath
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: rr_work_note
    showOnReleaseStart: false
    value: Updated Governance field by Digital.ai Automation for Release Ready evaluation.
    multiline: true
  - type: xlrelease.StringVariable
    key: CHG_orig_governance
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: chg_Governance_Update_Val
    requiresValue: false
    showOnReleaseStart: false
    value: Not release ready
  - type: xlrelease.StringVariable
    key: CHG_cabReq
    showOnReleaseStart: false
    label: CAB Required?
    description: CAB Required?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "true"
      - "false"
    value: "false"
  - type: xlrelease.StringVariable
    key: CHG_SP_Path_Off
    requiresValue: false
    showOnReleaseStart: false
    value: "https://collaborate.wellpoint.com/teams/ITCM/GBD%20Auto%20Deployment%20Change%20Documents/Forms/AllItems.aspx?id=/teams/ITCM/GBD%20Auto%20Deployment%20Change%20Documents/${DAIR_AppPath}/${Change_Number_SN_Off}"
  - type: xlrelease.StringVariable
    key: CHG_Parent
    requiresValue: false
    showOnReleaseStart: false
    description: Used for relating offline and production changes
  - type: xlrelease.IntegerVariable
    key: chg_Governance_Update
    requiresValue: false
    showOnReleaseStart: false
    value: 1
  - type: xlrelease.MapStringStringVariable
    key: governanceList
    requiresValue: false
    showOnReleaseStart: false
    value:
      Successful remediation: "4"
      Potential release collision: "2"
      Release Ready: "5"
      Not release ready: "1"
  - type: xlrelease.MapStringStringVariable
    key: Change_Request_UpdateGovernance
    requiresValue: false
    showOnReleaseStart: false
    value:
      work_notes: "${rr_work_note}"
      u_release_governance: "${chg_Governance_Update}"
  - type: xlrelease.StringVariable
    key: ERM_Mailbox
    requiresValue: false
    showOnReleaseStart: false
    description: Shared ERM Mailbox for sending and being copied on Release Ready
      emails
    value: ESMAppReleaseManagement@elevancehealth.com
  - type: xlrelease.StringVariable
    key: CABReq_Reason
    requiresValue: false
    showOnReleaseStart: false
    description: Reason that the production change must go to CAB in using Blue Green
      Strategy
  - type: xlrelease.BooleanVariable
    key: off_tasksCreated
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.BooleanVariable
    key: tasksCreated
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.MapStringStringVariable
    key: Change_Request_UpdateVariables_Ent
    showOnReleaseStart: false
    label: Input Change Request Variables for Enterprise Changes
    value:
      u_test_results: "${testResults}"
      u_has_change_been_peer_reviewed: "${PeerReviewed_SN}"
      work_notes: Updated mandatory fields by Digital.ai Automation
      u_verify_ac: "${CHG_verify_ac}"
      u_high_severity_defects: "${CHG_high_severity_defects}"
      u_does_change_directly_impact_call_center: "${CallCenterImpact_SN}"
      u_backout_plan_required: "${CHG_backout_plan_required}"
      u_impacts_gbd_apps: "${CHG_impacts_gbd_apps}"
      description: "${CHG_description}"
      u_prior_to_prod_impl: "${CHG_prior_to_prod_impl}"
      u_impacts_internet_facing_application: "${CHG_impacts_internet_facing_application}"
      u_des_the_change_impact_shared_it_functions: "${ImpactSharedServices_SN}"
      u_impacting_division_s_or_area_s: "${Impacting_Division_Final}"
      u_pre_implementation_test_plan: "${testPlan}"
      u_can_backout_plan_be_executed: "${CHG_u_can_backout_plan_be_executed}"
      implementation_plan: "${impPlan}"
      u_impacts_for_bcbsa_mandates: "${CHG_impacts_for_bcbsa_mandates}"
      backout_plan: "${backoutPlan}"
      cab_required: "${CHG_cabReq}"
      u_impact_roles: "${CHG_impact_roles}"
      u_deployment_tool: "${Deploy_Tool_Final}"
      parent: "${CHG_Parent}"
      u_impacts_network: "${CHG_impacts_network}"
      chg_model: "${Model}"
      u_technical_change_only: "${CHG_technical_change_only}"
      u_impacts_daily_int: "${CHG_impacts_daily_int}"
  - type: xlrelease.MapStringStringVariable
    key: Change_Request_UpdateVariables_Off_Ent
    showOnReleaseStart: false
    label: Change Request UpdateVariables Offline
    value:
      u_impacting_division_s_or_area_s: "${Impacting_Division_Final_Off}"
      u_test_results: "${testResults_Off}"
      u_prior_to_prod_impl: "${CHG_prior_to_prod_impl_Off}"
      implementation_plan: "${impPlan_Off}"
      work_notes: Updated mandatory fields by Digital.ai Automation
      u_pre_implementation_test_plan: "${testPlan_Off}"
      u_technical_change_only: "${CHG_technical_change_only_Off}"
      u_impacts_for_bcbsa_mandates: "${CHG_impacts_for_bcbsa_mandates_Off}"
      u_high_severity_defects: "${CHG_high_severity_defects_Off}"
      description: "${CHG_description_Off}"
      u_verify_ac: "${CHG_verify_ac_Off}"
      backout_plan: "${backoutPlan_Off}"
      u_impacts_daily_int: "${CHG_impacts_daily_int_Off}"
      u_des_the_change_impact_shared_it_functions: "${ImpactSharedServices_SN_Off}"
      u_has_change_been_peer_reviewed: "${PeerReviewed_SN_Off}"
      u_impacts_network: "${CHG_impacts_network_Off}"
      u_deployment_tool: "${Deploy_Tool_Final_Off}"
      u_impacts_gbd_apps: "${CHG_impacts_gbd_apps_Off}"
      u_impact_roles: "${CHG_impact_roles_Off}"
      u_backout_plan_required: "${CHG_backout_plan_required_Off}"
      u_can_backout_plan_be_executed: "${CHG_u_can_backout_plan_be_executed_Off}"
      u_does_change_directly_impact_call_center: "${CallCenterImpact_SN_Off}"
      u_impacts_internet_facing_application: "${CHG_impacts_internet_facing_application_Off}"
      parent: "${CHG_Parent}"
      chg_model: "${Model}"
  - type: xlrelease.StringVariable
    key: ParentReleaseID
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: ParentReleaseName
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CyberArk-AppId
    showOnReleaseStart: false
    value: APP_GBD_AUTODEPLOY_NonProd
  - type: xlrelease.StringVariable
    key: CyberArk-ObjectName
    showOnReleaseStart: false
    value: us.ad.wellpoint.com-SRC_GBDDEVOPS_XLR
  - type: xlrelease.StringVariable
    key: CyberArk-Safe
    showOnReleaseStart: false
    value: SVC-GBD_AUTODEPLOY_NP_DEV
  - type: xlrelease.StringVariable
    key: CyberArk-Url
    showOnReleaseStart: false
    value: cp.cyberark.internal.das
  - type: xlrelease.StringVariable
    key: Bamboo_URL
    showOnReleaseStart: false
    value: https://bamboo.anthem.com
  - type: xlrelease.StringVariable
    key: BAM_BUILD_PLAN_SPV
    showOnReleaseStart: false
    value: GBDDEPLOY-GBDSPDV
  - type: xlrelease.StringVariable
    key: BAM_RUN_SPV_QString
    showOnReleaseStart: false
    value: "bamboo.xlr.snow.chg.number=${Change_Number_SN}&bamboo.xlr.release.folderpath=${DAIR_AppPath}"
  - type: xlrelease.MapStringStringVariable
    key: Get-JIRA-Content-NotClosed
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: DofW
    requiresValue: false
    showOnReleaseStart: false
    value: Day of Week for Planned Start Date
  - type: xlrelease.BooleanVariable
    key: SkipPend
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: rr_initial_email_note
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: PeerReviewed_SN
    showOnReleaseStart: false
    label: Has Change been peer reviewed?
    description: Has Change been peer reviewed?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
  - type: xlrelease.StringVariable
    key: PeerReviewed_SN_Off
    showOnReleaseStart: false
    label: Has Change been peer reviewed?
    description: Has Change been peer reviewed?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
  - type: xlrelease.StringVariable
    key: ImpactSharedServices_SN
    showOnReleaseStart: false
    label: Does change impact Shared IT Functions?
    description: Does change impact Shared IT Functions?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
  - type: xlrelease.StringVariable
    key: ImpactSharedServices_SN_Off
    showOnReleaseStart: false
    label: Does change impact Shared IT Functions?
    description: Does change impact Shared IT Functions?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
  - type: xlrelease.StringVariable
    key: CallCenterImpact_SN
    showOnReleaseStart: false
    label: Does change impact Call Center?
    description: Does change impact Call Center?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
  - type: xlrelease.StringVariable
    key: CallCenterImpact_SN_Off
    showOnReleaseStart: false
    label: Does change impact Call Center?
    description: Does change impact Call Center?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
  - type: xlrelease.StringVariable
    key: NoOpenDefects-Flag
    showOnReleaseStart: false
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "True"
      - "False"
      - Defects TBD
    value: Defects TBD
  - type: xlrelease.ListStringVariable
    key: Deployment_Tool_SN_Multi
    showOnReleaseStart: false
    label: Deployment Tool
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - Bamboo
      - UDeploy Urban Code Deploy
      - AWS Tool set
      - Open Shift Jenkins
      - Kubernetes
      - "Manual (Moving scripts, JAR, EAR, etc)"
      - Other
  - type: xlrelease.ListStringVariable
    key: Deployment_Tool_SN_Off_Multi
    showOnReleaseStart: false
    label: Deployment Tool
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - Bamboo
      - UDeploy Urban Code Deploy
      - AWS Tool set
      - Open Shift Jenkins
      - Kubernetes
      - "Manual (Moving scripts, JAR, EAR, etc)"
      - Other
  - type: xlrelease.ListStringVariable
    key: CHG_Impacted_BU_SN_Multi
    showOnReleaseStart: false
    label: Impacting Division or Area
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - All
      - Aspire
      - Carelon Behavioral Health
      - Carelon Global Solutions
      - Carelon Medical Benefits Mgmt
      - Carelon RX
      - CareMore
      - Clinical Solutions
      - Commercial and Speciality
      - Corporate Shared Services
      - DeCare
      - Digital Experience & Product Engineering
      - Diversified Business Group
      - Facets
      - Government (GBD)
      - HealthCore Inc.
      - Information Technology
      - Simply HealthCare
      - Other
      - SAN
  - type: xlrelease.ListStringVariable
    key: CHG_Impacted_BU_SN_Off_Multi
    showOnReleaseStart: false
    label: Impacting Division or Area
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - All
      - Aspire
      - Carelon Behavioral Health
      - Carelon Global Solutions
      - Carelong Medical Benefits Mgmt
      - Carelon RX
      - CareMore
      - Clinical Solutions
      - Commercial and Specialty
      - Corporate Shared Services
      - DeCare
      - Digital Experience & Product Engineering
      - Diversified Business Group
      - Facets
      - Government (GBD)
      - HealthCore Inc.
      - Information Technology
      - Simply HealthCare
      - Other
      - SAN
  - type: xlrelease.StringVariable
    key: Deploy_Tool_Final_Off
    requiresValue: false
    showOnReleaseStart: false
    label: Deployment Tool
  - type: xlrelease.StringVariable
    key: Deploy_Tool_Final
    requiresValue: false
    showOnReleaseStart: false
    label: Deployment Tool
  - type: xlrelease.StringVariable
    key: Impacting_Division_Final
    requiresValue: false
    showOnReleaseStart: false
    label: Impacting Division or Area
  - type: xlrelease.StringVariable
    key: Impacting_Division_Final_Off
    requiresValue: false
    showOnReleaseStart: false
    label: Impacting Division or Area
  - type: xlrelease.StringVariable
    key: Deployed_Code_Version
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: Other_Tool
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.ListStringVariable
    key: SOD
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.ListStringVariable
    key: multi_selected_deployments
    requiresValue: false
    showOnReleaseStart: false
    label: Microservices
    description: Select Microservices to be Deployed
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      variableMapping:
        values: "${microservice_list}"
  - type: xlrelease.BooleanVariable
    key: Microservice_Flag
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: rr_state
    requiresValue: false
    showOnReleaseStart: false
    label: State To Check for in SN Wait for Status Task in Release Ready
  - type: xlrelease.MapStringStringVariable
    key: prodChanges
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: displayChgInfo
    requiresValue: false
    showOnReleaseStart: false
    multiline: true
  - type: xlrelease.BooleanVariable
    key: Date_Flag
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.ListStringVariable
    key: deployed_microservices
    requiresValue: false
    showOnReleaseStart: false
    label: Microservices Deployed via UAT
  - type: xlrelease.ListStringVariable
    key: deployed_microservices_final
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.ListStringVariable
    key: microservice_list
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.ListStringVariable
    key: emer_template_name
    showOnReleaseStart: false
    value:
    - ERM Emergency
  - type: xlrelease.ListStringVariable
    key: rb_template_name
    showOnReleaseStart: false
    value:
    - ERM Rollback
  - type: xlrelease.StringVariable
    key: TemplateName
    showOnReleaseStart: false
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - ERM
      - ERM-Emergency
      - ERM-Rollback
      - ERM-Emergency-Standalone
      - ERM-Rollback-Standalone
    value: ERM
  - type: xlrelease.MapStringStringVariable
    key: microservice_manifest
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.IntegerVariable
    key: perfCount
    requiresValue: false
    showOnReleaseStart: false
    description: Number of times Performance Testing has been executed
  - type: xlrelease.IntegerVariable
    key: offlineCount
    requiresValue: false
    showOnReleaseStart: false
    description: Number of times Offline Production phase has been executed
  - type: xlrelease.IntegerVariable
    key: prodCount
    requiresValue: false
    showOnReleaseStart: false
    description: Number of times the production phase has been executed
  - type: xlrelease.ListStringVariable
    key: MicroserviceError
    requiresValue: false
    showOnReleaseStart: false
    value:
    - "True"
    - "False"
  - type: xlrelease.BooleanVariable
    key: MicroErr
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: Model
    requiresValue: false
    showOnReleaseStart: false
    label: Model
  - type: xlrelease.StringVariable
    key: updateRelDefaults
    label: Update Default Release Setup Data
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "No"
  - type: xlrelease.StringVariable
    key: updateChgDefaults
    label: Update Default Change Request Data
    description: Update Default Change Request Data
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "No"
  - type: xlrelease.BooleanVariable
    key: refreshChgDef
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: DEF_Category
    requiresValue: false
    showOnReleaseStart: false
    label: Category
    description: Category
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - Applications Software
      - Business Service
      - Software
      - System Software
      - Cloud
    value: Applications Software
  - type: xlrelease.StringVariable
    key: DEF_Inititating_Business_Division
    requiresValue: false
    showOnReleaseStart: false
    label: Initiating Business Division
    description: Initiating Business Division
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - Enterprise
      - government_gbd
  - type: xlrelease.StringVariable
    key: DEF_Reason
    requiresValue: false
    showOnReleaseStart: false
    label: Reason
    description: Reason
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - Administrative (AGP)
      - u_application
      - u_infrastructure
    value: u_application
  - type: xlrelease.StringVariable
    key: DEF_description
    requiresValue: false
    showOnReleaseStart: false
    label: Change Description
    description: Change Description
    multiline: true
  - type: xlrelease.StringVariable
    key: DEF_backout_plan_required
    requiresValue: false
    showOnReleaseStart: false
    label: Backout Plan Required?
    description: Backout Plan Required?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "Yes"
  - type: xlrelease.StringVariable
    key: DEF_testPlan
    requiresValue: false
    showOnReleaseStart: false
    label: Pre-Implementation Test Plan
    description: Pre-Implementation Test Plan
    value: Please attach supporting documentation or provide appropriate details.
    multiline: true
  - type: xlrelease.StringVariable
    key: DEF_PeerReviewed
    requiresValue: false
    showOnReleaseStart: false
    label: Has Change been peer reviewed?
    description: Has Change been peer reviewed?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
  - type: xlrelease.StringVariable
    key: DEF_testResults
    requiresValue: false
    showOnReleaseStart: false
    label: Test Results
    description: Test Results
    value: Please attach supporting documentation or provide appropriate details.
    multiline: true
  - type: xlrelease.StringVariable
    key: DEF_impPlan
    requiresValue: false
    showOnReleaseStart: false
    label: Implementation Plan
    description: Implementation Plan
    value: Please attach supporting documentation or provide appropriate details.
    multiline: true
  - type: xlrelease.StringVariable
    key: DEF_u_can_backout_plan_be_executed
    requiresValue: false
    showOnReleaseStart: false
    label: Can Backout Plan be executed within the planned change window?
    description: Can Backout Plan be executed within the planned change window?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "Yes"
  - type: xlrelease.StringVariable
    key: DEF_impacts_network
    requiresValue: false
    showOnReleaseStart: false
    label: Impacts Network?
    description: Impacts Network?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
  - type: xlrelease.StringVariable
    key: DEF_ImpactSharedServices
    requiresValue: false
    showOnReleaseStart: false
    label: Does change impact Shared IT Functions?
    description: Does change impact Shared IT Functions?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
  - type: xlrelease.StringVariable
    key: DEF_CallCenterImpact
    requiresValue: false
    showOnReleaseStart: false
    label: Does change impact Call Center?
    description: Does change impact Call Center?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
  - type: xlrelease.StringVariable
    key: DEF_impacts_for_bcbsa_mandates
    requiresValue: false
    showOnReleaseStart: false
    label: Impacts BCBSA Mandates?
    description: Impacts BCBSA Mandates?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
  - type: xlrelease.StringVariable
    key: DEF_impacts_internet_facing_application
    requiresValue: false
    showOnReleaseStart: false
    label: Impacts Internet Facing Application?
    description: Impacts Internet Facing Application?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
  - type: xlrelease.StringVariable
    key: DEF_prior_to_prod_impl
    requiresValue: false
    showOnReleaseStart: false
    label: Please confirm if non-prod data/accounts will be removed prior to prod       release
    description: Please confirm if non-prod data/accounts will be removed prior to
      prod       release
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - Not Applicable
      - "Yes"
      - "No"
    value: Not Applicable
  - type: xlrelease.ListStringVariable
    key: DEF_Impacted_BU_SN_Multi
    requiresValue: false
    showOnReleaseStart: false
    label: Impacting Division or Area
    description: Impacting Division or Area
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - All
      - Aspire
      - Carelon Behavioral Health
      - Carelon Global Solutions
      - Carelon Medical Benefits Mgmt
      - Carelon RX
      - CareMore
      - Clinical Solutions
      - Commercial and Specialty
      - Corporate Shared Services
      - DeCare
      - Digital Experience & Product Engineering
      - Diversified Business Group
      - Facets
      - Government (GBD)
      - HealthCore Inc.
      - Information Technology
      - Simply HealthCare
      - Other
      - SAN
  - type: xlrelease.StringVariable
    key: DEF_impact_roles
    requiresValue: false
    showOnReleaseStart: false
    label: Will change alter or impact any roles?
    description: Will change alter or impact any roles?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "No"
  - type: xlrelease.StringVariable
    key: DEF_verify_ac
    requiresValue: false
    showOnReleaseStart: false
    label: Impacts data used in SailPoint Automated Qtrly Access Review/WISP compliance?
    description: Impacts data used in SailPoint Automated Qtrly Access Review/WISP
      compliance?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "No"
  - type: xlrelease.StringVariable
    key: DEF_impacts_daily_int
    requiresValue: false
    showOnReleaseStart: false
    label: Impacts daily integration with Identity Access Management (Avatar & SailPoint)?
    description: Impacts daily integration with Identity Access Management (Avatar
      & SailPoint)?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "No"
  - type: xlrelease.StringVariable
    key: DEF_high_severity_defects
    requiresValue: false
    showOnReleaseStart: false
    label: Moving Defects into Production?
    description: Moving Defects into Production?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
  - type: xlrelease.ListStringVariable
    key: DEF_Deployment_Tool_SN_Multi
    requiresValue: false
    showOnReleaseStart: false
    label: Deployment Tool
    description: Deployment Tool
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - Bamboo
      - Udeploy Urban Code Deploy
      - AWS Tool set
      - Open Shift Jenkins
      - Kubernetes
      - "\"Manual (Moving scripts, JAR, EAR, etc)\""
      - Other
  - type: xlrelease.StringVariable
    key: DEF_Release_Manager
    requiresValue: false
    showOnReleaseStart: false
    label: Release Manager
    description: Must be in the Release Manager role in ServiceNow - Enter US Domain
      ID
  - type: xlrelease.StringVariable
    key: DEF_CHG_assigned_to
    requiresValue: false
    showOnReleaseStart: false
    label: Request By or Initiator Backup
    description: Enter US Domain ID
  - type: xlrelease.StringVariable
    key: DEF_CHG_assignment_group
    requiresValue: false
    showOnReleaseStart: false
    label: Request By or Initiator Backup Support Group
    description: Must Match Service Now Group Name EXACTLY
  - type: xlrelease.StringVariable
    key: DEF_CHG_will_this_change_introduces_new
    requiresValue: false
    showOnReleaseStart: false
    label: "New, modify or remove Internet accessible systems?"
    description: "New, modify or remove Internet accessible systems?"
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
    value: "No"
  - type: xlrelease.StringVariable
    key: DEF_backoutPlan
    requiresValue: false
    showOnReleaseStart: false
    label: Backout Plan
    description: Backout Plan
    value: Please attach supporting documentation or provide appropriate details.
    multiline: true
  - type: xlrelease.StringVariable
    key: DEF_CHG_u_can_backout_plan_be_executed
    requiresValue: false
    showOnReleaseStart: false
    label: Can Backout Plan be executed within the planned change window?
    description: Can Backout Plan be executed within the planned change window?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
  - type: xlrelease.StringVariable
    key: DEF_CHG_impacts_gbd_apps
    requiresValue: false
    showOnReleaseStart: false
    label: Impacts GB Applications?
    description: Impacts Government Health Business Applications?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "Yes"
      - "No"
  - type: xlrelease.BooleanVariable
    key: refreshRelDef
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: State_Off
    requiresValue: false
    showOnReleaseStart: false
    label: State of Offline Change Reqeust
    description: State of Offline Change Reqeust
  - type: xlrelease.StringVariable
    key: changeJSON
    requiresValue: false
    showOnReleaseStart: false
    description: JSON Output for EHDS Change Tasks
    value: "{\"releaseId\": \"\",\"applabId\": \"\",\"ticketDetails\": [{\"ticketNumber\"\
      : \"\",\"ticketStatus\": \"\",\"releaseDate\": \"\",\"environment\": \"\",\"\
      ctasks\": []}]}"
  - type: xlrelease.BooleanVariable
    key: UseEHDS
    requiresValue: false
    showOnReleaseStart: false
    label: Does this application integrate with EHDS?
    description: Does this application integrate with EHDS?
  - type: xlrelease.MapStringStringVariable
    key: chgTaskData
    requiresValue: false
    showOnReleaseStart: false
    label: Data retrieved from the change task
  - type: xlrelease.StringVariable
    key: chgTask_sysid
    requiresValue: false
    showOnReleaseStart: false
    label: Sys ID of automatically created change task in Service Now
  - type: xlrelease.MapStringStringVariable
    key: chgTaskData_Off
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: chgTask_sysid_Off
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: changeJSON_Offline
    requiresValue: false
    showOnReleaseStart: false
    value: "{\"releaseId\": \"\",\"applabId\": \"\",\"ticketDetails\": [{\"ticketNumber\"\
      : \"\",\"ticketStatus\": \"\",\"releaseDate\": \"\",\"environment\": \"\",\"\
      ctasks\": []},{\"ticketNumber\": \"\",\"ticketStatus\": \"\",\"releaseDate\"\
      : \"\",\"environment\": \"\",\"ctasks\": []}]}"
  - type: xlrelease.StringVariable
    key: EHDSNote
    requiresValue: false
    showOnReleaseStart: false
    value: "EHDS Integration:  N/A"
  - type: xlrelease.BooleanVariable
    key: pendChange
    requiresValue: false
    showOnReleaseStart: false
  disableNotifications: true
  extensions:
  - name: Dashboard
    type: xlrelease.Dashboard
    owner: admin
    tiles:
    - name: Release progress
      type: xlrelease.ReleaseProgressTile
    - name: Release health
      type: xlrelease.ReleaseHealthTile
    - name: Release summary
      type: xlrelease.ReleaseSummaryTile
    - name: Resource usage
      type: xlrelease.ResourceUsageTile
    - name: Release Readiness
      type: xlrelease.MarkdownTile
      row: 1
      col: 0
      width: 1
      height: 1
      content: |-
        ### ${Change_Number_SN} Release Ready Status

        * Release Code Frozen: ${CodeFrozen-Flag}
        * Security Scan Certified: ${PendSecurityScan}
        * Testing Complete: ${CodeFrozen-Flag}
        * Dependencies Identified and Tested: ${Dependency-Flag}
        * All Critical and High Priority Defects Closed: ${NoOpenDefects-Flag}
        * Blue Exchange Impact: ${BXImpact-Flag}


        Release Ready: ${Release-Ready}
    - name: Change Request Data
      type: xlrelease.MarkdownTile
      row: 1
      col: 1
      width: 1
      height: 1
  riskProfile: Default risk profile
- template: argocd-test
  scheduledStartDate: 2024-07-22T09:00:00-04:00
  phases:
  - phase: New Phase
    tasks:
    - name: Get sync status
      type: argocd.getSyncStatus
      argocdServer: argocd-docker
      appName: dummy-app
    - name: WFS
      type: argocd.waitForStatus
      argocdServer: argocd-docker
      appName: daitest
      syncStatus: Synced
      owner: admin
    - name: WFS (copy) (copy)
      type: argocd.waitForStatus
      argocdServer: argocd-docker
      appName: daitest
      syncStatus: OutOfSync
      healthStatus: Healthy
      retryWaitTime: 0
      owner: admin
    - name: WFS (copy)
      type: argocd.waitForStatus
      argocdServer: argocd-docker
      appName: daitest
      syncStatus: OutOfSync
      healthStatus: Healthy
      retryWaitTime: 1
      owner: admin
  scriptUsername: admin
  scriptUserPassword: !value "xlrelease_Release_argocd_test_scriptUserPassword"
  riskProfile: Default risk profile
  author: admin
- template: test2
  scheduledStartDate: 2024-07-16T09:00:00-04:00
  phases:
  - phase: New Phase
    tasks:
    - name: jira
      type: jira.CheckIssue
      jiraServer: Jira-docker
      issueId: ABC-1
      expectedStatusList:
      - To Do
      tags:
      - tag2
  riskProfile: Default risk profile
  author: admin
- notifications:
  - notification: TASK_OVERDUE
    priority: High
    subject: "[Release] ${release.title}: ${task.title}"
    body: |-
      The **${task.title}** task in the **${release.title}** release is overdue.

      After the task is completed, please mark it as Completed in Release.
    roles:
    - Watcher
    - Release Admin
    - Task Owner
  - notification: TASK_FLAGGED
    priority: High
    subject: "[Release] ${release.title}: ${task.title}"
    body: |-
      The status of the **${task.title}** task in the **${release.title}** release was changed to **${task.flagStatus}** with the following comment:

      **${release.flagComment}**
    roles:
    - Watcher
    - Release Admin
    - Task Team
  - notification: AUDIT_REPORT_JOB_ABORTED
    priority: Normal
    subject: "[Release] Audit report was aborted"
    body: |-
      **Your audit report was aborted!**

       Please try to generate it again or contact your Release administrator for assistance.
  - notification: MANUAL_TASK_STARTED
    priority: Normal
    subject: "[Release] ${release.title}: ${task.title}"
    body: |-
      The **${task.title}** task in the **${release.title}** release has started and is assigned to you or your team.

      After the task is completed, please mark it as Completed in Release.
    roles:
    - Watcher
    - Task Owner
  - notification: TASK_FAILED
    priority: High
    subject: "[Release] ${release.title}: ${task.title}"
    body: |-
      The **${task.title}** task in the **${release.title}** release has failed.

      Other tasks could still be in progress, but the release will stop after they complete.

      You can retry the task, reassign it to somebody else or abort the release.
    roles:
    - Watcher
    - Task Team
    - Task Owner
  - notification: USER_MENTIONED
    priority: Normal
    subject: "[Release] ${mentionedByFullName} mentioned you on ${release.title}:\
      \ ${task.title}"
    body: "**${mentionedByFullName}** mentioned you on the **${task.title}** task\
      \ in the **${release.title}** release:"
  - notification: COMMENT_ADDED
    priority: Normal
    subject: "[Release] ${release.title}: ${task.title}"
    body: |-
      **${comment.authorFullName}** commented on the **${task.title}** task in the **${release.title}** release:

      ${comment.text}
    roles:
    - Watcher
    - Task Team
    - Task Owner
  - notification: AUDIT_REPORT_JOB_FAILED
    priority: Normal
    subject: "[Release] Audit report has failed"
    body: |-
      **Your audit report has failed!**

       Please try to generate it again or contact your Release administrator for assistance.
  - notification: RELEASE_FAILED
    priority: High
    subject: "[Release] ${release.title}"
    body: |-
      The **${release.title}** release has failed due to a task failure.

      The release is now stopped.

      You can retry the failed task, reassign it to somebody else or abort the release.
    roles:
    - Release Admin
  - notification: TASK_DUE_SOON
    priority: Normal
    subject: "[Release] ${release.title}: ${task.title}"
    body: |-
      The **${task.title}** task in the **${release.title}** release is due in **${task.dueInHours}** hours and **${task.dueInMinutes}** minutes.

      After the task is completed, please mark it as Completed in Release.
    roles:
    - Watcher
    - Release Admin
    - Task Owner
  - notification: ACTIVE_TASK_UNASSIGNED
    priority: Normal
    subject: "[Release] ${release.title}: ${task.title}"
    body: |-
      The **${task.title}** task in the **${release.title}** release is active but not assigned to anyone anymore.

      Please assign the task to a user or a team.
    roles:
    - Watcher
    - Task Team
    - Task Owner
  - notification: RELEASE_FAILING
    priority: High
    subject: "[Release] ${release.title}"
    body: |-
      The **${release.title}** release is failing due to a task failure.

      Other tasks may still be in progress, but the release will stop after they complete.

      You can retry the failed task, reassign it to somebody else or abort the release.
    roles:
    - Release Admin
  - notification: USER_TOKEN_ABOUT_TO_EXPIRE
    priority: Normal
    subject: "[Release] Your personal access token is about to expire"
    body: |-
      Your personal access token "'${token.tokenNote}'" will expire in about ${token.expirationDurationInHours} hours.

       If this token is still needed, visit [Access tokens](${url}#/personal-access-token) to generate an equivalent.
  - notification: RELEASE_FLAGGED
    priority: High
    subject: "[Release] ${release.title}"
    body: |-
      The status of the **${release.title}** release was changed to **${release.flagStatus}** with the following comment:

      **${release.flagComment}**
    roles:
    - Release Admin
  - notification: MANUAL_TASK_STARTED_WITHOUT_OWNER
    priority: Normal
    subject: "[Release] ${release.title}: ${task.title}"
    body: |-
      The **${task.title}** task in the **${release.title}** release has started, but it is not assigned.

      Please assign the task to a user or a team.
    roles:
    - Watcher
    - Release Admin
  - notification: RELEASE_COMPLETED
    priority: Normal
    subject: "[Release] ${release.title}"
    body: "The **${release.title}** release has been completed."
    roles:
    - Release Admin
  - notification: TASK_WAITING_FOR_INPUT
    priority: Normal
    subject: "[Release] ${release.title}: ${task.title}"
    body: |-
      The **${task.title}** task in the **${release.title}** release needs your input.

      Please enter the required information so the release can continue.
    roles:
    - Watcher
    - Task Team
    - Task Owner
  - notification: AUDIT_REPORT_JOB_COMPLETED
    priority: Normal
    subject: "[Release] Report '${report.reportName}' is ready"
    body: |-
      **Your audit report is complete!**

       '${report.reportName}' is ready for download.
  - notification: GENERIC_SYSTEM_NOTIFICATION
    priority: Normal
    subject: "${notification.subject}"
    body: "${notification.body}"
  - notification: RELEASE_STARTED
    priority: Normal
    subject: "[Release] ${release.title}"
    body: "The **${release.title}** release has been started."
    bulkSubject: "[Release] Multiple releases started"
    bulkBody: |-
      The following releases have been started:

      ${#releases}
      * [${title}](${url})
      ${/releases}
    roles:
    - Release Admin
  - notification: RELEASE_ABORTED
    priority: Normal
    subject: "[Release] ${release.title}"
    body: "The **${release.title}** release has been aborted."
    bulkSubject: "[Release] Multiple releases aborted"
    bulkBody: |-
      The following releases have been aborted:

      ${#releases}
      * [${title}](${url})
      ${/releases}
    roles:
    - Release Admin
  - notification: ACTIVE_TASK_ASSIGNED
    priority: Normal
    subject: "[Release] ${release.title}: ${task.title}"
    body: "The active task **${task.title}** in the **${release.title}** release is\
      \ now assigned to ${task.ownerFullName}."
    roles:
    - Watcher
    - Task Team
    - Task Owner
