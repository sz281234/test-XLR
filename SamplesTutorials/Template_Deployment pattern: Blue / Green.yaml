# Exported from:        http://MacBook-Pro.local:5516/
# Release version:      24.1.3
# Date created:         Thu Jan 16 11:28:18 EST 2025

---
apiVersion: xl-release/v1
kind: Templates
metadata:
  path: /
  home: Samples & Tutorials
spec:
- template: "Deployment pattern: Blue / Green"
  description: |-
    This Digital.ai Release template shows the **Blue/Green Deployment Pattern**.

    Blue-green deployment is a pattern in which identical production environments known as Blue and Green are maintained, one of which is live at all times.
    If the Blue is the live environment, applications or features are deployed to and tested on the non-live Green environment before user traffic is diverted to it.

    For more information, please read [Perform Blue/Green deployments](https://docs.digital.ai/bundle/devops-release-version-v.24.1/page/release/how-to/perform-blue-green-deployments.html) on our documentation site.
  scheduledStartDate: 2018-01-23T03:00:00-05:00
  dueDate: 2018-01-23T04:00:00-05:00
  phases:
  - phase: Select new environment
    tasks:
    - name: What is currently live?
      type: xlrelease.ScriptTask
      description: |-
        This script inspects what environment is currently live and determines what will be the new environment to deploy to.

        It uses global variables to maintain the state.
      script: |-
        missingGlobalVarsMessage = """

        ### Missing global variables

        Please add the following global variables:

        1. `global.blue-green.environments` of type **List** that contains the names of the Blue/Green environments in Digital.ai Deploy.
        2. `global.blue-green.live-environment` of type **List Box** that takes its values from **global.blue-green.environments**.
        3. `global.blue-green.live-version` of type **Text** that contains the current running version.

        These global variables are required to track environment status.

        ---

        """

        # Check if global variables are defined
        if ('global.blue-green.live-environment' not in globalVariables
            or 'global.blue-green.live-environment' not in globalVariables
            or 'global.blue-green.live-version' not in globalVariables):

            print missingGlobalVarsMessage
            raise Exception("Missing global variables")

        # Switch environments
        if globalVariables['global.blue-green.live-environment'] == globalVariables['global.blue-green.environments'][0]:
            releaseVariables['new-environment'] = globalVariables['global.blue-green.environments'][1]
        else:
            releaseVariables['new-environment'] = globalVariables['global.blue-green.environments'][0]
    - name: Confirm new environment
      type: xlrelease.UserInputTask
      description: |-
        **Live version:** `${global.blue-green.live-version}`
        **Current live environment:** `${global.blue-green.live-environment}`

        ---

        **New version:** `${application}/${version}`.
      variables:
      - new-environment
    color: '#3D6C9E'
  - phase: Deploy and test
    tasks:
    - name: "Deploy ${application}/${version} to ${new-environment}"
      type: xldeploy.Deploy
      deploymentPackage: "${application}/${version}"
      deploymentEnvironment: "${new-environment}"
      numberOfContinueRetrials: 0
      pollingInterval: 10
      numberOfPollingTrials: 0
      displayStepLogs: true
      connectionRetries: 10
      description: |-
        Use Digital.ai Deploy to do the actual deployment.

        Configure the Digital.ai Deploy server in **Connections**.
      owner: admin
    - name: "Run tests on ${new-environment}"
      type: xlrelease.Task
      description: |-
        ### Run acceptance tests

        Perform the acceptance tests before taking this version into production.

        **Application version:** `${application}/${version}`
        **Environment:** `${new-environment}`
    - name: OK to switch?
      type: xlrelease.GateTask
      description: |-
        **Current environment:** `${global.blue-green.live-environment}`
        **Current version:** `${global.blue-green.live-version}`

        ---

        **New environment:** `${new-environment}`
        **New version:** `${application}/${version}`

        The new version has been tested and the environment is ready to be switched over.


        ###  >> Please confirm the switch by completing this task <<
    color: '#FF9E49'
  - phase: Switch to live
    tasks:
    - name: Reconfigure load balancer
      type: xlrelease.Task
      description: |-
        Configure the load balancer to point to the environment running the new version.

        **New environment:** `${new-environment}`
        **New version:** `${application}/${version}`

        Complete this task when the switch has been made.
    - name: Update registry with live environment
      type: xlrelease.ScriptTask
      description: This script updates the global variables that keep track of the
        live environment and live version.
      script: |-
        globalVariables['global.blue-green.live-environment'] = '${new-environment}'
        globalVariables['global.blue-green.live-version'] = '${application}/${version}'
    - name: Send notification that new version is live
      type: xlrelease.NotificationTask
      description: Send out a notification to announce the new version being live.
      precondition: "False ## Remove this line to send the email"
      subject: "${application}/${version} is now live!"
      body: "**${application}/${version}** has been deployed to **${new-environment}**\
        \ and is now live!"
    color: '#498500'
  variables:
  - type: xlrelease.StringVariable
    key: application
    label: Application name
    description: The name of the application in Digital.ai Deploy.
    value: PetClinic-war
  - type: xlrelease.StringVariable
    key: version
    label: Version
    description: The version of the application in Digital.ai Deploy that will be
      deployed in this release.
  - type: xlrelease.StringVariable
    key: new-environment
    requiresValue: false
    showOnReleaseStart: false
    label: Environment to deploy to
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      variableMapping:
        values: "${global.blue-green.environments}"
  scriptUsername: admin
  scriptUserPassword: !value "xlrelease_Release_Deployment_pattern__Blue___Green_scriptUserPassword"
  riskProfile: Default risk profile
